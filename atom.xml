<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>智朋的个人博客</title>
  <icon>https://coffeelize.top/images/cat-avatar.jpg</icon>
  <subtitle>道阻且长，行则将至</subtitle>
  <link href="https://coffeelize.top/atom.xml" rel="self"/>
  
  <link href="https://coffeelize.top/"/>
  <updated>2022-12-19T14:31:39.921Z</updated>
  <id>https://coffeelize.top/</id>
  
  <author>
    <name>coffeelize</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>写在博客创建的一周年</title>
    <link href="https://coffeelize.top/posts/cf194633.html"/>
    <id>https://coffeelize.top/posts/cf194633.html</id>
    <published>2022-12-19T13:13:10.000Z</published>
    <updated>2022-12-19T14:31:39.921Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="coffeelize"><a href="#coffeelize" class="headerlink" title="coffeelize"></a>coffeelize</h3><p>这两天收到阿里云域名续费消息，同时也收到了网站 SSL 证书到期的邮件，是的，域名买了一年，到今天刚好一年。</p><span id="more"></span><p>博客在中途更换过一次域名，也就是现在的域名：<code>coffeelize.top</code>。之所以叫 coffeelize，不仅仅是因为 #咖啡日常 #，更多的其实是想强调 <code>lize</code>。<code>lize</code> 在英语单词中通常为动词的后缀，很多情况下 <code>名词 + lize</code> 后就变成了动词，一是想表达：就像喝了一杯咖啡一样，满满的驱动力；二是期望：自己能够像 “coffeee” 那样，能够带给周围人更多的积极向上的 “动力”。</p><p><img data-src="https://s2.loli.net/2022/12/19/x8gyqlSMFsrhIRk.png" alt="01-博客运行时间.png"></p><p><img data-src="https://s2.loli.net/2022/12/19/JUlu2bNvLd6M8Oo.png" alt="02-域名续费消息.png"></p><p><img data-src="https://s2.loli.net/2022/12/19/Zs513UwFVmuAnaf.png" alt="03-证书到期.png"></p><p>去年的这个时候，还在复习着数值分析的期末考试呢😂，搭建这个博客花了我很长时间，记得那个 SSL 总是无法正常连接，导致无法往仓库中推送文件，也算是苦中作乐吧，哈哈</p><p>有了自己的个人博客之后，开始关注更多相关领域的个人博客，学着有模有样的发布笔记、装扮博客、交换友链，开始更加注重消息的来源和质量。自己也喜欢看别人的博客和笔记，有种窥探别人日记本闯入他人领地的感觉，遇到和自己 “技术栈” 差不多的站长，会主动联系，加个好友、交换一下友链或者相互鼓励一下，这种感觉很棒，可能也是我不断更新下去的主要原因吧。</p><p>博客在这一年里也有一点点的收获，下图为必应搜索引擎的数据报告（因为之前更换了一次域名的原因，这里只显示从 6 月份开始到现在的数据）</p><p><img data-src="https://s2.loli.net/2022/12/19/pXoBg9TFJK8xmaC.png" alt="05-必应控制台.png"></p><p>其实我也不在乎这个数据报告，更在乎的是我的🤝朋友们及笔记呀<br><img data-src="https://s2.loli.net/2022/12/19/HyleRzDBEp4ISbc.png" alt="06-朋友们以及笔记.png"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;coffeelize&quot;&gt;&lt;a href=&quot;#coffeelize&quot; class=&quot;headerlink&quot; title=&quot;coffeelize&quot;&gt;&lt;/a&gt;coffeelize&lt;/h3&gt;&lt;p&gt;这两天收到阿里云域名续费消息，同时也收到了网站 SSL 证书到期的邮件，是的，域名买了一年，到今天刚好一年。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Life" scheme="https://coffeelize.top/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>Git 简明教程</title>
    <link href="https://coffeelize.top/posts/6326f1e4.html"/>
    <id>https://coffeelize.top/posts/6326f1e4.html</id>
    <published>2022-12-18T06:42:20.000Z</published>
    <updated>2022-12-19T14:31:39.919Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="什么是-Git"><a href="#什么是-Git" class="headerlink" title="什么是 Git"></a>什么是 Git</h3><p>Git 是一个分布式版本控制工具，主要用于管理开发过程中的源代码文件（Java 类、xml 文件、html 页面等），在软件开发过程中被广泛使用</p><span id="more"></span><h3 id="Git-能做什么"><a href="#Git-能做什么" class="headerlink" title="Git 能做什么"></a>Git 能做什么</h3><ul><li>代码回溯：Git 在管理文件过程中会记录日志，方便回退到历史版本</li><li>版本切换：Git 存在分支的概念，一个项目可以有多个分支（版本），可以任意切换</li><li>多人协作：Git 支持多人协作，即一个团队共同开发一个项目，每个团队成员负责一部分代码，通过 Git 就可以管理和协调</li><li>远程备份：Git 通过仓库管理文件，在 Git 中存在远程仓库，如果本地文件丢失还可以从远程仓库获取</li></ul><p>我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有 GitHub、码云、GitLab 等，这里以码云为例进行讲解</p><h3 id="Git-全局设置"><a href="#Git-全局设置" class="headerlink" title="Git 全局设置"></a>Git 全局设置</h3><p>当安装 Git 后首先要做的事情是设置用户名称和 email 地址。这是非常重要的，因为每次 Git 提交都会使用该用户信息。在 Git 命令行中执行下面命令：</p><ul><li>设置用户信息 </li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"coffeelize"</span></span><br><span class="line">git config --global user.email <span class="string">"coffeelize@qq.com"</span></span><br></pre></td></tr></tbody></table></figure><p>注意：<strong>上面设置的 user.name 和 user.email 并不是我们在注册码云账号时使用的用户名和邮箱</strong>，此处可以任意设置</p><ul><li>查看配置信息 </li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://s2.loli.net/2022/12/19/CiSLe2VtpFR7zvK.png" alt="01-配置用户名和邮箱.png"></p><h3 id="获取-Git-仓库"><a href="#获取-Git-仓库" class="headerlink" title="获取 Git 仓库"></a>获取 Git 仓库</h3><p>要使用 Git 对我们的代码进行管理，首先需要获得 Git 仓库，获取 Git 仓库通常有两种方式</p><ul><li>在本地初始化 Git 仓库（不常用）</li><li>从远程仓库克隆（常用）</li></ul><h4 id="在本地初始化-Git-仓库"><a href="#在本地初始化-Git-仓库" class="headerlink" title="在本地初始化 Git 仓库"></a>在本地初始化 Git 仓库</h4><ol><li>在任意目录下创建一个空目录（例如 repo1）作为我们的本地 Git 仓库</li><li>进入这个目录中，点击右键打开 Git bash 窗口</li><li>执行命令 <code>git init</code></li></ol><p>初始化之后，目录中会多一个 <code>.git</code> 隐藏文件夹，命令行后会多出一个 master 分支<br><img data-src="https://s2.loli.net/2022/12/19/Z7mXMf8ovShOWUF.png" alt="02-master主分支.png"></p><p>注意：本地仓库不是从远程仓库克隆下来的，且本地仓库中若已经存放了一些文件，此时再从远程仓库拉去文件的时候可能会报如下所示的错误：fatal: refusing to merge unrelated histories（原因是本地仓库中含有本地仓库中文件的历史记录，远程仓库中包含远程仓库中文件的记录信息，这两者间完全没有联系，此时就需要将两者建立起联系）</p><p><img data-src="https://s2.loli.net/2022/12/19/aw3mrhOHW9vg1Zb.png" alt="016-本地仓库首次连接远程仓库报错.png"></p><p>此时，可以通过如下命令解决</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></tbody></table></figure><h4 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h4><p>可以通过 Git 提供的命令从远程仓库进行克隆，将远程仓库克隆到本地</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 远程仓库地址</span><br></pre></td></tr></tbody></table></figure><p>注：第一次克隆远程仓库时，可能需要登录 Git Credential Manage，即登录 Gitee 的账号，登录之后即可正常操作。同时登录之后，也会将一些验证信息保存到电脑当中，之后再次使用就不用再手动登录了</p><p><img data-src="https://s2.loli.net/2022/12/19/jMc9uwJOTRiW17E.png" alt="03-登录Gitee验证.png"></p><h3 id="工作区、暂存区、版本库"><a href="#工作区、暂存区、版本库" class="headerlink" title="工作区、暂存区、版本库"></a>工作区、暂存区、版本库</h3><ul><li><strong>版本库</strong>：前面看到的 <code>.git 隐藏文件夹</code> 就是版本库，版本库中存储了很多配置信息、日志信息和文件版本信息等</li><li><strong>工作区</strong>：包含.git 文件夹的目录就是工作区，也称为工作目录，主要用于存放开发的代码</li><li><strong>暂存区</strong>：.git 文件夹中有很多文件，其中有一个 <code>index 文件</code> 就是暂存区。暂存区是一个临时保存修改文件的地方</li></ul><h3 id="Git-工作区中文件的状态"><a href="#Git-工作区中文件的状态" class="headerlink" title="Git 工作区中文件的状态"></a>Git 工作区中文件的状态</h3><p>Git 工作区中的文件存在两种状态：</p><ul><li>untracked：未跟踪（未被纳入版本控制）</li><li>tracked：已跟踪（被纳入版本控制）<ul><li>Unmodified 未修改状态</li><li> Modified 已修改状态</li><li> Staged 已暂存状态</li></ul></li></ul><h3 id="本地仓库常用操作"><a href="#本地仓库常用操作" class="headerlink" title="本地仓库常用操作"></a>本地仓库常用操作</h3><ul><li>git status：查看文件状态</li><li> git add：将文件的修改加入暂存区</li><li> git reset：将暂存区的文件取消暂存或者是切换到指定版本</li><li> git commit：将暂存区的文件修改提交到版本库</li><li> git log：查看日志</li></ul><h4 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h4><p>可以通过 <code>git status</code> 来查看当前状态<br><img data-src="https://s2.loli.net/2022/12/19/aAXWUjsLFzoqeDQ.png" alt="04-status查看状态.png"></p><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add fileName</span><br></pre></td></tr></tbody></table></figure><h4 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h4><p>每次 Git 提交都会产生新的版本号，通过版本号就可以回到历史版本</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 版本号</span><br><span class="line">git reset --hard 76b00c3fd44c92359d70e02cb4ff35c3acf90b40</span><br></pre></td></tr></tbody></table></figure><h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m msg 文件名</span><br><span class="line">git commit -m <span class="string">"提交一个文件"</span> User.java</span><br></pre></td></tr></tbody></table></figure><p>红色字体：未跟踪，也就是还没有纳入 git 的版本管理<br>绿色字体：文件已经放到了缓存区</p><h4 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h4><p>git log 命令的作用是查看提交日志；通过 git log 命令查看日志，可以发现每次提交都会产生一个版本号，提交时设置的 message、提交人、邮箱、提交时间等信息都会记录到日志中</p><p><img data-src="https://s2.loli.net/2022/12/19/gKTMRtdwW6nSsvL.png" alt="05-log查看日志.png"></p><h3 id="远程仓库常用命令"><a href="#远程仓库常用命令" class="headerlink" title="远程仓库常用命令"></a>远程仓库常用命令</h3><ul><li>git remote：查看远程仓库</li><li> git remote add：添加远程仓库</li><li> git clone：从远程仓库克隆</li><li> git pull：从远程仓库拉取</li><li> git push：推送到远程仓库</li></ul><h4 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h4><p>origin 表示远程仓库的简称</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br><span class="line">git remote -v</span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://s2.loli.net/2022/12/19/OQIXkWoCeEtbRj9.png" alt="06-查看远程仓库简称.png"></p><p>说明当前本地的仓库已经和远程的仓库之间建立好了连接了。如果输入以上两个命令没有返回值的话，说明这仅仅只是一个本地仓库</p><h4 id="git-remote-add"><a href="#git-remote-add" class="headerlink" title="git remote add"></a>git remote add</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add 简称 远程仓库地址</span><br></pre></td></tr></tbody></table></figure><p>注意</p><ul><li>一个本地仓库可以关联多个远程仓库</li><li>这个简称我们习惯命名为 origin</li></ul><p>比如我这边初始化了一个本地仓库，然后还有一个远程仓库，想要将这个本地仓库和远程仓库联系起来</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://gitee.com/coffeelize/repo1.git</span><br></pre></td></tr></tbody></table></figure><p>此时再输入命令 <code>git remote -v</code>，即可查看是否已经关联成功</p><h4 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h4><p>Git 克隆的是该 Git 仓库服务器上的几乎所有数据（包括日志信息、历史记录等）</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 远程仓库地址</span><br></pre></td></tr></tbody></table></figure><h4 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h4><p>将本地仓库内容推送到远程仓库</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push 远程仓库简称 分支名称</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>先需要将文件提交到本地仓库 (add &amp; commit)，再推送到远程仓库</p><h4 id="切换远程仓库"><a href="#切换远程仓库" class="headerlink" title="切换远程仓库"></a>切换远程仓库</h4><p>如果当前本地仓库需要链接到另一个远程仓库呢，怎么处理？<br>比如说本地仓库当前绑定的是 repo1 仓库，想要将本地仓库绑定到另外一个远程仓库 hellogit。当前如果已经连接到了一个远程仓库，是无法直接通过添加远程仓库 URL 来覆盖掉原来的 URL，如下图所示：</p><p><img data-src="https://s2.loli.net/2022/12/19/eM9OwU4TtP2hbFa.png" alt="017-无法直接覆盖远程连接的URL.png"></p><p>方式一：直接修改远程仓库地址，更换远程仓库地址</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin URL</span><br><span class="line">git remote set-url orgin https://gitee.com/coffeelize/hellogit.git</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>方式二：先先删除当前连接的远程仓库地址，然后在添加</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">git remote add origin url</span><br></pre></td></tr></tbody></table></figure><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><p>分支是 Git 使用过程中非常重要的概念。使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。</p><p>本地仓库和远程仓库中都有分支，同一个仓库可以有多个分支，各个分支相互独立，互不干扰。通过 git init 命令创建本地仓库时默认会创建一个 master 分支。</p><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><ul><li>git branch：列出所有本地分支</li><li> git branch -r：列出所有远程分支</li><li> git branch -a：列出所有本地分支和远程分支</li></ul><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名称</span><br><span class="line">git branch <span class="built_in">test</span></span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://s2.loli.net/2022/12/19/MpQ8A1bmc2wCYov.png" alt="07-创建分支.png"></p><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名称</span><br><span class="line">git checkout <span class="built_in">test</span></span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://s2.loli.net/2022/12/19/Dmi5soLJWx81thl.png" alt="08-切换分支.png"></p><h4 id="推送至远程仓库分支"><a href="#推送至远程仓库分支" class="headerlink" title="推送至远程仓库分支"></a>推送至远程仓库分支</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push 远程仓库简称 分支名称</span><br><span class="line">//将<span class="built_in">test</span>分支推送到远程仓库</span><br><span class="line">git push origin <span class="built_in">test</span> </span><br></pre></td></tr></tbody></table></figure><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git merge 分支名称</span><br><span class="line">git merge <span class="built_in">test</span></span><br></pre></td></tr></tbody></table></figure><p>分支合并时需注意合并的方向，是将命令中的分支合并到当前所在的分支</p><p><img data-src="https://s2.loli.net/2022/12/19/7getKomVWPIN3DL.png" alt="09-合并分支.png"></p><p>在合并分支这种大操作下，会进入 vim 模式要求我们写日志，按照 vim 的操作即可</p><p>如果在合并当中遇到文件冲突，比如说主分支对 A 文件进行了修改，测试分支也对 A 文件进行了修改，然后在主分支中合并分支时，报如下错误：Automatic merge failed; fix conflicts and then commit the result.</p><p><img data-src="https://s2.loli.net/2022/12/19/9PgOCTkJ3qyxnr6.png" alt="10-合并分支报错.png"></p><p>此时冲突的文件会自动加入如下内容。<br><img data-src="https://s2.loli.net/2022/12/19/cIbPGwn2ksgdyqh.png" alt="011-合并后的冲突文件.png"></p><p>假如我们是想要保留这两行，那么可以把这些自动生成的符号删除，然后还需要将这个有冲突的文件再 add 和 commit 一下，此时，仍然会有报错：<br>fatal: cannot do a partial commit during a merge.（不能在合并的时候只提交一部分）<br><img data-src="https://s2.loli.net/2022/12/19/U3C4zvuSK1iTYxr.png" alt="012-合并解决冲突文件后再次报错.png"></p><p>这个时候我们需要在 commit 后面添加一个 <code>-i</code> 参数，此时这个冲突被我们手动解决了，然后就可以正常 push 了</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"modify by me"</span> testBranch.txt -i</span><br><span class="line">git push origin master</span><br></pre></td></tr></tbody></table></figure><h3 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h3><p>Git 中的标签，指的是某个分支某个特定时间点的状态。通过标签，可以很方便的切换到标记时的状态。比较有代表性的是人们会使用这个功能来标记发布结点（v1.0 、v1.2 等）。</p><h4 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></tbody></table></figure><h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag 标签名</span><br><span class="line">git tag v0.1</span><br></pre></td></tr></tbody></table></figure><h4 id="删除本地标签"><a href="#删除本地标签" class="headerlink" title="删除本地标签"></a>删除本地标签</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -d 标签名</span><br><span class="line">git tag -d v0.1</span><br></pre></td></tr></tbody></table></figure><h4 id="删除远程标签"><a href="#删除远程标签" class="headerlink" title="删除远程标签"></a>删除远程标签</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin :refs/tags/标签名</span><br><span class="line">git push origin :refs/tags/v0.1</span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://s2.loli.net/2022/12/19/6dlXaVzxyr7GL9O.png" alt="013-删除远程标签.png"></p><h4 id="将标签推送至远程仓库"><a href="#将标签推送至远程仓库" class="headerlink" title="将标签推送至远程仓库"></a>将标签推送至远程仓库</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push 远程仓库简称 标签名</span><br><span class="line">git push origin v0.1</span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://s2.loli.net/2022/12/19/Ejv9nRudHbUyrFo.png" alt="014-将标签推送至远程仓库.png"></p><h4 id="检出标签"><a href="#检出标签" class="headerlink" title="检出标签"></a>检出标签</h4><p>检出标签时需要新建一个分支来指向某个标签。会自动将某个 tag 中的内容检出到一个新的分支下面</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 新建的一个分支名 标签名</span><br><span class="line">git checkout -b aNewBranch v0.2</span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://s2.loli.net/2022/12/19/dyaphUSAH3scDTP.png" alt="015-检出标签.png"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;什么是-Git&quot;&gt;&lt;a href=&quot;#什么是-Git&quot; class=&quot;headerlink&quot; title=&quot;什么是 Git&quot;&gt;&lt;/a&gt;什么是 Git&lt;/h3&gt;&lt;p&gt;Git 是一个分布式版本控制工具，主要用于管理开发过程中的源代码文件（Java 类、xml 文件、html 页面等），在软件开发过程中被广泛使用&lt;/p&gt;</summary>
    
    
    
    
    <category term="Git" scheme="https://coffeelize.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Linux 防火墙设置</title>
    <link href="https://coffeelize.top/posts/c8073837.html"/>
    <id>https://coffeelize.top/posts/c8073837.html</id>
    <published>2022-12-17T04:30:30.000Z</published>
    <updated>2022-12-19T14:31:39.920Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h3><span id="more"></span><table><thead><tr><th>操作</th><th>指令</th><th>备注</th></tr></thead><tbody><tr><td>查看防火墙状态</td><td> systemctl status firewalld / firewall-cmd –state</td><td></td></tr><tr><td> 暂时关闭防火墙</td><td> systemctl stop firewalld</td><td></td></tr><tr><td> 永久关闭防火墙 (禁用开机自启)</td><td>systemctl disable firewalld</td><td> 下次启动才生效</td></tr><tr><td>暂时开启防火墙</td><td> systemctl start firewalld</td><td></td></tr><tr><td> 永久开启防火墙 (启用开机自启)</td><td>systemctl enable firewalld</td><td> 下次启动才生效</td></tr><tr><td>开放指定端口</td><td> firewall-cmd –zone=public –add-port=8080/tcp –permanent</td><td> 需要重新加载生效</td></tr><tr><td>关闭指定端口</td><td> firewall-cmd –zone=public –remove-port=8080/tcp –permanent</td><td> 需要重新加载生效</td></tr><tr><td>立即生效 (重新加载)</td><td>firewall-cmd –reload</td><td></td></tr><tr><td> 查看开放端口</td><td> firewall-cmd –zone=public –list-ports</td><td></td></tr></tbody></table><p>注意：为了保证系统安全，不建议关闭服务器的防火墙；可以开放指定端口</p><p>比如说启用 Linux 的 Tomcat 服务，需要开启 8080 端口，</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></tbody></table></figure><p>然后就可以通过 ip:8080 来访问了 Linux 中的 Tomcat 了</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.119.128:8080</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;防火墙设置&quot;&gt;&lt;a href=&quot;#防火墙设置&quot; class=&quot;headerlink&quot; title=&quot;防火墙设置&quot;&gt;&lt;/a&gt;防火墙设置&lt;/h3&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://coffeelize.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Rest 风格简明笔记</title>
    <link href="https://coffeelize.top/posts/69507465.html"/>
    <id>https://coffeelize.top/posts/69507465.html</id>
    <published>2022-12-14T14:10:20.000Z</published>
    <updated>2022-12-19T14:31:39.920Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="Rest-简介"><a href="#Rest-简介" class="headerlink" title="Rest 简介"></a>Rest 简介</h3><p>Rest (Representation State Transfer, 表现形式状态转换)，即访问网络资源的格式</p><span id="more"></span><p>传统风格资源描述形式书写如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/user/getById?id=1</span><br><span class="line">http://localhost/user/saveUser</span><br></pre></td></tr></tbody></table></figure><p>REST 风格描述形式如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/user/1</span><br><span class="line">http://localhost/user</span><br></pre></td></tr></tbody></table></figure><p>特点</p><ul><li>隐藏资源的访问行为，无法通过地址得知对资源是何种操作</li><li>书写简化</li><li>按照 REST 风格访问资源时使用行为动作区分对资源进行了何种操作</li><li>根据 REST 风格对资源进行访问称为 RESTful</li></ul><p><img data-src="https://s2.loli.net/2022/12/19/eKqgoT9l7jDJRNI.png" alt="Rest风格增删改查.png"></p><p>注意事项</p><ul><li>上述行为是约定方式，约定不是规范，可以打破，所以称 REST 风格，而不是 REST 规范</li><li>描述模块的名称通常使用复数，也就是加 s 的格式描述，表示此类资源，而非单个资源，例如：users、books 等</li></ul><h3 id="Rest-入门案例"><a href="#Rest-入门案例" class="headerlink" title="Rest 入门案例"></a>Rest 入门案例</h3><p>1、原先的风格</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/save")</span>  </span><br><span class="line"><span class="meta">@ResponseBody</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>{  </span><br><span class="line">    System.out.println(<span class="string">"user save..."</span>);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'user save'}"</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2、REST 风格</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置当前请求方法为POST，表示REST风格中的添加操作  </span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users",method = RequestMethod.POST)</span>  </span><br><span class="line"><span class="meta">@ResponseBody</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>{  </span><br><span class="line">    System.out.println(<span class="string">"user save..."</span>);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'user save'}"</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置当前请求方法为DELETE，表示REST风格中的删除操作  </span></span><br><span class="line"><span class="comment">//@PathVariable注解用于设置路径变量（路径参数），要求路径上设置对应的占位符，并且占位符名称与方法形参名称相同  </span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users/{id}",method = RequestMethod.DELETE)</span>  </span><br><span class="line"><span class="meta">@ResponseBody</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>{  </span><br><span class="line">    System.out.println(<span class="string">"user delete..."</span> + id);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'user delete'}"</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注意 Postman 中的请求路径：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost//users/1</span><br></pre></td></tr></tbody></table></figure><p><code>@PathVariable</code> 表示后面的变量来自路径，但是来自路径中的哪儿呢？<br>而通过 <code>value = "/users/{id}"</code> 中就指明了路径参数（路径变量）</p><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置当前请求方法为PUT，表示REST风格中的修改操作  </span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users",method = RequestMethod.PUT)</span>  </span><br><span class="line"><span class="meta">@ResponseBody</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>{  </span><br><span class="line">    System.out.println(<span class="string">"user update..."</span>+user);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'user update'}"</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="根据-id-查询"><a href="#根据-id-查询" class="headerlink" title="根据 id 查询"></a>根据 id 查询</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置当前请求方法为GET，表示REST风格中的查询操作  </span></span><br><span class="line"><span class="comment">//@PathVariable注解用于设置路径变量（路径参数），要求路径上设置对应的占位符，并且占位符名称与方法形参名称相同  </span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users/{id}" ,method = RequestMethod.GET)</span>  </span><br><span class="line"><span class="meta">@ResponseBody</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>{  </span><br><span class="line">    System.out.println(<span class="string">"user getById..."</span>+id);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'user getById'}"</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置当前请求方法为GET，表示REST风格中的查询操作  </span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users",method = RequestMethod.GET)</span>  </span><br><span class="line"><span class="meta">@ResponseBody</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAll</span><span class="params">()</span></span>{  </span><br><span class="line">    System.out.println(<span class="string">"user getAll..."</span>);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'user getAll'}"</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>设定 http 请求动作：<code>@RequestMapping</code> 的 mathod 属性设置请求动作</li><li>设定请求参数（路径变量）</li><li><code>@PathVariable</code> 形参注解，用于绑定路径参数与处理器方法形参间的关系，要求路径参数名和形参名一一对应</li></ol><p><code>@RequestBody</code>：用于接收 json 数据<br><code>@RequestParam</code>：接受 URL 地址传参或表单传参<br><code>@PathVariable</code>：用于接收路径参数，使用 {参数名称} 描述路径参数</p><h3 id="RESTful-快速开发"><a href="#RESTful-快速开发" class="headerlink" title="RESTful 快速开发"></a>RESTful 快速开发</h3><h4 id="简化书写"><a href="#简化书写" class="headerlink" title="简化书写"></a>简化书写</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = "/users/{id}" ,method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users",method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users",method = RequestMethod.PUT)</span></span><br></pre></td></tr></tbody></table></figure><p>问题 1：可以看到，以上的这几个中 <code>value = "/users"</code> 都是重复要写的内容，能不能更简化呢？</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping("/books")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>{</span><br><span class="line"> <span class="comment">//各种处理器方法</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>问题 2：每一个处理器方法前面都带着一个 <code>@ResponseBody</code> 注解，能不能更简化些呢？</p><p>将 <code>@ResponseBody</code> 写到类的前面</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping("/books")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>{</span><br><span class="line"> <span class="comment">//各种处理器方法</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Spring ⇒ 既然每次都得写 <code>@Controller</code> 和 <code>@ResponseBody</code>，那就合二为一吧，使用 <code>@RestController</code> 即可</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/books")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>{</span><br><span class="line"> <span class="comment">//各种处理器方法</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>问题 3：每个处理器方法中都有</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">method = RequestMethod.POST</span><br><span class="line">method = RequestMethod.DELETE</span><br><span class="line">method = RequestMethod.PUT</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></tbody></table></figure><p>那么能不能简化书写呢？</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RequestMapping( method = RequestMethod.POST)  </span></span><br><span class="line"><span class="comment">//使用@PostMapping简化Post请求方法对应的映射配置</span></span><br><span class="line"><span class="meta">@PostMapping</span>        </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span></span>{  </span><br><span class="line">    System.out.println(<span class="string">"book save..."</span> + book);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'book save'}"</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>也就是说，使用注解 <code>@PostMapping</code> 来实现前面 mathod 属性中的功能</p><p>那么对于含有路径参数的呢？比如 delete ⇒ <code>@DeleteMapping("/{id}")</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RequestMapping(value = "/{id}" ,method = RequestMethod.DELETE)  </span></span><br><span class="line"><span class="meta">@DeleteMapping("/{id}")</span>     <span class="comment">//使用@DeleteMapping简化DELETE请求方法对应的映射配置  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>{  </span><br><span class="line">    System.out.println(<span class="string">"book delete..."</span> + id);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'book delete'}"</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@DeleteMapping("/{id}")</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="meta">@GetMapping("/{id}")</span></span><br></pre></td></tr></tbody></table></figure><h4 id="页面数据展示"><a href="#页面数据展示" class="headerlink" title="页面数据展示"></a>页面数据展示</h4><p>非本案例重点，这里省略操作</p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>基于 RESTful 页面数据交互总结</p><ul><li>先做后台功能，开发接口并调通接口</li><li>再做页面异步调用，确认功能可以正常访问</li><li>最后完成页面数据展示</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Rest-简介&quot;&gt;&lt;a href=&quot;#Rest-简介&quot; class=&quot;headerlink&quot; title=&quot;Rest 简介&quot;&gt;&lt;/a&gt;Rest 简介&lt;/h3&gt;&lt;p&gt;Rest (Representation State Transfer, 表现形式状态转换)，即访问网络资源的格式&lt;/p&gt;</summary>
    
    
    
    
    <category term="URL" scheme="https://coffeelize.top/tags/URL/"/>
    
  </entry>
  
  <entry>
    <title>TexStudio 配置及使用笔记</title>
    <link href="https://coffeelize.top/posts/afb103e0.html"/>
    <id>https://coffeelize.top/posts/afb103e0.html</id>
    <published>2022-12-12T12:44:20.000Z</published>
    <updated>2022-12-12T14:06:16.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>博客园：<a href="https://www.cnblogs.com/zyg123/p/10499675.html">06LaTeX 学习系列之 —TeXstudio 的使用</a></li><li>博客园：<a href="https://www.cnblogs.com/tsingke/p/15874512.html">Texstudio 常用快捷键（非常实用）</a></li><li>个人博客：<a href="http://haccanri.github.io/tools/2015/04/22/tex_editor.html">Texstudio 使用经验</a>（高阶操作）</li><li>连享会：<a href="https://lianxh.cn/news/1175c7e5d0ee0.html">LaTeX：TeXStudio 编辑器快捷键大全</a></li></ul><span id="more"></span><h3 id="1、常用快捷键"><a href="#1、常用快捷键" class="headerlink" title="1、常用快捷键"></a>1、常用快捷键</h3><table><thead><tr><th align="center"><strong>操作</strong></th><th align="center"><strong>快捷键</strong></th></tr></thead><tbody><tr><td align="center">插入环境</td><td align="center"> Ctrl+E</td></tr><tr><td align="center"> 插入行内公式</td><td align="center"> Ctrl+Shift+M</td></tr><tr><td align="center"> 注释 / 取消注释</td><td align="center"> Ctrl+T</td></tr><tr><td align="center"> 查看 PDF</td><td align="center">F7</td></tr><tr><td align="center"> 预览行内数学公式</td><td align="center"> Alt +P</td></tr><tr><td align="center"> 从 PDF 跳转至对应的 Tex</td><td align="center"> 在 PDF 中按 Ctrl 单击</td></tr></tbody></table><iframe src="https://quizlet.com/756156284/match/embed?i=24q5fr&amp;x=1jj1" height="500" width="100%" style="border:0"></iframe><h3 id="2、设置中文界面"><a href="#2、设置中文界面" class="headerlink" title="2、设置中文界面"></a>2、设置中文界面</h3><p><img data-src="https://s2.loli.net/2022/12/12/2Z6GLWJimAVSR9E.png" alt="01-Texstudio设置中文界面.png"></p><h3 id="3、设置编译器与编码"><a href="#3、设置编译器与编码" class="headerlink" title="3、设置编译器与编码"></a>3、设置编译器与编码</h3><p>为了正常的输出中文，我们需要把编译器改成 XeLaTeX ，utf-8 编码（默认）</p><h3 id="4、显示代码行号"><a href="#4、显示代码行号" class="headerlink" title="4、显示代码行号"></a>4、显示代码行号</h3><p><img data-src="https://s2.loli.net/2022/12/12/8nySts4QxHBTfje.png" alt="02-Texstudio显示行号.png"></p><h3 id="5、括号匹配高亮"><a href="#5、括号匹配高亮" class="headerlink" title="5、括号匹配高亮"></a>5、括号匹配高亮</h3><p>TexStudio 默认的括号匹配背景色好像是黄色的，有些看不清，不如设置个更亮一点的颜色吧</p><p><img data-src="https://s2.loli.net/2022/12/12/VkrzEOAZC9scXLQ.png" alt="03-括号匹配高亮1.png"></p><p><img data-src="https://s2.loli.net/2022/12/12/7vxtaQ1zIYOZFno.png" alt="04-括号匹配高亮2.png"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;博客园：&lt;a href=&quot;https://www.cnblogs.com/zyg123/p/10499675.html&quot;&gt;06LaTeX 学习系列之 —TeXstudio 的使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;博客园：&lt;a href=&quot;https://www.cnblogs.com/tsingke/p/15874512.html&quot;&gt;Texstudio 常用快捷键（非常实用）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;个人博客：&lt;a href=&quot;http://haccanri.github.io/tools/2015/04/22/tex_editor.html&quot;&gt;Texstudio 使用经验&lt;/a&gt;（高阶操作）&lt;/li&gt;
&lt;li&gt;连享会：&lt;a href=&quot;https://lianxh.cn/news/1175c7e5d0ee0.html&quot;&gt;LaTeX：TeXStudio 编辑器快捷键大全&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="quizlet" scheme="https://coffeelize.top/tags/quizlet/"/>
    
    <category term="LaTeX" scheme="https://coffeelize.top/tags/LaTeX/"/>
    
  </entry>
  
  <entry>
    <title>卸载 MySQL8 &amp; 安装 MySQL5</title>
    <link href="https://coffeelize.top/posts/642ade52.html"/>
    <id>https://coffeelize.top/posts/642ade52.html</id>
    <published>2022-12-11T07:48:20.000Z</published>
    <updated>2022-12-17T03:22:37.343Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="卸载前端准备"><a href="#卸载前端准备" class="headerlink" title="卸载前端准备"></a>卸载前端准备</h3><span id="more"></span><ol><li><p>MySQL 软件安装到哪儿<br><img data-src="https://s2.loli.net/2022/12/17/ZzSWamwC2qDe46J.png" alt="01-MySQL8 的安装位置.png"></p></li><li><p>MySQL 的数据库的数据都在哪儿<br><img data-src="https://s2.loli.net/2022/12/17/gOYTKLPaC6fkrb2.png" alt="02-MySQL8存放数据的位置.png"></p></li><li><p>右键计算机⇒管理⇒服务和应用程序</p></li></ol><p>找到服务 MySQL80</p><ol start="4"><li>右键电脑⇒属性⇒高级系统设置⇒环境变量，在 path 项下</li></ol><p><img data-src="https://s2.loli.net/2022/12/17/BDQ76Jjth5AvPb1.png" alt="03-MySQL8的环境变量.png"></p><h3 id="卸载步骤"><a href="#卸载步骤" class="headerlink" title="卸载步骤"></a>卸载步骤</h3><ol><li>停止 MySQL 服务</li><li>通过控制面板卸载程序的方式删除</li></ol><p><img data-src="https://s2.loli.net/2022/12/17/OtFWno8DwAiNaG6.png" alt="04-卸载两个程序.png"></p><p>以上截图中的两个都需要卸载</p><ol start="3"><li><p>删除环境变量</p></li><li><p>服务已经自动删除，无需我们在手动删除</p></li><li><p>重启电脑</p></li></ol><h3 id="安装-MySQL-5"><a href="#安装-MySQL-5" class="headerlink" title="安装 MySQL 5"></a>安装 MySQL 5</h3><p>下载地址：<a href="https://downloads.mysql.com/archives/installer/">MySQL :: Download MySQL Installer (Archived Versions)</a></p><p>下载 5.7.35 版本的 MSI Installer 安装包<br><img data-src="https://s2.loli.net/2022/12/17/Q1hHwJpcy2LXUvm.png" alt="05-选择安装版本以及安装包格式.png"></p><p>1、选择自定义的方式<br><img data-src="https://s2.loli.net/2022/12/17/FX8Lfp9biEn5vIN.png" alt="06-自定义安装.png"></p><p>2、选择需要安装的内容<br><img data-src="https://s2.loli.net/2022/12/17/TrdZEmICUv6qWkB.png" alt="07-需要安装的内容.png"></p><p>3、进行高级设置<br><img data-src="https://s2.loli.net/2022/12/17/sYUpAICHq63nLoN.png" alt="08-高级设定.png"></p><p>4、配置软件路径及数据库存放位置<br><img data-src="https://s2.loli.net/2022/12/17/KBofY5LHvzPcMmN.png" alt="09-配置安装路径及数据库数据路径.png"></p><p>5、端口号什么的不用修改，默认 3306 即可<br>6、设置账户密码</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>将软件安装目录下： bin 文件夹的整个路径复制到系统环境变量的 path 中即可</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;卸载前端准备&quot;&gt;&lt;a href=&quot;#卸载前端准备&quot; class=&quot;headerlink&quot; title=&quot;卸载前端准备&quot;&gt;&lt;/a&gt;卸载前端准备&lt;/h3&gt;</summary>
    
    
    
    
    <category term="MySQL" scheme="https://coffeelize.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Element 简明笔记</title>
    <link href="https://coffeelize.top/posts/6d896227.html"/>
    <id>https://coffeelize.top/posts/6d896227.html</id>
    <published>2022-12-07T14:30:20.000Z</published>
    <updated>2022-12-12T14:06:16.741Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="Element-是什么"><a href="#Element-是什么" class="headerlink" title="Element 是什么"></a>Element 是什么</h3><p>将页面变得美美的呀😀</p><p>Element 是饿了么公司前端开发团队提供的一套基于 Vue 的网站组件库，用于快速构建网页<br>组件：组件网页的部件，例如：超链接、按钮、图片、表格等等</p><p>官网：<a href="https://element.eleme.cn/#/zh-CN">Element - 网站快速成型工具</a></p><span id="more"></span><h3 id="Element-快速入门"><a href="#Element-快速入门" class="headerlink" title="Element 快速入门"></a>Element 快速入门</h3><ol><li>引入 Element 的 css、js 文件和 Vue.js</li><li> 创建 Vue 核心对象</li><li>官网复制 Element 组件代码</li></ol><h4 id="1、将整个-element-ui-文件夹拷贝至-webapp-文件夹下"><a href="#1、将整个-element-ui-文件夹拷贝至-webapp-文件夹下" class="headerlink" title="1、将整个 element-ui 文件夹拷贝至 webapp 文件夹下"></a>1、将整个 element-ui 文件夹拷贝至 webapp 文件夹下</h4><p>因为包含了一整套组件，element-ui 包含了大量文件（差不多 8M 了）</p><h4 id="2、新建-HTML-页面，并引入-css、js-文件"><a href="#2、新建-HTML-页面，并引入-css、js-文件" class="headerlink" title="2、新建 HTML 页面，并引入 css、js 文件"></a>2、新建 HTML 页面，并引入 css、js 文件</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--通过下载好的element-ui文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"element-ui/lib/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"element-ui/lib/theme-chalk/index.css"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--或者--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;link rel="stylesheet" href="https://unpkg.com/element-ui/lib/theme-chalk/index.css"&gt;</span></span><br><span class="line"><span class="comment">&lt;script src="https://unpkg.com/element-ui/lib/index.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3、创建-Vue-核心对象-搭建框架"><a href="#3、创建-Vue-核心对象-搭建框架" class="headerlink" title="3、创建 Vue 核心对象 (搭建框架)"></a>3、创建 Vue 核心对象 (搭建框架)</h4><p>将代码写到 div 标签中即可；若需要引入 CSS 样式，可将其复制到 <code>&lt;/head&gt;</code> 之上</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"element-ui/lib/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"element-ui/lib/theme-chalk/index.css"</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">  </span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue({  </span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>:<span class="string">"app"</span>,  </span></span><br><span class="line"><span class="javascript">  </span></span><br><span class="line"><span class="javascript">  })  </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="4、去官网上找组件的代码"><a href="#4、去官网上找组件的代码" class="headerlink" title="4、去官网上找组件的代码"></a>4、去官网上找组件的代码</h4><p>比如去官网上找着这个按钮，看起来还不错，复制它的代码到 div 标签中即可</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button type=<span class="string">"danger"</span>&gt;危险按钮&lt;/el-button&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="5、小案例的完整代码"><a href="#5、小案例的完整代码" class="headerlink" title="5、小案例的完整代码"></a>5、小案例的完整代码</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"danger"</span>&gt;</span>危险按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"element-ui/lib/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"element-ui/lib/theme-chalk/index.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>:<span class="string">"app"</span></span></span><br><span class="line"><span class="javascript">  })</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Element-布局"><a href="#Element-布局" class="headerlink" title="Element 布局"></a>Element 布局</h3><p>Element 中有两种布局方式：Layout 布局和 Container 布局容器</p><h4 id="Layout-布局"><a href="#Layout-布局" class="headerlink" title="Layout 布局"></a>Layout 布局</h4><p>通过基础的 24 分栏，迅速简便地创建布局</p><p>官方案例：<a href="https://element.eleme.cn/#/zh-CN/component/layout">基础布局 | Element</a>，直接复制 CSS 和 HTML 标签到我们的页面当中即可</p><p><img data-src="https://s2.loli.net/2022/12/12/LQVR1SEGiDxtMv2.png" alt="01-从实例代码中复制HTML和CSS实现布局的引入.png"></p><h4 id="Container-容器布局"><a href="#Container-容器布局" class="headerlink" title="Container 容器布局"></a>Container 容器布局</h4><p>用于布局的容器组件，方便快速搭建页面的基本结构</p><p>官网示例：<a href="https://element.eleme.cn/#/zh-CN/component/container">Container 布局容器 | Element</a></p><p>同样也是复制 css 和 html。需要注意到是，如果布局中包含数据（比如含有表格等），那么我们只要将 data 复制到我们创建的 vue 对象中即可</p><p>官方给出代码</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> item = {</span></span><br><span class="line"><span class="javascript">        <span class="attr">date</span>: <span class="string">'2016-05-02'</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">'王小虎'</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">address</span>: <span class="string">'上海市普陀区金沙江路 1518 弄'</span></span></span><br><span class="line"><span class="javascript">      };</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">        <span class="attr">tableData</span>: <span class="built_in">Array</span>(<span class="number">20</span>).fill(item)</span></span><br><span class="line"><span class="javascript">      }</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  };</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>将 以上代码中的 data 复制到我们创建的 HTML 页面中的 vue 对象中去；同理，如果实例代码中有 methods 等属性的话，也一并复制到新建的 Vue 对象中去</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;  </span><br><span class="line">  <span class="keyword">new</span> Vue({  </span><br><span class="line">    el:<span class="string">"app"</span>,  </span><br><span class="line">      data() {  </span><br><span class="line">          <span class="keyword">const</span> item = {  </span><br><span class="line">              date: <span class="string">'2016-05-02'</span>,  </span><br><span class="line">              name: <span class="string">'王小虎'</span>,  </span><br><span class="line">              address: <span class="string">'上海市普陀区金沙江路 1518 弄'</span>  </span><br><span class="line">          };  </span><br><span class="line">          <span class="keyword">return</span> {  </span><br><span class="line">              tableData: Array(<span class="number">20</span>).fill(item)  </span><br><span class="line">          }  </span><br><span class="line">      }  </span><br><span class="line">  })  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="Element-组件"><a href="#Element-组件" class="headerlink" title="Element 组件"></a>Element 组件</h3><p>参考官方示例：<a href="https://element.eleme.cn/#/zh-CN/component/installation">组件 | Element</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Element-是什么&quot;&gt;&lt;a href=&quot;#Element-是什么&quot; class=&quot;headerlink&quot; title=&quot;Element 是什么&quot;&gt;&lt;/a&gt;Element 是什么&lt;/h3&gt;&lt;p&gt;将页面变得美美的呀😀&lt;/p&gt;
&lt;p&gt;Element 是饿了么公司前端开发团队提供的一套基于 Vue 的网站组件库，用于快速构建网页&lt;br&gt;组件：组件网页的部件，例如：超链接、按钮、图片、表格等等&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://element.eleme.cn/#/zh-CN&quot;&gt;Element - 网站快速成型工具&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Front End" scheme="https://coffeelize.top/tags/Front-End/"/>
    
    <category term="Element" scheme="https://coffeelize.top/tags/Element/"/>
    
    <category term="Vue" scheme="https://coffeelize.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Axios 异步框架简明笔记</title>
    <link href="https://coffeelize.top/posts/2fb0fb99.html"/>
    <id>https://coffeelize.top/posts/2fb0fb99.html</id>
    <published>2022-12-07T08:35:44.000Z</published>
    <updated>2022-12-07T10:56:18.600Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="Axios-异步框架简介"><a href="#Axios-异步框架简介" class="headerlink" title="Axios 异步框架简介"></a>Axios 异步框架简介</h3><p>Axios 对原生的 AJAX 进行封装，简化书写</p><h3 id="Axios-快速入门"><a href="#Axios-快速入门" class="headerlink" title="Axios 快速入门"></a>Axios 快速入门</h3><ol><li>引入 axios 的 js 文件</li><li>使用 axios 发送请求，并获取相应结果<span id="more"></span>详细步骤如下</li></ol><p>一、在 webapp 下新建 js 文件夹，拷贝 axios 的 js 文件<br>二、新建 html 文件，引入 js 文件</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/axios-0.18.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>三、创建 AxiosServlet</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AxiosServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">        System.out.println(<span class="string">"get..."</span>);  </span><br><span class="line">        <span class="comment">//1.接收请求参数  </span></span><br><span class="line">        String username = request.getParameter(<span class="string">"username"</span>);  </span><br><span class="line">        System.out.println(username);  </span><br><span class="line">        <span class="comment">//2.响应数据  </span></span><br><span class="line">        response.getWriter().write(<span class="string">"hello Axios"</span>);  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">        System.out.println(<span class="string">"post..."</span>);  </span><br><span class="line">        <span class="keyword">this</span>.doGet(request, response);  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>四、在 html 中编写 js 代码</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/axios-0.18.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//1.get</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">/* axios({</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       method:"get",</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       url:"http://localhost:8080/ajax-dmeo/axiosServlet?username=zhangsan"</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     }).then(function (resp){</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         alert(resp.data);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     })*/</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//2.post</span></span></span><br><span class="line"><span class="javascript">    axios({</span></span><br><span class="line"><span class="javascript">        <span class="attr">method</span>: <span class="string">"get"</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">url</span>: <span class="string">"http://localhost:8080/ajax-dmeo/axiosServlet"</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//data是请求参数</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: <span class="string">"username=zhangsan"</span></span></span><br><span class="line"><span class="javascript">    }).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>) </span>{</span></span><br><span class="line"><span class="javascript">        alert(resp.data);</span></span><br><span class="line"><span class="javascript">    })</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>代码说明及注意事项</p><ol><li>axios 大括号中的为 Java 中的对象</li><li><code>.then()</code> 方法是一个回调函数，如果响应接收到了的话就自动执行</li><li><code>data: "username=zhangsan"</code>，data 是请求参数。这里可以传 JSON 格式的数据。除此之外，还可以传 JS 对象类型的数据（JSON 数据格式可以和 Java 中的对象数据格式通过某些方式进行转换），因为 Axios 框架会自动将这个 JS 对象转为 JSON 的数据格式</li><li> Get 和 Post 两种方式传递参数的方式不一样，所以在 axios 方法中传入的对象（大括号包裹的内容）的方式不一样，一个写在 URL 中，一个写在 Data 属性中</li><li><code>.then()</code> 回调函数中，function 函数中的参数名可以不为 resp，随便一个都行，保持下面对象（resp.data）和这个参数名（resp）一致即可</li><li><code>resp.data</code> 即服务器端的 Servlet 响应过来的数据 </li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">flowchart&nbsp;RL</span><br><span class="line">    b1--&gt;|"username = &amp;quot;zhangsan&amp;quot;"|servlet1</span><br><span class="line">    servlet1--&gt;|data|b1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;subgraph&nbsp;Browsers  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;b1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;b2</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;end  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;subgraph&nbsp;servers  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;servlet1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;servlet2</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;end</span><br></pre></td></tr></tbody></table></figure><p>简单来说，Axios 实现的功能就是：通过 get 或 post 给 Servlet 传递一个参数（username=“zhangsan”），然后 Servlet 接收到这个参数，就可以进行判断的操作，根据判断的结果在给浏览器发送一个响应。浏览器收到响应数据（date）之后，就可以做出一些操作，比如弹出窗口操作。</p><h3 id="Axios-请求方式别名"><a href="#Axios-请求方式别名" class="headerlink" title="Axios 请求方式别名"></a>Axios 请求方式别名</h3><p>为了方便起见，Axios 已经为所有支持的请求方法提供了别名</p><p>发送 Get 请求</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. Get方式  </span></span><br><span class="line">axios.get(<span class="string">"http://localhost:8080/ajax-dmeo/axiosServlet?username=zhangsan"</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>)</span>{  </span><br><span class="line">    alert(resp.data);  </span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>发送 Post 请求</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">"http://localhost:8080/ajax-dmeo/axiosServlet?username=zhangsan"</span>,<span class="string">"username=zhangsan"</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>)</span>{  </span><br><span class="line">    alert(resp.data);  </span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>原生的 Axios 书写方式 VS 别名的简化书写方式</p><ul><li>原生的书写格式：阅读性较好</li><li>别名的方式：代码量少，基本上只需要填写必要的参数信息</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Axios-异步框架简介&quot;&gt;&lt;a href=&quot;#Axios-异步框架简介&quot; class=&quot;headerlink&quot; title=&quot;Axios 异步框架简介&quot;&gt;&lt;/a&gt;Axios 异步框架简介&lt;/h3&gt;&lt;p&gt;Axios 对原生的 AJAX 进行封装，简化书写&lt;/p&gt;
&lt;h3 id=&quot;Axios-快速入门&quot;&gt;&lt;a href=&quot;#Axios-快速入门&quot; class=&quot;headerlink&quot; title=&quot;Axios 快速入门&quot;&gt;&lt;/a&gt;Axios 快速入门&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;引入 axios 的 js 文件&lt;/li&gt;
&lt;li&gt;使用 axios 发送请求，并获取相应结果</summary>
    
    
    
    
    <category term="AJAX" scheme="https://coffeelize.top/tags/AJAX/"/>
    
    <category term="Front End" scheme="https://coffeelize.top/tags/Front-End/"/>
    
    <category term="Java" scheme="https://coffeelize.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Mermaid 简明教程</title>
    <link href="https://coffeelize.top/posts/89543310.html"/>
    <id>https://coffeelize.top/posts/89543310.html</id>
    <published>2022-12-07T00:40:20.000Z</published>
    <updated>2022-12-07T08:54:14.665Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li>Mermaid 官方文档：<a href="https://mermaid-js.github.io/mermaid/#/">mermaid - Markdownish syntax for generating flowcharts, sequence diagrams, class diagrams, gantt charts and git graphs.</a></li><li>Github：<a href="https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md">Mermaid 中文说明文档</a></li><li> Mermaid 在线编辑 Github：<a href="https://github.com/mermaidjs/mermaid-live-editor">mermaid-live-editor</a></li><li>VScode 插件：<a href="https://marketplace.visualstudio.com/items?itemName=bierner.markdown-mermaid">Markdown Preview Mermaid Support</a></li><li>VScode 插件：<a href="https://marketplace.visualstudio.com/items?itemName=bpruitt-goddard.mermaid-markdown-syntax-highlighting">Mermaid Markdown Syntax Highlighting</a></li></ol><h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><ol><li>个人博客：<a href="https://ghobam.com/2022/05/06/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE/">Mermaid 流程图 - Sherwood 的博客</a></li></ol><span id="more"></span><h3 id="流程图快速入门"><a href="#流程图快速入门" class="headerlink" title="流程图快速入门"></a>流程图快速入门</h3><h4 id="案例-1：常规流程图"><a href="#案例-1：常规流程图" class="headerlink" title="案例 1：常规流程图"></a>案例 1：常规流程图</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[Christmas] --&gt;|Get money| B(Go shopping)</span><br><span class="line">    B --&gt; C{Let me think}</span><br><span class="line">    C --&gt;|One| D[Laptop]</span><br><span class="line">    C --&gt;|Two| E[iPhone]</span><br><span class="line">    C --&gt;|Three| F[Car]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[Christmas] --&gt;|Get money| B(Go shopping)</span><br><span class="line">    B --&gt; C{Let me think}</span><br><span class="line">    C --&gt;|One| D[Laptop]</span><br><span class="line">    C --&gt;|Two| E[iPhone]</span><br><span class="line">    C --&gt;|Three| F[Car]</span><br></pre></td></tr></tbody></table></figure><ul><li><p>第一行：TD（Top down）自上而下；<br>除此之外，还有上 (Top) 下 (Bottom) 左 (Left) 右 (Right)，可以两两组合来确定流程图的方向</p></li><li><p>第二行：中括号表示图形中的矩形，圆括号为圆角矩形，两竖线之间的表示箭头上的文字<br>除此之外，还有各种箭头和图形样式，这里不再列举，详细请查看官方文档和 <a href="https://ghobam.com/2022/05/06/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE/">Mermaid 流程图 - Sherwood 的博客</a></p></li></ul><h4 id="案例-2：带有子图的流程图"><a href="#案例-2：带有子图的流程图" class="headerlink" title="案例 2：带有子图的流程图"></a>案例 2：带有子图的流程图</h4><p>子图的基本语法为</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subgraph title</span><br><span class="line"> graph definition</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><p>完整案例如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">flowchart&nbsp;RL</span><br><span class="line">    b1--&gt;|"username = &amp;quot;zhangsan&amp;quot;"|servlet1</span><br><span class="line">    servlet1--&gt;|data|b1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;subgraph&nbsp;Browsers  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;b1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;b2</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;end  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;subgraph&nbsp;servers  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;servlet1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;servlet2</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;end</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">flowchart&nbsp;RL</span><br><span class="line">    b1--&gt;|"username = &amp;quot;zhangsan&amp;quot;"|servlet1</span><br><span class="line">    servlet1--&gt;|data|b1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;subgraph&nbsp;Browsers  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;b1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;b2</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;end  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;subgraph&nbsp;servers  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;servlet1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;servlet2</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;end</span><br></pre></td></tr></tbody></table></figure><p>特别注意：两竖线中的内容（也就是箭头上的文字）不能包含双引号，在 Mermaid 中算是特殊符号，请查阅 <a href="https://ghobam.com/2022/05/06/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE/">Mermaid 流程图 - Sherwood 的博客</a>，需要额外进行处理。<code>&amp;quot;</code> 来表示双引号。所以，在箭头上还是尽量少用双引号吧😀</p><p>以下方式均会导致绘图出错</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b1--&gt;|1.username = '"zhangsan"'|servlet1</span><br><span class="line">b1--&gt;'|1.username = "zhangsan"|'servlet1</span><br><span class="line">b1--&gt;|'1.username = "zhangsan"'|servlet1</span><br></pre></td></tr></tbody></table></figure><p>正确的处理方式</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b1--&gt;|"username = &amp;quot;zhangsan&amp;quot;"|servlet1</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Mermaid 官方文档：&lt;a href=&quot;https://mermaid-js.github.io/mermaid/#/&quot;&gt;mermaid - Markdownish syntax for generating flowcharts, sequence diagrams, class diagrams, gantt charts and git graphs.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github：&lt;a href=&quot;https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md&quot;&gt;Mermaid 中文说明文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; Mermaid 在线编辑 Github：&lt;a href=&quot;https://github.com/mermaidjs/mermaid-live-editor&quot;&gt;mermaid-live-editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;VScode 插件：&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=bierner.markdown-mermaid&quot;&gt;Markdown Preview Mermaid Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;VScode 插件：&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=bpruitt-goddard.mermaid-markdown-syntax-highlighting&quot;&gt;Mermaid Markdown Syntax Highlighting&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;推荐阅读&quot;&gt;&lt;a href=&quot;#推荐阅读&quot; class=&quot;headerlink&quot; title=&quot;推荐阅读&quot;&gt;&lt;/a&gt;推荐阅读&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;个人博客：&lt;a href=&quot;https://ghobam.com/2022/05/06/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE/&quot;&gt;Mermaid 流程图 - Sherwood 的博客&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="绘图" scheme="https://coffeelize.top/tags/%E7%BB%98%E5%9B%BE/"/>
    
    <category term="Mermaid" scheme="https://coffeelize.top/tags/Mermaid/"/>
    
  </entry>
  
  <entry>
    <title>AJAX 简明笔记</title>
    <link href="https://coffeelize.top/posts/d92ca625.html"/>
    <id>https://coffeelize.top/posts/d92ca625.html</id>
    <published>2022-12-06T06:17:16.000Z</published>
    <updated>2022-12-07T12:03:41.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="AJAX-简介"><a href="#AJAX-简介" class="headerlink" title="AJAX 简介"></a>AJAX 简介</h3><p>AJAX(Asynchronous JavaScirpt And XML)：<strong>异步</strong> 的 JavaScript 和 XML</p><span id="more"></span><p>同步和异步的比较如图所示<br><img data-src="https://s2.loli.net/2022/12/07/pX1lt9kHqKyhiZB.png" alt="03-同步和异步的比较.png"></p><p>AJAX 作用：</p><ol><li>与服务器进行数据交换：通过 AJAX 可以给服务器发送请求，并获取服务器响应的数据<ol><li>使用 AJAX 和服务器进行通信，就可以使用 HTML+AJAX 来替换 JSP 页面了</li><li>使用它的一个重要原因是可以用来替换 JSP 页面；JSP 做不到前后端分离</li></ol></li><li>异步交互：可以在 <strong>不重新加载整个页面</strong> 的情况下，与服务器交换数据并 <strong>更新部分</strong> 网页端技术，如：搜索联想，用户名是否可用校验等等</li></ol><p>之前的做法：JSP<br><img data-src="https://s2.loli.net/2022/12/07/O9PYR4Xtsy7Tqch.png" alt="01-响应请求JSP做法.png"></p><p>现在的做法：AJAX<br><img data-src="https://s2.loli.net/2022/12/07/mhD2onQgtAJT5qZ.png" alt="02-响应请求AJAX做法.png"></p><h3 id="AJAX-快速入门"><a href="#AJAX-快速入门" class="headerlink" title="AJAX 快速入门"></a>AJAX 快速入门</h3><ol><li>编写 AjaxServlet，并使用 response 输出字符串（后端代码）</li><li>创建 XMLHttpRequest 对象：损失和服务器交换数据（前端代码）</li><li>想服务器发送请求（前端代码）</li><li>获取服务器响应数据（前端代码）</li></ol><p>一、编写 AjaxServlet，并使用 response 输出字符串</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet("/ajaxServlet")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//1.响应数据  </span></span><br><span class="line">        response.getWriter().write(<span class="string">"hello AJAX"</span>);  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">        <span class="keyword">this</span>.doGet(request, response);  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>二、创建核心对象</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhttp;  </span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) {  </span><br><span class="line">  xhttp = <span class="keyword">new</span> XMLHttpRequest();  </span><br><span class="line">} <span class="keyword">else</span> {  </span><br><span class="line">  <span class="comment">// code for IE6, IE5  </span></span><br><span class="line">  xhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>代码可参考 W3C：<a href="https://www.w3school.com.cn/js/js_ajax_http.asp">AJAX - XMLHttpRequest 对象</a></p><p>三、发送请求</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xhttp.open(<span class="string">"GET"</span>, <span class="string">"http://localhost:8080/ajax-dmeo/ajaxServlet"</span>);</span><br><span class="line">xhttp.send();</span><br></pre></td></tr></tbody></table></figure><p>注意：这里的路径是全路径，因为后期项目的前端和后端需要部署在不同的服务器上，需要使用绝对路径而不是相对路径</p><p>代码可参考 W3C：<a href="https://www.w3school.com.cn/js/js_ajax_http_send.asp">AJAX - XMLHttpRequest</a></p><p>四、获取响应</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xhttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{  </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span> &amp;&amp; <span class="built_in">this</span>.status == <span class="number">200</span>) {  </span><br><span class="line">            alert(<span class="built_in">this</span>.responseText)  </span><br><span class="line">    }  </span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>代码参考 W3C：<a href="https://www.w3school.com.cn/js/js_ajax_http_response.asp">AJAX - 服务器响应</a></p><h3 id="AJAX完整案例"><a href="#AJAX完整案例" class="headerlink" title="AJAX完整案例"></a>AJAX 完整案例</h3><p>注意：还需要我们在服务器端创建一个用于响应浏览器的 Servlet，如以上步骤一所示（一、编写 AjaxServlet，并使用 response 输出字符串）</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">  </span></span><br><span class="line"><span class="javascript">    <span class="comment">//1.创建核心对象  </span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> xhttp;  </span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) {  </span></span><br><span class="line"><span class="javascript">      xhttp = <span class="keyword">new</span> XMLHttpRequest();  </span></span><br><span class="line"><span class="javascript">    } <span class="keyword">else</span> {  </span></span><br><span class="line"><span class="javascript">      <span class="comment">// code for IE6, IE5  </span></span></span><br><span class="line"><span class="javascript">      xhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);  </span></span><br><span class="line"><span class="javascript">    }  </span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//2.发送请求  </span></span></span><br><span class="line"><span class="javascript">    xhttp.open(<span class="string">"GET"</span>, <span class="string">"http://localhost:8080/ajax-dmeo/ajaxServlet"</span>);  </span></span><br><span class="line"><span class="javascript">    xhttp.send();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//3.获取响应</span></span></span><br><span class="line"><span class="javascript">    xhttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{  </span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span> &amp;&amp; <span class="built_in">this</span>.status == <span class="number">200</span>) {  </span></span><br><span class="line"><span class="javascript">                alert(<span class="built_in">this</span>.responseText)  </span></span><br><span class="line"><span class="javascript">        }  </span></span><br><span class="line"><span class="javascript">    };  </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;AJAX-简介&quot;&gt;&lt;a href=&quot;#AJAX-简介&quot; class=&quot;headerlink&quot; title=&quot;AJAX 简介&quot;&gt;&lt;/a&gt;AJAX 简介&lt;/h3&gt;&lt;p&gt;AJAX(Asynchronous JavaScirpt And XML)：&lt;strong&gt;异步&lt;/strong&gt; 的 JavaScript 和 XML&lt;/p&gt;</summary>
    
    
    
    
    <category term="AJAX" scheme="https://coffeelize.top/tags/AJAX/"/>
    
    <category term="Front End" scheme="https://coffeelize.top/tags/Front-End/"/>
    
    <category term="Java" scheme="https://coffeelize.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Filter 简明笔记</title>
    <link href="https://coffeelize.top/posts/c5ef217f.html"/>
    <id>https://coffeelize.top/posts/c5ef217f.html</id>
    <published>2022-12-06T03:20:39.000Z</published>
    <updated>2022-12-12T14:06:16.742Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="什么是-Filter"><a href="#什么是-Filter" class="headerlink" title="什么是 Filter"></a>什么是 Filter</h3><ul><li>Filter 表示过滤器，是 JavaWeb 三大组件 (Servlet、Filter、Listener) 之一</li><li>过滤器可以把对资源的请求拦截下来，从而实现一些特殊的功能</li><li>过滤器一般完成一些通用的操作，比如：权限控制、统一编码处理、敏感字符处理等</li></ul><span id="more"></span><p><img data-src="https://s2.loli.net/2022/12/12/YN6UJgCF2j8pE4Q.png" alt="02-Filter过滤器的执行流程.png"></p><p>比如需要登录我这个网站，才能访问我的 web 资源，而如果每个 web 资源都需要进行登录判断的话，那干脆将这一层提取出来放到 Filter 中来实现是否登录判断</p><h3 id="Filter-快速入门"><a href="#Filter-快速入门" class="headerlink" title="Filter 快速入门"></a>Filter 快速入门</h3><ol><li>定义类，实现 Filter 接口，并重写其所有方法</li><li>配置 Filter 拦截资源的路径：在类上定义 <code>@WebFilter</code> 注解</li><li>在 doFilter 方法中输出一句话，并放行</li></ol><p>PS:</p><ol><li>和 Servlet 的开发非常相似</li><li> Filter 是 web 的三大组件之一，项目结构中一般将其放在 web 文件夹下 </li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web.filter;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@WebFilter("/*")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>{  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>{  </span><br><span class="line">        System.out.println(<span class="string">"FilterDemo..."</span>);  </span><br><span class="line">        <span class="comment">//放行  </span></span><br><span class="line">        chain.doFilter(request,response);  </span><br><span class="line">    }  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>{  </span><br><span class="line">  </span><br><span class="line">    }  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>{  </span><br><span class="line">  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注：<code>@WebFilter("/*")</code> 表示拦截所有资源</p><p>这里容易出现导错包的问题，如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web.filter;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//import java.util.logging.Filter; //错误的包</span></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>{  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Filter-执行流程"><a href="#Filter-执行流程" class="headerlink" title="Filter 执行流程"></a>Filter 执行流程</h3><p><img data-src="https://s2.loli.net/2022/12/12/YN6UJgCF2j8pE4Q.png" alt="02-Filter过滤器的执行流程.png"></p><ol><li>放行后访问对象资源，资源访问完成后，还会回到 Filter 中吗？会</li><li>如果回到 Filter 中，是重新执行还是执行放行后的逻辑呢？放行后的逻辑</li></ol><p>执行放行前逻辑 ⇒ 放行 ⇒ 访问资源 ⇒ 执行放行后逻辑</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>{  </span><br><span class="line">    <span class="comment">//放行前逻辑；对request数据进行处理，response中还没有数据  </span></span><br><span class="line">    System.out.println(<span class="string">"FilterDemo..."</span>);  </span><br><span class="line">    <span class="comment">//放行  </span></span><br><span class="line">    chain.doFilter(request,response);<span class="comment">//访问到资源，response中有数据了  </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//放行后逻辑：对response数据进行处理  </span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Filter-使用细节"><a href="#Filter-使用细节" class="headerlink" title="Filter 使用细节"></a>Filter 使用细节</h3><h4 id="Filter-拦截路径配置"><a href="#Filter-拦截路径配置" class="headerlink" title="Filter 拦截路径配置"></a>Filter 拦截路径配置</h4><ul><li>拦截具体的资源：<code>/index.jsp</code>：只有访问 <code>index.jps</code> 时才会被拦截</li><li>目录拦截：<code>/user/*</code></li><li>后缀名拦截：<code>/*.jsp</code></li><li>拦截所有：<code>/*</code></li></ul><h4 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h4><p>一个 Web 应用，可以配置多个过滤器，这多个过滤器称为过滤器链</p><p><img data-src="https://s2.loli.net/2022/12/12/BVoGaSzYcsTndkZ.png" alt="03-Filter过滤器链.png"></p><p>注解配置的 Filter，优先级按照过滤器类名（字符串）的自然排序。比如 FilterDemo1 就排在 FilterDemo2 的前面</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;什么是-Filter&quot;&gt;&lt;a href=&quot;#什么是-Filter&quot; class=&quot;headerlink&quot; title=&quot;什么是 Filter&quot;&gt;&lt;/a&gt;什么是 Filter&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Filter 表示过滤器，是 JavaWeb 三大组件 (Servlet、Filter、Listener) 之一&lt;/li&gt;
&lt;li&gt;过滤器可以把对资源的请求拦截下来，从而实现一些特殊的功能&lt;/li&gt;
&lt;li&gt;过滤器一般完成一些通用的操作，比如：权限控制、统一编码处理、敏感字符处理等&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="JavaWeb" scheme="https://coffeelize.top/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>Intellij 创建 Servlet 模板</title>
    <link href="https://coffeelize.top/posts/5f8f3d0b.html"/>
    <id>https://coffeelize.top/posts/5f8f3d0b.html</id>
    <published>2022-12-05T08:37:38.000Z</published>
    <updated>2022-12-05T09:51:56.725Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="IDEA-创建-Servlet-模板"><a href="#IDEA-创建-Servlet-模板" class="headerlink" title="IDEA 创建 Servlet 模板"></a>IDEA 创建 Servlet 模板</h3><p>使用通用方式获取请求参数后，屏蔽了 GET 和 POST 的请求方式代码的不同，则代码可以定义为如下格式：</p><span id="more"></span><p><img data-src="https://s2.loli.net/2022/12/05/1uHOfFrKtb4cXpS.png" alt="01-Get和Post请求的通用方式.png"></p><p>那么，可以使用 Servlet 模板创建来 Servlet 更高效，设置如下</p><p><img data-src="https://s2.loli.net/2022/12/05/Ed1BSvMNxkbTuwK.png" alt="02-Servlet模板设置页面.png"></p><p>Servlet Annotated Class 模板如下</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">if</span> (${PACKAGE_NAME} &amp;&amp; ${PACKAGE_NAME} != <span class="string">""</span>)<span class="keyword">package</span> ${PACKAGE_NAME};#end  </span><br><span class="line">#parse(<span class="string">"File Header.java"</span>)  </span><br><span class="line">  </span><br><span class="line">#<span class="keyword">if</span> ($JAVAEE_TYPE == <span class="string">"jakarta"</span>)  </span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;  </span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.*;  </span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.*;  </span><br><span class="line">#<span class="keyword">else</span>  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;  </span><br><span class="line">#end  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@WebServlet("/${Entity_Name}")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $</span>{Class_Name} extends HttpServlet {  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">        <span class="keyword">this</span>.doGet(request,response);  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>下次新建 Servlet 时，就会通过设置好的模板来创建，为我们减少重复的操作<br><img data-src="https://s2.loli.net/2022/12/05/MkWiKY4wlNTcSnu.png" alt="03-通过Servlet模板来创建Servlet.png"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@WebServlet("/ServletDemo1")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">        <span class="keyword">this</span>.doGet(request, response);  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>使用这项操作前，请确保 pom.xml 中已经导入了 servlet 的依赖。因为模板中存在 <code>@WebServlet</code> 注解，没有 servlet 依赖的话 IDEA 可不认识这个注解，新建的 Servlet 就不会应用模板</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--servlet--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;IDEA-创建-Servlet-模板&quot;&gt;&lt;a href=&quot;#IDEA-创建-Servlet-模板&quot; class=&quot;headerlink&quot; title=&quot;IDEA 创建 Servlet 模板&quot;&gt;&lt;/a&gt;IDEA 创建 Servlet 模板&lt;/h3&gt;&lt;p&gt;使用通用方式获取请求参数后，屏蔽了 GET 和 POST 的请求方式代码的不同，则代码可以定义为如下格式：&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://coffeelize.top/tags/Java/"/>
    
    <category term="Intellij" scheme="https://coffeelize.top/tags/Intellij/"/>
    
    <category term="Servlet" scheme="https://coffeelize.top/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 常见问题汇总</title>
    <link href="https://coffeelize.top/posts/207efebe.html"/>
    <id>https://coffeelize.top/posts/207efebe.html</id>
    <published>2022-12-05T08:23:12.000Z</published>
    <updated>2022-12-05T09:52:03.674Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="新建菜单中，没有-servlet-选项"><a href="#新建菜单中，没有-servlet-选项" class="headerlink" title="新建菜单中，没有 servlet 选项"></a>新建菜单中，没有 servlet 选项</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><span id="more"></span><p><img data-src="https://s2.loli.net/2022/12/05/W5zcDJ8hX49AENa.png" alt="01-右键菜单没有Servlet选项.png"></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li>通过 Maven 导入 servlet 依赖</li><li>然后在项目中的文件夹，右键，就有新建 servlet 的选项了</li></ol><p><img data-src="https://s2.loli.net/2022/12/05/EDZo2gVNCOKQFat.png" alt="02-右键菜单中有Servlet选项.png"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/Howard_Roark/article/details/107046920">IDEA 右键新建 new 没有 servlet 选项的问题_破的軍的博客 - CSDN 博客_ideanew 不了 servlet</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;新建菜单中，没有-servlet-选项&quot;&gt;&lt;a href=&quot;#新建菜单中，没有-servlet-选项&quot; class=&quot;headerlink&quot; title=&quot;新建菜单中，没有 servlet 选项&quot;&gt;&lt;/a&gt;新建菜单中，没有 servlet 选项&lt;/h2&gt;&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;</summary>
    
    
    
    
    <category term="JavaWeb" scheme="https://coffeelize.top/tags/JavaWeb/"/>
    
    <category term="Interllij" scheme="https://coffeelize.top/tags/Interllij/"/>
    
    <category term="Navigation" scheme="https://coffeelize.top/tags/Navigation/"/>
    
  </entry>
  
  <entry>
    <title>IDEA 更新 Maven 坐标</title>
    <link href="https://coffeelize.top/posts/a2a6b1a5.html"/>
    <id>https://coffeelize.top/posts/a2a6b1a5.html</id>
    <published>2022-12-05T06:48:20.000Z</published>
    <updated>2022-12-12T14:06:16.742Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>IntelliJ IDEA 自动载入 Maven 依赖的功能很好用，但有时候会碰到问题，导致 pom.xml 文件修改却没有触发自动重新载入的动作，此时需要手动强制更新依赖。</p><span id="more"></span><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案 1"></a>解决方案 1</h3><p>点击右侧的 Maven，在弹出的窗口中点击 <code>重新加载所有的Maven项目</code><br><img data-src="https://s2.loli.net/2022/12/12/DKy3H9jbxutXm7v.png" alt="01-Maven侧边栏刷新.png"></p><p>或者：</p><ol><li>右键单击项目</li><li>在弹出的菜单中选择 Maven ⇒ <code>重新加载项目</code><br><img data-src="https://s2.loli.net/2022/12/12/b5nQwLC3S1DyAqN.png" alt="02-Maven重新加载项目.png"></li></ol><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案 2"></a>解决方案 2</h3><p>设置 Maven 的刷新方法为自动</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="http://www.bjpowernode.com/hot/2509.html">IDEA 更新 Maven 包的两种方法 - 动力节点</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;IntelliJ IDEA 自动载入 Maven 依赖的功能很好用，但有时候会碰到问题，导致 pom.xml 文件修改却没有触发自动重新载入的动作，此时需要手动强制更新依赖。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Intellij" scheme="https://coffeelize.top/tags/Intellij/"/>
    
    <category term="Maven" scheme="https://coffeelize.top/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>通过 Maven 骨架创建 Maven Web 项目时报错</title>
    <link href="https://coffeelize.top/posts/11af4f01.html"/>
    <id>https://coffeelize.top/posts/11af4f01.html</id>
    <published>2022-12-05T04:29:30.000Z</published>
    <updated>2022-12-05T09:47:38.607Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>通过 Maven Archetype 创建 Maven Web 项目时，发生报错，报错的详细信息如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Could not transfer metadata org.apache.maven.plugins:maven-archetype-plugin/maven-metadata.xml from/to central (https://repo.maven.apache.org/maven2): transfer failed for https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-archetype-plugin/maven-metadata.xml</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>在设置 ⇒ 找到图片中所在的位置 ⇒ 如图所示添加如下代码 </li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Dmaven.wagon.http.ssl.ignore.validity.dates=true</span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://s2.loli.net/2022/12/05/4dgxHjiSXa62GDt.png" alt="01-设置Maven运行程序-VM选项.png"></p><ol start="2"><li>文件⇒新建项目设置⇒新项目的设置</li></ol><p>进入到设置后，与第 1 步进行相同的操作</p><p><img data-src="https://s2.loli.net/2022/12/05/zyviTukXYeBOW1f.png" alt="02-Intellij新建项目设置.png"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/weixin_51735258/article/details/124240026">解决 Could not transfer metadata org.apache.maven.plugins:maven-archetype-plugin/.._报错 404 的博客 - CSDN 博客_could not transfer</a></li><li><a href="https://blog.csdn.net/hacknetY/article/details/117375772?spm=1001.2101.3001.6650.4&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-4-117375772-blog-124240026.pc_relevant_multi_platform_whitelistv3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-4-117375772-blog-124240026.pc_relevant_multi_platform_whitelistv3&amp;utm_relevant_index=7">解决 Could not transfer metadata org.apache.maven.plugins:maven_hacknetY 的博客 - CSDN 博客_could not transfer</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;通过 Maven Archetype 创建 Maven Web 项目时，发生报错，报错的详细信息如下&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Could not transfer metadata org.apache.maven.plugins:maven-archetype-plugin/maven-metadata.xml from/to central (https://repo.maven.apache.org/maven2): transfer failed for https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-archetype-plugin/maven-metadata.xml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="Intellij" scheme="https://coffeelize.top/tags/Intellij/"/>
    
    <category term="Maven" scheme="https://coffeelize.top/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 常用配置及依赖</title>
    <link href="https://coffeelize.top/posts/5a58d3ae.html"/>
    <id>https://coffeelize.top/posts/5a58d3ae.html</id>
    <published>2022-12-04T12:25:30.000Z</published>
    <updated>2022-12-07T08:15:23.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h3><p>使用说明</p><ol><li>注意修改别名</li><li>注意修改数据库信息中的 URL</li><li> 注意驱动对应的 MySQL 版本为 8</li><li> 注意修改 SQL 的映射文件名</li><li>文件存放在 resource 资源文件夹下 </li></ol><span id="more"></span><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"https://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--起别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.itheima.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--数据库的连接信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///db1?useSSL=false<span class="symbol">&amp;amp;</span>useServerPrepStmts=true"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"wwww"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--包扫描--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.itheima.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="UserMapper-xml"><a href="#UserMapper-xml" class="headerlink" title="UserMapper.xml"></a>UserMapper.xml</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"https://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    namespace：名称空间，需要链接到UserMapper接口</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itheima.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--以下开始填写SQL语句--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"Brand"</span>&gt;</span></span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="logback-xml"><a href="#logback-xml" class="headerlink" title="logback.xml"></a>logback.xml</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        CONSOLE ：表示当前的日志信息是可以输出到控制台的。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%level] %blue(%d{HH:mm:ss.SSS}) %cyan([%thread]) %boldGreen(%logger{15}) - %msg %n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.itheima"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF</span></span><br><span class="line"><span class="comment">     ， 默认debug</span></span><br><span class="line"><span class="comment">      &lt;root&gt;可以包含零个或多个&lt;appender-ref&gt;元素，标识这个输出位置将会被本日志级别控制。</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="常用依赖"><a href="#常用依赖" class="headerlink" title="常用依赖"></a>常用依赖</h3><p>使用说明</p><ol><li>内容添加到 pom.xml 文件中 </li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加载mysql驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--junit单元测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加slf4j日志api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加logback-classic依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加logback-core依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--防止运行Tomcat报错--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">maven.compiler.encoding</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>14<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>14<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>14<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Tomcat的插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;port&gt;80&lt;/port&gt;--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;path&gt;/&lt;/path&gt;--&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--JSP--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--JSTL标签--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>使用 JSTL 标签时，需要在 jsp 文件中引入 JSTL 标签库</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;  </span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;  </span><br></pre></td></tr></tbody></table></figure><h3 id="SqlSessionFactoryUtil-java"><a href="#SqlSessionFactoryUtil-java" class="headerlink" title="SqlSessionFactoryUtil.java"></a>SqlSessionFactoryUtil.java</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.util;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;  </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;  </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionFactoryUtils</span> </span>{  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> {  </span><br><span class="line">        <span class="comment">//静态代码块会随着类的加载而自动执行，且只执行一次  </span></span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> {  </span><br><span class="line">            String resource = <span class="string">"mybatis-config.xml"</span>;  </span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);  </span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);  </span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span></span>{  </span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory;  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;mybatis-config-xml&quot;&gt;&lt;a href=&quot;#mybatis-config-xml&quot; class=&quot;headerlink&quot; title=&quot;mybatis-config.xml&quot;&gt;&lt;/a&gt;mybatis-config.xml&lt;/h3&gt;&lt;p&gt;使用说明&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;注意修改别名&lt;/li&gt;
&lt;li&gt;注意修改数据库信息中的 URL&lt;/li&gt;
&lt;li&gt; 注意驱动对应的 MySQL 版本为 8&lt;/li&gt;
&lt;li&gt; 注意修改 SQL 的映射文件名&lt;/li&gt;
&lt;li&gt;文件存放在 resource 资源文件夹下 &lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://coffeelize.top/tags/Java/"/>
    
    <category term="JavaWeb" scheme="https://coffeelize.top/tags/JavaWeb/"/>
    
    <category term="MySQL" scheme="https://coffeelize.top/tags/MySQL/"/>
    
    <category term="MyBatis" scheme="https://coffeelize.top/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat 启动服务报错</title>
    <link href="https://coffeelize.top/posts/3c9f696f.html"/>
    <id>https://coffeelize.top/posts/3c9f696f.html</id>
    <published>2022-12-04T02:52:52.000Z</published>
    <updated>2022-12-05T09:47:38.607Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h3><p>创建 Web 项目，学习 Servlet 的过程中，通过 Tomcat 启动这个项目，提示报错：<code>不再支持源选项 5。请使用 7 或更高版本</code></p><p><img data-src="https://s2.loli.net/2022/12/05/XQVRS1hTcyzp7AE.png" alt="01-Intellij启动Tomcat报错.png"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><code>pom.xml</code> 文件中增加 maven 编译的 <code>java.version</code>&nbsp;jdk 版本设置，以及 <code>maven.compiler.source</code>&nbsp;资源编译 jdk 版本设置和 <code>maven.compiler.target</code>&nbsp;资源构建 jdk 版本设置</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">maven.compiler.encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>14<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>14<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>14<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/moshowgame/article/details/81369327">maven 报错：不再支持源选项 5。请使用 6 或更高版本。_Moshow 郑锴的博客 - CSDN 博客</a></li></ol>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="Tomcat" scheme="https://coffeelize.top/tags/Tomcat/"/>
    
    <category term="Servlet" scheme="https://coffeelize.top/tags/Servlet/"/>
    
    <category term="intelliJ" scheme="https://coffeelize.top/tags/intelliJ/"/>
    
  </entry>
  
  <entry>
    <title>Java-Servlet</title>
    <link href="https://coffeelize.top/posts/6b8afe16.html"/>
    <id>https://coffeelize.top/posts/6b8afe16.html</id>
    <published>2022-12-04T02:21:30.000Z</published>
    <updated>2022-12-17T03:22:37.342Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="Servlet-简介"><a href="#Servlet-简介" class="headerlink" title="Servlet 简介"></a>Servlet 简介</h3><p>Servlet 是 Java 提供的一门动态 web 资源开发技术</p><span id="more"></span><p><img data-src="https://s2.loli.net/2022/12/17/6VbzvcT3BZtsx17.png" alt="01-Servelet功能示意图.png"></p><p>Servlet 是 JavaEE 规范之一，其实就是一个 <strong>接口</strong>，将来我们需要定义 Servlet 类实现 Servlet 接口，并在 web 服务器运行 Servlet。Servlet 接口 API 文档中的五个方法，实现这个接口的话需要实现这五个方法</p><p><img data-src="https://s2.loli.net/2022/12/17/WezZCuthJBvk1y3.png" alt="02-Servlet需要重写的5个方法.png"></p><h3 id="Servlet-入门案例"><a href="#Servlet-入门案例" class="headerlink" title="Servlet 入门案例"></a>Servlet 入门案例</h3><ol><li>创建 Web 项目，导入 Servlet 依赖坐标</li></ol><p>在 <code>pom.xml</code> 文件中，插入如下代码</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>注意：需要加上 scope，设置为 <code>provided</code></p><ol start="2"><li>创建：定义一个类，实现 Servlet 接口，并重写接口中的所有方法，并在 service 方法中输入一句话</li></ol><p>根据提示（Alt+Enter），重写类中的五个方法，这里我们重点关注 service 方法；因为 serlvet 在被访问的时候，service 方法被自动执行。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">    System.out.println(<span class="string">"servlet hello world"</span>);  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>配置：在类上使用 <code>@WebServlet</code> 注解，配置该 Servlet 的访问路径 </li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet("/demo1")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo1</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>访问：启动 Tomcat，浏览器输入 URL 访问该 Servlet</li></ol><h3 id="Servlet-的执行流程"><a href="#Servlet-的执行流程" class="headerlink" title="Servlet 的执行流程"></a>Servlet 的执行流程</h3><p>我们并没有创建 Servlet 对象，也没有调用 service 方法，那么程序是如何执行的呢？<br>Servlet 对象是由服务器 Tomcat 创建的，并且 service 方法也是 Tomcat 调用的</p><p><img data-src="https://s2.loli.net/2022/12/17/EPN7DVMqtAIcgkB.png" alt="03-Servlet的执行流程.png"></p><p>服务器怎么知道 Servlet 中一定有 service 方法呢？<br>因为实现 Sevlet 接口必须复写其方法，而 Servlet 接口中有 service 方法</p><h3 id="Sevlet-生命周期"><a href="#Sevlet-生命周期" class="headerlink" title="Sevlet 生命周期"></a>Sevlet 生命周期</h3><p>那 Tomcat 什么时候给我们创建的 servlet 对象呢？</p><p>Servlet 运行在 Servlet 容器（Web 服务器）中，其生命周期由容器来管理，分为四个阶段</p><ol><li>加载和实例化：默认情况下，当 Servlet 第一次被访问时，由容器创建 Servlet 对象</li><li>初始化：在 Servlet 实例化之后，容器将调用 Servlet 的 init () 方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。<strong>该方法只调用一次</strong></li><li>请求处理：每次请求 Servlet 时，Servlet 容器都会调用 Servlet 的 service () 方法对请求进行处理</li><li>服务终止：当需要释放内存或者容器关闭时，容器就会调用 Servlet 实例的 destroy () 方法完成资源的释放。在 destroy () 方法调用之后，容器会释放这个 Servlet 实例，该实例随后会被 Java 的垃圾收集器所回收</li></ol><h4 id="初始化方法"><a href="#初始化方法" class="headerlink" title="初始化方法"></a>初始化方法</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化方法  </span></span><br><span class="line"><span class="comment">//1.调用时机：默认情况下，servlet被第一次访问时调用  </span></span><br><span class="line"><span class="comment">//2.调用次数：1次  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>{  </span><br><span class="line">    System.out.println(<span class="string">"服务器正在初始化"</span>);  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注：也可以通过配置手动改变 Servlet 的创建时机</p><ul><li>负整数：第一次被访问时创建 Servlet 对象；默认值是 -1</li><li>0 或正整数：服务器启动时创建 Servlet 对象，数字越小优先级越高；创建的时机提前了 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = "/demo",loadOnStartup = 1)</span></span><br></pre></td></tr></tbody></table></figure><h4 id="服务方法"><a href="#服务方法" class="headerlink" title="服务方法"></a>服务方法</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.调用时机：每一次servlet被访问时调用  </span></span><br><span class="line"><span class="comment">//2.调用次数：每一次  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">    System.out.println(<span class="string">"服务器正在服务中"</span>);  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="销毁方法"><a href="#销毁方法" class="headerlink" title="销毁方法"></a>销毁方法</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.调用时机：内存释放或服务器关闭，servlet对象被销毁  </span></span><br><span class="line"><span class="comment">//2.调用次数：1次  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>{  </span><br><span class="line">    System.out.println(<span class="string">"服务器已被关闭"</span>);  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Servlet-体系结构"><a href="#Servlet-体系结构" class="headerlink" title="Servlet 体系结构"></a>Servlet 体系结构</h3><p>我们常用的就是 service 方法，其他四个方法都用的少，但是每次都还是得去实现它们，如何才能更简化一些呢？</p><p><img data-src="https://s2.loli.net/2022/12/17/BzYQNefaHXscwFT.png" alt="04-HttpServlet.png"></p><p>我们将来开发 B/S 架构的 Web 项目，都是针对 HTTP 协议，所以我们自定义 Servlet，直接继承 HttpServlet 即可（用于简化开发）⇒ 复写 HttpServlet 中的方法即可（doPost 方法和 doGet 方法）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet("/demo4")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo4</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">        System.out.println(<span class="string">"get..."</span>);  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">        System.out.println(<span class="string">"post..."</span>);  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在项目的 webapp 文件夹下新建一个 html 页面，用表单来模拟 post 请求</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/web-demo/demo4"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>注意：form 标签中，action 属性值为虚拟目录的路径</p><p>HttpServlet 中为什么要根据请求方式的不同，调用不同的方法呢？</p><p>实现 Servlet 接口，重写那五个方法，并且在 service 方法中用来处理逻辑（获取请求参数信息），但是不同的请求方式，请求参数所在的位置不同，post 请求请求参数在请求体中，而 get 请求请求方式在请求行中。因此，应该写不同的处理逻辑代码，根据请求方式的不同进行分别的处理 ⇒ 因此，出现了 HttpServlet</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Servlet-简介&quot;&gt;&lt;a href=&quot;#Servlet-简介&quot; class=&quot;headerlink&quot; title=&quot;Servlet 简介&quot;&gt;&lt;/a&gt;Servlet 简介&lt;/h3&gt;&lt;p&gt;Servlet 是 Java 提供的一门动态 web 资源开发技术&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://coffeelize.top/tags/Java/"/>
    
    <category term="servlet" scheme="https://coffeelize.top/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>Intellij 关联 MySQL 数据库</title>
    <link href="https://coffeelize.top/posts/db1d2eb3.html"/>
    <id>https://coffeelize.top/posts/db1d2eb3.html</id>
    <published>2022-12-02T13:57:57.000Z</published>
    <updated>2022-12-03T15:32:49.173Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="关联数据库"><a href="#关联数据库" class="headerlink" title="关联数据库"></a>关联数据库</h3><ol><li>如下图所示，点击右侧的数据库，然后弹出面板，点击新建，选择 MySQL 数据库</li></ol><span id="more"></span><p><img data-src="https://s2.loli.net/2022/12/03/jMTZxbPGvpB3JcF.png" alt="01-打开数据库连接面板.png"></p><ol start="2"><li>然后就是对数据库的信息配置一下，下载好驱动，测试连接，Nice，连接成功</li></ol><p><img data-src="https://s2.loli.net/2022/12/03/jxuc4J3i9a6RQz2.png" alt="02-配置数据库信息.png"></p><ol start="3"><li>之后，就可以直接在 IDEA 中直接查看数据库中的内容了</li></ol><p><img data-src="https://s2.loli.net/2022/12/03/RLpXJjCWSyrUBlK.png" alt="03-下载数据库连接驱动.png"></p><h3 id="容易出现的问题"><a href="#容易出现的问题" class="headerlink" title="容易出现的问题"></a>容易出现的问题</h3><p>比如在运行 MaBatis 项目，昨天运行还能正常运行，重启电脑后再次运行就出现了如下的报错信息，搜索一下，已有解决方案：<a href="https://blog.csdn.net/u013360850/article/details/80373604">MySQL 8.0 Public Key Retrieval is not allowed 错误的解决方法_呜呜呜啦啦啦的博客 - CSDN 博客</a></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Public Key Retrieval is not allowed</span><br></pre></td></tr></tbody></table></figure><p>解决方案：刷新一下数据库再运行项目即可<br><img data-src="https://s2.loli.net/2022/12/03/QbTDVoNxvytRU3a.png" alt="04-刷新数据库.png"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/u013360850/article/details/80373604">MySQL 8.0 Public Key Retrieval is not allowed 错误的解决方法_呜呜呜啦啦啦的博客 - CSDN 博客</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;关联数据库&quot;&gt;&lt;a href=&quot;#关联数据库&quot; class=&quot;headerlink&quot; title=&quot;关联数据库&quot;&gt;&lt;/a&gt;关联数据库&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;如下图所示，点击右侧的数据库，然后弹出面板，点击新建，选择 MySQL 数据库&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://coffeelize.top/tags/Java/"/>
    
    <category term="Intellij" scheme="https://coffeelize.top/tags/Intellij/"/>
    
    <category term="MySQL" scheme="https://coffeelize.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>XML 文件中编写 SQL 语句 IDEA 补全提示</title>
    <link href="https://coffeelize.top/posts/54072de9.html"/>
    <id>https://coffeelize.top/posts/54072de9.html</id>
    <published>2022-12-02T12:20:02.000Z</published>
    <updated>2022-12-11T13:38:28.405Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在 BrandMapper.xml 的 select 标签中编写 SQL 语句时，IDEA 没有给出补全提示，而老师的是有的。</p><span id="more"></span><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="1、设置-SQL-方言"><a href="#1、设置-SQL-方言" class="headerlink" title="1、设置 SQL 方言"></a>1、设置 SQL 方言</h4><p>进行如下图的设置（难怪在编写 SQL 的时候，有时候 IDEA 会提示我没有配置数据库方言，我在琢磨这是啥意思呢，原来作用在这儿呀）<br><img data-src="https://s2.loli.net/2022/12/11/YP8ZtLGMN64KgE9.png" alt="01-设置SQL方言.png"></p><h4 id="2、注入-SQL-语言"><a href="#2、注入-SQL-语言" class="headerlink" title="2、注入 SQL 语言"></a>2、注入 SQL 语言</h4><p>在 XML 文件中，在需要编写 SQL 语句的标签中（比如 select、update 等标签），使用快捷键 <code>Alt+Enter</code>，然后点击注入语言或引用，选择 SQL，然后在这个 select 标签中 IDEA 就会给出 SQL 的补全提示了<br><img data-src="https://s2.loli.net/2022/12/11/e3VxNjtJkaQ4Wqn.png" alt="02-注入SQL语言.png"></p><h4 id="3、进一步设置"><a href="#3、进一步设置" class="headerlink" title="3、进一步设置"></a>3、进一步设置</h4><p>按照上面两步设置好之后，会遇到以下问题：当换一个标签，比如在 update 标签中编写 SQL 语句时，IDEA 又不能够提示补全了。此时按照如下设置（注：此处也可参考本文的参考资料 3）</p><p>1、Alt+Enter ⇒ 语言注入设置<br><img data-src="https://s2.loli.net/2022/12/11/U61LD9BA423wXzK.png" alt="03-语言注入设置-1.png"></p><p>2、然后复制 <code>sql|select|insert|update|delete</code> 到下图中的本地名称，点击确认即可。</p><p>注：上面的那个 <code>名称</code> 不需要自己修改，会自动更跟下面的 <code>本地名称</code> 中的值保持一致。这样，其他标签中也会弹出 SQL 的提示了<br><img data-src="https://s2.loli.net/2022/12/11/uLfkOxbmrhKjyJ6.png" alt="04-语言注入设置-2.png"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/qq_40417295/article/details/123032742">idea 中编写 sql 语句时不提示补全内容解决办法_拿敌敌畏就数你的博客 - CSDN 博客_idea 写 sql 无提示</a></li><li><a href="https://blog.csdn.net/qq_40406929/article/details/105965398">idea sql 自动补全、自动提示设置_@司马懿的博客 - CSDN 博客_idea 去除 sql 自动规则化</a></li><li><a href="https://blog.csdn.net/daban2008/article/details/127334753?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-2-127334753-blog-123032742.pc_relevant_recovery_v2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-2-127334753-blog-123032742.pc_relevant_recovery_v2&amp;utm_relevant_index=5">idea 在用 Mybatis 时，xml 文件 sql 不提示，提示后背景颜色去除_daban2008 的博客 - CSDN 博客</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;在 BrandMapper.xml 的 select 标签中编写 SQL 语句时，IDEA 没有给出补全提示，而老师的是有的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Intellij" scheme="https://coffeelize.top/tags/Intellij/"/>
    
    <category term="MySQL" scheme="https://coffeelize.top/tags/MySQL/"/>
    
  </entry>
  
</feed>
