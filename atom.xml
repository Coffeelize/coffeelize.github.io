<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>智朋的个人博客</title>
  <icon>https://coffeelize.top/images/cat-avatar.jpg</icon>
  <subtitle>道阻且长，行则将至</subtitle>
  <link href="https://coffeelize.top/atom.xml" rel="self"/>
  
  <link href="https://coffeelize.top/"/>
  <updated>2022-12-07T10:56:18.600Z</updated>
  <id>https://coffeelize.top/</id>
  
  <author>
    <name>coffeelize</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Axios 异步框架简明笔记</title>
    <link href="https://coffeelize.top/posts/2fb0fb99.html"/>
    <id>https://coffeelize.top/posts/2fb0fb99.html</id>
    <published>2022-12-07T08:35:44.000Z</published>
    <updated>2022-12-07T10:56:18.600Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="Axios-异步框架简介"><a href="#Axios-异步框架简介" class="headerlink" title="Axios 异步框架简介"></a>Axios 异步框架简介</h3><p>Axios 对原生的 AJAX 进行封装，简化书写</p><h3 id="Axios-快速入门"><a href="#Axios-快速入门" class="headerlink" title="Axios 快速入门"></a>Axios 快速入门</h3><ol><li>引入 axios 的 js 文件</li><li>使用 axios 发送请求，并获取相应结果<span id="more"></span>详细步骤如下</li></ol><p>一、在 webapp 下新建 js 文件夹，拷贝 axios 的 js 文件<br>二、新建 html 文件，引入 js 文件</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/axios-0.18.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>三、创建 AxiosServlet</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AxiosServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">        System.out.println(<span class="string">"get..."</span>);  </span><br><span class="line">        <span class="comment">//1.接收请求参数  </span></span><br><span class="line">        String username = request.getParameter(<span class="string">"username"</span>);  </span><br><span class="line">        System.out.println(username);  </span><br><span class="line">        <span class="comment">//2.响应数据  </span></span><br><span class="line">        response.getWriter().write(<span class="string">"hello Axios"</span>);  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">        System.out.println(<span class="string">"post..."</span>);  </span><br><span class="line">        <span class="keyword">this</span>.doGet(request, response);  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>四、在 html 中编写 js 代码</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/axios-0.18.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//1.get</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">/* axios({</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       method:"get",</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       url:"http://localhost:8080/ajax-dmeo/axiosServlet?username=zhangsan"</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     }).then(function (resp){</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         alert(resp.data);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     })*/</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//2.post</span></span></span><br><span class="line"><span class="javascript">    axios({</span></span><br><span class="line"><span class="javascript">        <span class="attr">method</span>: <span class="string">"get"</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">url</span>: <span class="string">"http://localhost:8080/ajax-dmeo/axiosServlet"</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//data是请求参数</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: <span class="string">"username=zhangsan"</span></span></span><br><span class="line"><span class="javascript">    }).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>) </span>{</span></span><br><span class="line"><span class="javascript">        alert(resp.data);</span></span><br><span class="line"><span class="javascript">    })</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>代码说明及注意事项</p><ol><li>axios 大括号中的为 Java 中的对象</li><li><code>.then()</code> 方法是一个回调函数，如果响应接收到了的话就自动执行</li><li><code>data: "username=zhangsan"</code>，data 是请求参数。这里可以传 JSON 格式的数据。除此之外，还可以传 JS 对象类型的数据（JSON 数据格式可以和 Java 中的对象数据格式通过某些方式进行转换），因为 Axios 框架会自动将这个 JS 对象转为 JSON 的数据格式</li><li> Get 和 Post 两种方式传递参数的方式不一样，所以在 axios 方法中传入的对象（大括号包裹的内容）的方式不一样，一个写在 URL 中，一个写在 Data 属性中</li><li><code>.then()</code> 回调函数中，function 函数中的参数名可以不为 resp，随便一个都行，保持下面对象（resp.data）和这个参数名（resp）一致即可</li><li><code>resp.data</code> 即服务器端的 Servlet 响应过来的数据 </li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">flowchart&nbsp;RL</span><br><span class="line">    b1--&gt;|"username = &amp;quot;zhangsan&amp;quot;"|servlet1</span><br><span class="line">    servlet1--&gt;|data|b1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;subgraph&nbsp;Browsers  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;b1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;b2</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;end  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;subgraph&nbsp;servers  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;servlet1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;servlet2</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;end</span><br></pre></td></tr></tbody></table></figure><p>简单来说，Axios 实现的功能就是：通过 get 或 post 给 Servlet 传递一个参数（username=“zhangsan”），然后 Servlet 接收到这个参数，就可以进行判断的操作，根据判断的结果在给浏览器发送一个响应。浏览器收到响应数据（date）之后，就可以做出一些操作，比如弹出窗口操作。</p><h3 id="Axios-请求方式别名"><a href="#Axios-请求方式别名" class="headerlink" title="Axios 请求方式别名"></a>Axios 请求方式别名</h3><p>为了方便起见，Axios 已经为所有支持的请求方法提供了别名</p><p>发送 Get 请求</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. Get方式  </span></span><br><span class="line">axios.get(<span class="string">"http://localhost:8080/ajax-dmeo/axiosServlet?username=zhangsan"</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>)</span>{  </span><br><span class="line">    alert(resp.data);  </span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>发送 Post 请求</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">"http://localhost:8080/ajax-dmeo/axiosServlet?username=zhangsan"</span>,<span class="string">"username=zhangsan"</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>)</span>{  </span><br><span class="line">    alert(resp.data);  </span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>原生的 Axios 书写方式 VS 别名的简化书写方式</p><ul><li>原生的书写格式：阅读性较好</li><li>别名的方式：代码量少，基本上只需要填写必要的参数信息</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Axios-异步框架简介&quot;&gt;&lt;a href=&quot;#Axios-异步框架简介&quot; class=&quot;headerlink&quot; title=&quot;Axios 异步框架简介&quot;&gt;&lt;/a&gt;Axios 异步框架简介&lt;/h3&gt;&lt;p&gt;Axios 对原生的 AJAX 进行封装，简化书写&lt;/p&gt;
&lt;h3 id=&quot;Axios-快速入门&quot;&gt;&lt;a href=&quot;#Axios-快速入门&quot; class=&quot;headerlink&quot; title=&quot;Axios 快速入门&quot;&gt;&lt;/a&gt;Axios 快速入门&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;引入 axios 的 js 文件&lt;/li&gt;
&lt;li&gt;使用 axios 发送请求，并获取相应结果</summary>
    
    
    
    
    <category term="AJAX" scheme="https://coffeelize.top/tags/AJAX/"/>
    
    <category term="Front End" scheme="https://coffeelize.top/tags/Front-End/"/>
    
    <category term="Java" scheme="https://coffeelize.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Mermaid 简明教程</title>
    <link href="https://coffeelize.top/posts/89543310.html"/>
    <id>https://coffeelize.top/posts/89543310.html</id>
    <published>2022-12-07T00:40:20.000Z</published>
    <updated>2022-12-07T08:54:14.665Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li>Mermaid 官方文档：<a href="https://mermaid-js.github.io/mermaid/#/">mermaid - Markdownish syntax for generating flowcharts, sequence diagrams, class diagrams, gantt charts and git graphs.</a></li><li>Github：<a href="https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md">Mermaid 中文说明文档</a></li><li> Mermaid 在线编辑 Github：<a href="https://github.com/mermaidjs/mermaid-live-editor">mermaid-live-editor</a></li><li>VScode 插件：<a href="https://marketplace.visualstudio.com/items?itemName=bierner.markdown-mermaid">Markdown Preview Mermaid Support</a></li><li>VScode 插件：<a href="https://marketplace.visualstudio.com/items?itemName=bpruitt-goddard.mermaid-markdown-syntax-highlighting">Mermaid Markdown Syntax Highlighting</a></li></ol><h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><ol><li>个人博客：<a href="https://ghobam.com/2022/05/06/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE/">Mermaid 流程图 - Sherwood 的博客</a></li></ol><span id="more"></span><h3 id="流程图快速入门"><a href="#流程图快速入门" class="headerlink" title="流程图快速入门"></a>流程图快速入门</h3><h4 id="案例-1：常规流程图"><a href="#案例-1：常规流程图" class="headerlink" title="案例 1：常规流程图"></a>案例 1：常规流程图</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[Christmas] --&gt;|Get money| B(Go shopping)</span><br><span class="line">    B --&gt; C{Let me think}</span><br><span class="line">    C --&gt;|One| D[Laptop]</span><br><span class="line">    C --&gt;|Two| E[iPhone]</span><br><span class="line">    C --&gt;|Three| F[Car]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[Christmas] --&gt;|Get money| B(Go shopping)</span><br><span class="line">    B --&gt; C{Let me think}</span><br><span class="line">    C --&gt;|One| D[Laptop]</span><br><span class="line">    C --&gt;|Two| E[iPhone]</span><br><span class="line">    C --&gt;|Three| F[Car]</span><br></pre></td></tr></tbody></table></figure><ul><li><p>第一行：TD（Top down）自上而下；<br>除此之外，还有上 (Top) 下 (Bottom) 左 (Left) 右 (Right)，可以两两组合来确定流程图的方向</p></li><li><p>第二行：中括号表示图形中的矩形，圆括号为圆角矩形，两竖线之间的表示箭头上的文字<br>除此之外，还有各种箭头和图形样式，这里不再列举，详细请查看官方文档和 <a href="https://ghobam.com/2022/05/06/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE/">Mermaid 流程图 - Sherwood 的博客</a></p></li></ul><h4 id="案例-2：带有子图的流程图"><a href="#案例-2：带有子图的流程图" class="headerlink" title="案例 2：带有子图的流程图"></a>案例 2：带有子图的流程图</h4><p>子图的基本语法为</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subgraph title</span><br><span class="line"> graph definition</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><p>完整案例如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">flowchart&nbsp;RL</span><br><span class="line">    b1--&gt;|"username = &amp;quot;zhangsan&amp;quot;"|servlet1</span><br><span class="line">    servlet1--&gt;|data|b1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;subgraph&nbsp;Browsers  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;b1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;b2</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;end  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;subgraph&nbsp;servers  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;servlet1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;servlet2</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;end</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">flowchart&nbsp;RL</span><br><span class="line">    b1--&gt;|"username = &amp;quot;zhangsan&amp;quot;"|servlet1</span><br><span class="line">    servlet1--&gt;|data|b1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;subgraph&nbsp;Browsers  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;b1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;b2</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;end  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;subgraph&nbsp;servers  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;servlet1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;servlet2</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;end</span><br></pre></td></tr></tbody></table></figure><p>特别注意：两竖线中的内容（也就是箭头上的文字）不能包含双引号，在 Mermaid 中算是特殊符号，请查阅 <a href="https://ghobam.com/2022/05/06/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE/">Mermaid 流程图 - Sherwood 的博客</a>，需要额外进行处理。<code>&amp;quot;</code> 来表示双引号。所以，在箭头上还是尽量少用双引号吧😀</p><p>以下方式均会导致绘图出错</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b1--&gt;|1.username = '"zhangsan"'|servlet1</span><br><span class="line">b1--&gt;'|1.username = "zhangsan"|'servlet1</span><br><span class="line">b1--&gt;|'1.username = "zhangsan"'|servlet1</span><br></pre></td></tr></tbody></table></figure><p>正确的处理方式</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b1--&gt;|"username = &amp;quot;zhangsan&amp;quot;"|servlet1</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Mermaid 官方文档：&lt;a href=&quot;https://mermaid-js.github.io/mermaid/#/&quot;&gt;mermaid - Markdownish syntax for generating flowcharts, sequence diagrams, class diagrams, gantt charts and git graphs.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github：&lt;a href=&quot;https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md&quot;&gt;Mermaid 中文说明文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; Mermaid 在线编辑 Github：&lt;a href=&quot;https://github.com/mermaidjs/mermaid-live-editor&quot;&gt;mermaid-live-editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;VScode 插件：&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=bierner.markdown-mermaid&quot;&gt;Markdown Preview Mermaid Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;VScode 插件：&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=bpruitt-goddard.mermaid-markdown-syntax-highlighting&quot;&gt;Mermaid Markdown Syntax Highlighting&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;推荐阅读&quot;&gt;&lt;a href=&quot;#推荐阅读&quot; class=&quot;headerlink&quot; title=&quot;推荐阅读&quot;&gt;&lt;/a&gt;推荐阅读&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;个人博客：&lt;a href=&quot;https://ghobam.com/2022/05/06/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE/&quot;&gt;Mermaid 流程图 - Sherwood 的博客&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="绘图" scheme="https://coffeelize.top/tags/%E7%BB%98%E5%9B%BE/"/>
    
    <category term="Mermaid" scheme="https://coffeelize.top/tags/Mermaid/"/>
    
  </entry>
  
  <entry>
    <title>AJAX 简明笔记</title>
    <link href="https://coffeelize.top/posts/d92ca625.html"/>
    <id>https://coffeelize.top/posts/d92ca625.html</id>
    <published>2022-12-06T06:17:16.000Z</published>
    <updated>2022-12-07T12:03:41.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="AJAX-简介"><a href="#AJAX-简介" class="headerlink" title="AJAX 简介"></a>AJAX 简介</h3><p>AJAX(Asynchronous JavaScirpt And XML)：<strong>异步</strong> 的 JavaScript 和 XML</p><span id="more"></span><p>同步和异步的比较如图所示<br><img data-src="https://s2.loli.net/2022/12/07/pX1lt9kHqKyhiZB.png" alt="03-同步和异步的比较.png"></p><p>AJAX 作用：</p><ol><li>与服务器进行数据交换：通过 AJAX 可以给服务器发送请求，并获取服务器响应的数据<ol><li>使用 AJAX 和服务器进行通信，就可以使用 HTML+AJAX 来替换 JSP 页面了</li><li>使用它的一个重要原因是可以用来替换 JSP 页面；JSP 做不到前后端分离</li></ol></li><li>异步交互：可以在 <strong>不重新加载整个页面</strong> 的情况下，与服务器交换数据并 <strong>更新部分</strong> 网页端技术，如：搜索联想，用户名是否可用校验等等</li></ol><p>之前的做法：JSP<br><img data-src="https://s2.loli.net/2022/12/07/O9PYR4Xtsy7Tqch.png" alt="01-响应请求JSP做法.png"></p><p>现在的做法：AJAX<br><img data-src="https://s2.loli.net/2022/12/07/mhD2onQgtAJT5qZ.png" alt="02-响应请求AJAX做法.png"></p><h3 id="AJAX-快速入门"><a href="#AJAX-快速入门" class="headerlink" title="AJAX 快速入门"></a>AJAX 快速入门</h3><ol><li>编写 AjaxServlet，并使用 response 输出字符串（后端代码）</li><li>创建 XMLHttpRequest 对象：损失和服务器交换数据（前端代码）</li><li>想服务器发送请求（前端代码）</li><li>获取服务器响应数据（前端代码）</li></ol><p>一、编写 AjaxServlet，并使用 response 输出字符串</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet("/ajaxServlet")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//1.响应数据  </span></span><br><span class="line">        response.getWriter().write(<span class="string">"hello AJAX"</span>);  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">        <span class="keyword">this</span>.doGet(request, response);  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>二、创建核心对象</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhttp;  </span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) {  </span><br><span class="line">  xhttp = <span class="keyword">new</span> XMLHttpRequest();  </span><br><span class="line">} <span class="keyword">else</span> {  </span><br><span class="line">  <span class="comment">// code for IE6, IE5  </span></span><br><span class="line">  xhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>代码可参考 W3C：<a href="https://www.w3school.com.cn/js/js_ajax_http.asp">AJAX - XMLHttpRequest 对象</a></p><p>三、发送请求</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xhttp.open(<span class="string">"GET"</span>, <span class="string">"http://localhost:8080/ajax-dmeo/ajaxServlet"</span>);</span><br><span class="line">xhttp.send();</span><br></pre></td></tr></tbody></table></figure><p>注意：这里的路径是全路径，因为后期项目的前端和后端需要部署在不同的服务器上，需要使用绝对路径而不是相对路径</p><p>代码可参考 W3C：<a href="https://www.w3school.com.cn/js/js_ajax_http_send.asp">AJAX - XMLHttpRequest</a></p><p>四、获取响应</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xhttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{  </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span> &amp;&amp; <span class="built_in">this</span>.status == <span class="number">200</span>) {  </span><br><span class="line">            alert(<span class="built_in">this</span>.responseText)  </span><br><span class="line">    }  </span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>代码参考 W3C：<a href="https://www.w3school.com.cn/js/js_ajax_http_response.asp">AJAX - 服务器响应</a></p><h3 id="AJAX完整案例"><a href="#AJAX完整案例" class="headerlink" title="AJAX完整案例"></a>AJAX 完整案例</h3><p>注意：还需要我们在服务器端创建一个用于响应浏览器的 Servlet，如以上步骤一所示（一、编写 AjaxServlet，并使用 response 输出字符串）</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">  </span></span><br><span class="line"><span class="javascript">    <span class="comment">//1.创建核心对象  </span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> xhttp;  </span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) {  </span></span><br><span class="line"><span class="javascript">      xhttp = <span class="keyword">new</span> XMLHttpRequest();  </span></span><br><span class="line"><span class="javascript">    } <span class="keyword">else</span> {  </span></span><br><span class="line"><span class="javascript">      <span class="comment">// code for IE6, IE5  </span></span></span><br><span class="line"><span class="javascript">      xhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);  </span></span><br><span class="line"><span class="javascript">    }  </span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//2.发送请求  </span></span></span><br><span class="line"><span class="javascript">    xhttp.open(<span class="string">"GET"</span>, <span class="string">"http://localhost:8080/ajax-dmeo/ajaxServlet"</span>);  </span></span><br><span class="line"><span class="javascript">    xhttp.send();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//3.获取响应</span></span></span><br><span class="line"><span class="javascript">    xhttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{  </span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span> &amp;&amp; <span class="built_in">this</span>.status == <span class="number">200</span>) {  </span></span><br><span class="line"><span class="javascript">                alert(<span class="built_in">this</span>.responseText)  </span></span><br><span class="line"><span class="javascript">        }  </span></span><br><span class="line"><span class="javascript">    };  </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;AJAX-简介&quot;&gt;&lt;a href=&quot;#AJAX-简介&quot; class=&quot;headerlink&quot; title=&quot;AJAX 简介&quot;&gt;&lt;/a&gt;AJAX 简介&lt;/h3&gt;&lt;p&gt;AJAX(Asynchronous JavaScirpt And XML)：&lt;strong&gt;异步&lt;/strong&gt; 的 JavaScript 和 XML&lt;/p&gt;</summary>
    
    
    
    
    <category term="AJAX" scheme="https://coffeelize.top/tags/AJAX/"/>
    
    <category term="Front End" scheme="https://coffeelize.top/tags/Front-End/"/>
    
    <category term="Java" scheme="https://coffeelize.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Intellij 创建 Servlet 模板</title>
    <link href="https://coffeelize.top/posts/5f8f3d0b.html"/>
    <id>https://coffeelize.top/posts/5f8f3d0b.html</id>
    <published>2022-12-05T08:37:38.000Z</published>
    <updated>2022-12-05T09:51:56.725Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="IDEA-创建-Servlet-模板"><a href="#IDEA-创建-Servlet-模板" class="headerlink" title="IDEA 创建 Servlet 模板"></a>IDEA 创建 Servlet 模板</h3><p>使用通用方式获取请求参数后，屏蔽了 GET 和 POST 的请求方式代码的不同，则代码可以定义为如下格式：</p><span id="more"></span><p><img data-src="https://s2.loli.net/2022/12/05/1uHOfFrKtb4cXpS.png" alt="01-Get和Post请求的通用方式.png"></p><p>那么，可以使用 Servlet 模板创建来 Servlet 更高效，设置如下</p><p><img data-src="https://s2.loli.net/2022/12/05/Ed1BSvMNxkbTuwK.png" alt="02-Servlet模板设置页面.png"></p><p>Servlet Annotated Class 模板如下</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">if</span> (${PACKAGE_NAME} &amp;&amp; ${PACKAGE_NAME} != <span class="string">""</span>)<span class="keyword">package</span> ${PACKAGE_NAME};#end  </span><br><span class="line">#parse(<span class="string">"File Header.java"</span>)  </span><br><span class="line">  </span><br><span class="line">#<span class="keyword">if</span> ($JAVAEE_TYPE == <span class="string">"jakarta"</span>)  </span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;  </span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.*;  </span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.*;  </span><br><span class="line">#<span class="keyword">else</span>  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;  </span><br><span class="line">#end  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@WebServlet("/${Entity_Name}")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $</span>{Class_Name} extends HttpServlet {  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">        <span class="keyword">this</span>.doGet(request,response);  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>下次新建 Servlet 时，就会通过设置好的模板来创建，为我们减少重复的操作<br><img data-src="https://s2.loli.net/2022/12/05/MkWiKY4wlNTcSnu.png" alt="03-通过Servlet模板来创建Servlet.png"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@WebServlet("/ServletDemo1")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">        <span class="keyword">this</span>.doGet(request, response);  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>使用这项操作前，请确保 pom.xml 中已经导入了 servlet 的依赖。因为模板中存在 <code>@WebServlet</code> 注解，没有 servlet 依赖的话 IDEA 可不认识这个注解，新建的 Servlet 就不会应用模板</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--servlet--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;IDEA-创建-Servlet-模板&quot;&gt;&lt;a href=&quot;#IDEA-创建-Servlet-模板&quot; class=&quot;headerlink&quot; title=&quot;IDEA 创建 Servlet 模板&quot;&gt;&lt;/a&gt;IDEA 创建 Servlet 模板&lt;/h3&gt;&lt;p&gt;使用通用方式获取请求参数后，屏蔽了 GET 和 POST 的请求方式代码的不同，则代码可以定义为如下格式：&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://coffeelize.top/tags/Java/"/>
    
    <category term="Intellij" scheme="https://coffeelize.top/tags/Intellij/"/>
    
    <category term="Servlet" scheme="https://coffeelize.top/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 常见问题汇总</title>
    <link href="https://coffeelize.top/posts/207efebe.html"/>
    <id>https://coffeelize.top/posts/207efebe.html</id>
    <published>2022-12-05T08:23:12.000Z</published>
    <updated>2022-12-05T09:52:03.674Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="新建菜单中，没有-servlet-选项"><a href="#新建菜单中，没有-servlet-选项" class="headerlink" title="新建菜单中，没有 servlet 选项"></a>新建菜单中，没有 servlet 选项</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><span id="more"></span><p><img data-src="https://s2.loli.net/2022/12/05/W5zcDJ8hX49AENa.png" alt="01-右键菜单没有Servlet选项.png"></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li>通过 Maven 导入 servlet 依赖</li><li>然后在项目中的文件夹，右键，就有新建 servlet 的选项了</li></ol><p><img data-src="https://s2.loli.net/2022/12/05/EDZo2gVNCOKQFat.png" alt="02-右键菜单中有Servlet选项.png"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/Howard_Roark/article/details/107046920">IDEA 右键新建 new 没有 servlet 选项的问题_破的軍的博客 - CSDN 博客_ideanew 不了 servlet</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;新建菜单中，没有-servlet-选项&quot;&gt;&lt;a href=&quot;#新建菜单中，没有-servlet-选项&quot; class=&quot;headerlink&quot; title=&quot;新建菜单中，没有 servlet 选项&quot;&gt;&lt;/a&gt;新建菜单中，没有 servlet 选项&lt;/h2&gt;&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;</summary>
    
    
    
    
    <category term="Interllij" scheme="https://coffeelize.top/tags/Interllij/"/>
    
    <category term="Navigation" scheme="https://coffeelize.top/tags/Navigation/"/>
    
    <category term="JavaWeb" scheme="https://coffeelize.top/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>通过 Maven 骨架创建 Maven Web 项目时报错</title>
    <link href="https://coffeelize.top/posts/11af4f01.html"/>
    <id>https://coffeelize.top/posts/11af4f01.html</id>
    <published>2022-12-05T04:29:30.000Z</published>
    <updated>2022-12-05T09:47:38.607Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>通过 Maven Archetype 创建 Maven Web 项目时，发生报错，报错的详细信息如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Could not transfer metadata org.apache.maven.plugins:maven-archetype-plugin/maven-metadata.xml from/to central (https://repo.maven.apache.org/maven2): transfer failed for https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-archetype-plugin/maven-metadata.xml</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>在设置 ⇒ 找到图片中所在的位置 ⇒ 如图所示添加如下代码 </li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Dmaven.wagon.http.ssl.ignore.validity.dates=true</span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://s2.loli.net/2022/12/05/4dgxHjiSXa62GDt.png" alt="01-设置Maven运行程序-VM选项.png"></p><ol start="2"><li>文件⇒新建项目设置⇒新项目的设置</li></ol><p>进入到设置后，与第 1 步进行相同的操作</p><p><img data-src="https://s2.loli.net/2022/12/05/zyviTukXYeBOW1f.png" alt="02-Intellij新建项目设置.png"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/weixin_51735258/article/details/124240026">解决 Could not transfer metadata org.apache.maven.plugins:maven-archetype-plugin/.._报错 404 的博客 - CSDN 博客_could not transfer</a></li><li><a href="https://blog.csdn.net/hacknetY/article/details/117375772?spm=1001.2101.3001.6650.4&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-4-117375772-blog-124240026.pc_relevant_multi_platform_whitelistv3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-4-117375772-blog-124240026.pc_relevant_multi_platform_whitelistv3&amp;utm_relevant_index=7">解决 Could not transfer metadata org.apache.maven.plugins:maven_hacknetY 的博客 - CSDN 博客_could not transfer</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;通过 Maven Archetype 创建 Maven Web 项目时，发生报错，报错的详细信息如下&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Could not transfer metadata org.apache.maven.plugins:maven-archetype-plugin/maven-metadata.xml from/to central (https://repo.maven.apache.org/maven2): transfer failed for https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-archetype-plugin/maven-metadata.xml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="Intellij" scheme="https://coffeelize.top/tags/Intellij/"/>
    
    <category term="Maven" scheme="https://coffeelize.top/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 常用配置及依赖</title>
    <link href="https://coffeelize.top/posts/5a58d3ae.html"/>
    <id>https://coffeelize.top/posts/5a58d3ae.html</id>
    <published>2022-12-04T12:25:30.000Z</published>
    <updated>2022-12-07T08:15:23.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h3><p>使用说明</p><ol><li>注意修改别名</li><li>注意修改数据库信息中的 URL</li><li> 注意驱动对应的 MySQL 版本为 8</li><li> 注意修改 SQL 的映射文件名</li><li>文件存放在 resource 资源文件夹下 </li></ol><span id="more"></span><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"https://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--起别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.itheima.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--数据库的连接信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///db1?useSSL=false<span class="symbol">&amp;amp;</span>useServerPrepStmts=true"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"wwww"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--包扫描--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.itheima.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="UserMapper-xml"><a href="#UserMapper-xml" class="headerlink" title="UserMapper.xml"></a>UserMapper.xml</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"https://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    namespace：名称空间，需要链接到UserMapper接口</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itheima.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--以下开始填写SQL语句--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"Brand"</span>&gt;</span></span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="logback-xml"><a href="#logback-xml" class="headerlink" title="logback.xml"></a>logback.xml</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        CONSOLE ：表示当前的日志信息是可以输出到控制台的。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%level] %blue(%d{HH:mm:ss.SSS}) %cyan([%thread]) %boldGreen(%logger{15}) - %msg %n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.itheima"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF</span></span><br><span class="line"><span class="comment">     ， 默认debug</span></span><br><span class="line"><span class="comment">      &lt;root&gt;可以包含零个或多个&lt;appender-ref&gt;元素，标识这个输出位置将会被本日志级别控制。</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="常用依赖"><a href="#常用依赖" class="headerlink" title="常用依赖"></a>常用依赖</h3><p>使用说明</p><ol><li>内容添加到 pom.xml 文件中 </li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加载mysql驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--junit单元测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加slf4j日志api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加logback-classic依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加logback-core依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--防止运行Tomcat报错--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">maven.compiler.encoding</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>14<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>14<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>14<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Tomcat的插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;port&gt;80&lt;/port&gt;--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;path&gt;/&lt;/path&gt;--&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--JSP--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--JSTL标签--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>使用 JSTL 标签时，需要在 jsp 文件中引入 JSTL 标签库</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;  </span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;  </span><br></pre></td></tr></tbody></table></figure><h3 id="SqlSessionFactoryUtil-java"><a href="#SqlSessionFactoryUtil-java" class="headerlink" title="SqlSessionFactoryUtil.java"></a>SqlSessionFactoryUtil.java</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.util;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;  </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;  </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionFactoryUtils</span> </span>{  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> {  </span><br><span class="line">        <span class="comment">//静态代码块会随着类的加载而自动执行，且只执行一次  </span></span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> {  </span><br><span class="line">            String resource = <span class="string">"mybatis-config.xml"</span>;  </span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);  </span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);  </span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span></span>{  </span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory;  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;mybatis-config-xml&quot;&gt;&lt;a href=&quot;#mybatis-config-xml&quot; class=&quot;headerlink&quot; title=&quot;mybatis-config.xml&quot;&gt;&lt;/a&gt;mybatis-config.xml&lt;/h3&gt;&lt;p&gt;使用说明&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;注意修改别名&lt;/li&gt;
&lt;li&gt;注意修改数据库信息中的 URL&lt;/li&gt;
&lt;li&gt; 注意驱动对应的 MySQL 版本为 8&lt;/li&gt;
&lt;li&gt; 注意修改 SQL 的映射文件名&lt;/li&gt;
&lt;li&gt;文件存放在 resource 资源文件夹下 &lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://coffeelize.top/tags/Java/"/>
    
    <category term="MySQL" scheme="https://coffeelize.top/tags/MySQL/"/>
    
    <category term="JavaWeb" scheme="https://coffeelize.top/tags/JavaWeb/"/>
    
    <category term="MyBatis" scheme="https://coffeelize.top/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat 启动服务报错</title>
    <link href="https://coffeelize.top/posts/3c9f696f.html"/>
    <id>https://coffeelize.top/posts/3c9f696f.html</id>
    <published>2022-12-04T02:52:52.000Z</published>
    <updated>2022-12-05T09:47:38.607Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h3><p>创建 Web 项目，学习 Servlet 的过程中，通过 Tomcat 启动这个项目，提示报错：<code>不再支持源选项 5。请使用 7 或更高版本</code></p><p><img data-src="https://s2.loli.net/2022/12/05/XQVRS1hTcyzp7AE.png" alt="01-Intellij启动Tomcat报错.png"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><code>pom.xml</code> 文件中增加 maven 编译的 <code>java.version</code>&nbsp;jdk 版本设置，以及 <code>maven.compiler.source</code>&nbsp;资源编译 jdk 版本设置和 <code>maven.compiler.target</code>&nbsp;资源构建 jdk 版本设置</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">maven.compiler.encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>14<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>14<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>14<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/moshowgame/article/details/81369327">maven 报错：不再支持源选项 5。请使用 6 或更高版本。_Moshow 郑锴的博客 - CSDN 博客</a></li></ol>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="Tomcat" scheme="https://coffeelize.top/tags/Tomcat/"/>
    
    <category term="Servlet" scheme="https://coffeelize.top/tags/Servlet/"/>
    
    <category term="intelliJ" scheme="https://coffeelize.top/tags/intelliJ/"/>
    
  </entry>
  
  <entry>
    <title>Intellij 关联 MySQL 数据库</title>
    <link href="https://coffeelize.top/posts/db1d2eb3.html"/>
    <id>https://coffeelize.top/posts/db1d2eb3.html</id>
    <published>2022-12-02T13:57:57.000Z</published>
    <updated>2022-12-03T15:32:49.173Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="关联数据库"><a href="#关联数据库" class="headerlink" title="关联数据库"></a>关联数据库</h3><ol><li>如下图所示，点击右侧的数据库，然后弹出面板，点击新建，选择 MySQL 数据库</li></ol><span id="more"></span><p><img data-src="https://s2.loli.net/2022/12/03/jMTZxbPGvpB3JcF.png" alt="01-打开数据库连接面板.png"></p><ol start="2"><li>然后就是对数据库的信息配置一下，下载好驱动，测试连接，Nice，连接成功</li></ol><p><img data-src="https://s2.loli.net/2022/12/03/jxuc4J3i9a6RQz2.png" alt="02-配置数据库信息.png"></p><ol start="3"><li>之后，就可以直接在 IDEA 中直接查看数据库中的内容了</li></ol><p><img data-src="https://s2.loli.net/2022/12/03/RLpXJjCWSyrUBlK.png" alt="03-下载数据库连接驱动.png"></p><h3 id="容易出现的问题"><a href="#容易出现的问题" class="headerlink" title="容易出现的问题"></a>容易出现的问题</h3><p>比如在运行 MaBatis 项目，昨天运行还能正常运行，重启电脑后再次运行就出现了如下的报错信息，搜索一下，已有解决方案：<a href="https://blog.csdn.net/u013360850/article/details/80373604">MySQL 8.0 Public Key Retrieval is not allowed 错误的解决方法_呜呜呜啦啦啦的博客 - CSDN 博客</a></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Public Key Retrieval is not allowed</span><br></pre></td></tr></tbody></table></figure><p>解决方案：刷新一下数据库再运行项目即可<br><img data-src="https://s2.loli.net/2022/12/03/QbTDVoNxvytRU3a.png" alt="04-刷新数据库.png"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/u013360850/article/details/80373604">MySQL 8.0 Public Key Retrieval is not allowed 错误的解决方法_呜呜呜啦啦啦的博客 - CSDN 博客</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;关联数据库&quot;&gt;&lt;a href=&quot;#关联数据库&quot; class=&quot;headerlink&quot; title=&quot;关联数据库&quot;&gt;&lt;/a&gt;关联数据库&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;如下图所示，点击右侧的数据库，然后弹出面板，点击新建，选择 MySQL 数据库&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://coffeelize.top/tags/Java/"/>
    
    <category term="Intellij" scheme="https://coffeelize.top/tags/Intellij/"/>
    
    <category term="MySQL" scheme="https://coffeelize.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>XML 文件中编写 SQL 语句 IDEA 补全提示</title>
    <link href="https://coffeelize.top/posts/54072de9.html"/>
    <id>https://coffeelize.top/posts/54072de9.html</id>
    <published>2022-12-02T12:20:02.000Z</published>
    <updated>2022-12-11T13:38:28.405Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在 BrandMapper.xml 的 select 标签中编写 SQL 语句时，IDEA 没有给出补全提示，而老师的是有的。</p><span id="more"></span><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="1、设置-SQL-方言"><a href="#1、设置-SQL-方言" class="headerlink" title="1、设置 SQL 方言"></a>1、设置 SQL 方言</h4><p>进行如下图的设置（难怪在编写 SQL 的时候，有时候 IDEA 会提示我没有配置数据库方言，我在琢磨这是啥意思呢，原来作用在这儿呀）<br><img data-src="https://s2.loli.net/2022/12/11/YP8ZtLGMN64KgE9.png" alt="01-设置SQL方言.png"></p><h4 id="2、注入-SQL-语言"><a href="#2、注入-SQL-语言" class="headerlink" title="2、注入 SQL 语言"></a>2、注入 SQL 语言</h4><p>在 XML 文件中，在需要编写 SQL 语句的标签中（比如 select、update 等标签），使用快捷键 <code>Alt+Enter</code>，然后点击注入语言或引用，选择 SQL，然后在这个 select 标签中 IDEA 就会给出 SQL 的补全提示了<br><img data-src="https://s2.loli.net/2022/12/11/e3VxNjtJkaQ4Wqn.png" alt="02-注入SQL语言.png"></p><h4 id="3、进一步设置"><a href="#3、进一步设置" class="headerlink" title="3、进一步设置"></a>3、进一步设置</h4><p>按照上面两步设置好之后，会遇到以下问题：当换一个标签，比如在 update 标签中编写 SQL 语句时，IDEA 又不能够提示补全了。此时按照如下设置（注：此处也可参考本文的参考资料 3）</p><p>1、Alt+Enter ⇒ 语言注入设置<br><img data-src="https://s2.loli.net/2022/12/11/U61LD9BA423wXzK.png" alt="03-语言注入设置-1.png"></p><p>2、然后复制 <code>sql|select|insert|update|delete</code> 到下图中的本地名称，点击确认即可。</p><p>注：上面的那个 <code>名称</code> 不需要自己修改，会自动更跟下面的 <code>本地名称</code> 中的值保持一致。这样，其他标签中也会弹出 SQL 的提示了<br><img data-src="https://s2.loli.net/2022/12/11/uLfkOxbmrhKjyJ6.png" alt="04-语言注入设置-2.png"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/qq_40417295/article/details/123032742">idea 中编写 sql 语句时不提示补全内容解决办法_拿敌敌畏就数你的博客 - CSDN 博客_idea 写 sql 无提示</a></li><li><a href="https://blog.csdn.net/qq_40406929/article/details/105965398">idea sql 自动补全、自动提示设置_@司马懿的博客 - CSDN 博客_idea 去除 sql 自动规则化</a></li><li><a href="https://blog.csdn.net/daban2008/article/details/127334753?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-2-127334753-blog-123032742.pc_relevant_recovery_v2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-2-127334753-blog-123032742.pc_relevant_recovery_v2&amp;utm_relevant_index=5">idea 在用 Mybatis 时，xml 文件 sql 不提示，提示后背景颜色去除_daban2008 的博客 - CSDN 博客</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;在 BrandMapper.xml 的 select 标签中编写 SQL 语句时，IDEA 没有给出补全提示，而老师的是有的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Intellij" scheme="https://coffeelize.top/tags/Intellij/"/>
    
    <category term="MySQL" scheme="https://coffeelize.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis 增删改查案例</title>
    <link href="https://coffeelize.top/posts/a9dc65da.html"/>
    <id>https://coffeelize.top/posts/a9dc65da.html</id>
    <published>2022-12-02T10:20:02.000Z</published>
    <updated>2022-12-11T13:40:49.602Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><ul><li>为了开发更加方便推荐安装 MyBatisX 插件</li><li>数据库：准备数据库表 tb_brand</li><li>pom.xml 文件：已导入 MaBatis 和 MySQL 坐标</li><li>已配置好 mybatis-config.xml 配置文件<ul><li>设置好了 typeAliases 标签</li><li>设置好了数据库的连接信息</li></ul></li><li>实体类：在项目下新建 pojo 软件包，创建 Brand 实体类</li><li>测试用类：将主程序写在 test 文件夹的项目包下</li></ul><span id="more"></span><p>测试用类及项目结构如下图所示<br><img data-src="https://s2.loli.net/2022/12/11/qemNTEcL6xypfwk.png" alt="01-测试用类及项目结构.png"></p><h3 id="MyBatisX-插件"><a href="#MyBatisX-插件" class="headerlink" title="MyBatisX 插件"></a>MyBatisX 插件</h3><p>MyBatisX 是一款基于 IDEA 的快速开发插件，为效率而生</p><p>插件的主要功能有：</p><ol><li>XML 和接口方法相互跳转</li><li>根据接口方法生成 statement</li></ol><p><img data-src="https://s2.loli.net/2022/12/11/XHDGzeAbqBwER7u.png" alt="02-安装MaBatisX插件.png"></p><p>安装完重启 IDEA，相应的 xml 文件图标就变成小鸟的图标了<br>红色的小鸟：SQL 的映射文件<br>蓝色的小鸟：Mapper 的接口</p><p><img data-src="https://s2.loli.net/2022/12/11/9oNSWvHw2Qeh4Uj.png" alt="03-蓝色小鸟与红色小鸟.png"></p><h3 id="查询所有数据"><a href="#查询所有数据" class="headerlink" title="查询所有数据"></a>查询所有数据</h3><h4 id="1、编写接口方法：Mapper-接口"><a href="#1、编写接口方法：Mapper-接口" class="headerlink" title="1、编写接口方法：Mapper 接口"></a>1、编写接口方法：Mapper 接口</h4><ul><li>参数：无</li><li>返回类型：<code>List&lt;Brand&gt;</code></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;Brand&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="2、编写-Mapper-配置文件"><a href="#2、编写-Mapper-配置文件" class="headerlink" title="2、编写 Mapper 配置文件"></a>2、编写 Mapper 配置文件</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--查询标签，id为这条SQL语句的唯一标识，resultType为返回结果类型，不区分大小写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"brand"</span>&gt;</span>  </span><br><span class="line">    select * from tb_brand;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://s2.loli.net/2022/12/11/iWeNoqLa7ClvmUk.png" alt="04-利用MaBatisx插件自动在配置文件中生成对应标签.png"></p><h4 id="3、执行方法，测试"><a href="#3、执行方法，测试" class="headerlink" title="3、执行方法，测试"></a>3、执行方法，测试</h4><p>MaBatis 完成操作只需要三步</p><ol><li>编写接口方法</li><li>编写 SQL</li><li> 执行方法</li></ol><h4 id="查询结果中部分字段显示为-null"><a href="#查询结果中部分字段显示为-null" class="headerlink" title="查询结果中部分字段显示为 null"></a>查询结果中部分字段显示为 null</h4><p>查询出来的结果中，部分字段显示 NULL，为什么呢？</p><p><img data-src="https://s2.loli.net/2022/12/11/XRmEskYTrgxpt2h.png" alt="05-部分字段显示为null.png"></p><p>因为这些字段，原本在数据库中比如说 <code>brand_name</code>，到了 Java 当中变量名就变成了 <code>brandName</code>（在 POJO 的实体类），<strong>数据库表的字段名称和实体类的属性名称不一样</strong>，所有就不会为我们自动封装了</p><h4 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法 1"></a>解决办法 1</h4><p>在 SQL 查询语句中为相应的字段设置别名，让别名和实体类的属性名一致即可</p><p>原来的 SQL 查询</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>"selectAll" resultType<span class="operator">=</span>"brand"<span class="operator">&gt;</span>  </span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_brand;  </span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>修改后的 SQL 查询</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>"selectAll" resultType<span class="operator">=</span>"brand"<span class="operator">&gt;</span>  </span><br><span class="line">    <span class="keyword">select</span> id,brand_name brandName,company_name companyName,ordered,status  </span><br><span class="line">    <span class="keyword">from</span> tb_brand  </span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>但是这样每进行一次查询都需要重新设置一次，而且不能复用</p><h4 id="解决办法-2"><a href="#解决办法-2" class="headerlink" title="解决办法 2"></a>解决办法 2</h4><p>使用 resultMap 标签（最为常用）</p><p><img data-src="https://s2.loli.net/2022/12/11/NuRgQdcHexomhAJ.png" alt="06-ResultMap实现字段名和类的属性名一一对应.png"></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"brandResultMap"</span> <span class="attr">type</span>=<span class="string">"brand"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--id标签完成主键的映射,result标签完成非主键的映射--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;id&gt;&lt;/id&gt;--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"brand_name"</span> <span class="attr">property</span>=<span class="string">"brandName"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"company_name"</span> <span class="attr">property</span>=<span class="string">"companyName"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultMap</span>=<span class="string">"brandResultMap"</span>&gt;</span></span><br><span class="line"> select</span><br><span class="line"> *</span><br><span class="line"> from tb_brand</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>resultMap 标签中：</p><ul><li>id：唯一标识</li><li> type：映射的类型，支持别名</li><li> id 子标签：完成主键字段的映射，具有属性 column 表的列名和 property 实体类的属性，以上代码中并没有演示 id 子标签的使用</li><li> result 子标签：完成一半字段的映射，具有属性 column 表的列名和 property 实体类的属性</li></ul><p>注意：select 标签中原先的 <code>resultType="brand"</code> 改为了 <code>resultMap="brandResultMap"</code>，因为在 resultMap 标签中 <code>type</code> 属性也定义了类型</p><h3 id="根据-id-查询数据"><a href="#根据-id-查询数据" class="headerlink" title="根据 id 查询数据"></a>根据 id 查询数据</h3><h4 id="1、编写接口方法：Mapper-接口-1"><a href="#1、编写接口方法：Mapper-接口-1" class="headerlink" title="1、编写接口方法：Mapper 接口"></a>1、编写接口方法：Mapper 接口</h4><ul><li>参数：id</li><li> 返回类型：Brand 类 </li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传入一个id，最终返回一个Brand类型</span></span><br><span class="line"><span class="function">Brand <span class="title">selectById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="2、编写-SQL-语句"><a href="#2、编写-SQL-语句" class="headerlink" title="2、编写 SQL 语句"></a>2、编写 SQL 语句</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>"selectById" resultMap<span class="operator">=</span>"brandResultMap" <span class="operator">&gt;</span></span><br><span class="line"> <span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"> <span class="keyword">from</span> tb_brand</span><br><span class="line"> <span class="keyword">where</span> id <span class="operator">=</span> #{id};</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3、执行方法，测试-1"><a href="#3、执行方法，测试-1" class="headerlink" title="3、执行方法，测试"></a>3、执行方法，测试</h4><p>只需要修改执行方法这一部分代码，其他地方不需要改动</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.执行方法  </span></span><br><span class="line"><span class="keyword">int</span> id = <span class="number">1</span>;  </span><br><span class="line">Brand brand = brandMapper.selectById(id); <span class="comment">//返回一个brand对象  </span></span><br><span class="line">System.out.println(brand);</span><br></pre></td></tr></tbody></table></figure><h3 id="条件查询-多条件查询"><a href="#条件查询-多条件查询" class="headerlink" title="条件查询 - 多条件查询"></a>条件查询 - 多条件查询</h3><h4 id="1、编写接口方法：Mapper-接口-2"><a href="#1、编写接口方法：Mapper-接口-2" class="headerlink" title="1、编写接口方法：Mapper 接口"></a>1、编写接口方法：Mapper 接口</h4><ul><li>参数：所有查询条件</li><li>返回类型：<code>List&lt;Brand&gt;</code></li></ul><h4 id="2、编写-SQL-语句-1"><a href="#2、编写-SQL-语句-1" class="headerlink" title="2、编写 SQL 语句"></a>2、编写 SQL 语句</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>"selectByCondition" resultMap<span class="operator">=</span>"brandResultMap"<span class="operator">&gt;</span></span><br><span class="line"> <span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"> <span class="keyword">from</span> tb_brand</span><br><span class="line"> <span class="keyword">where</span> status <span class="operator">=</span> #{status}</span><br><span class="line"> <span class="keyword">and</span> company_name <span class="keyword">like</span> #{companyName}</span><br><span class="line"> <span class="keyword">and</span> brand_name <span class="keyword">like</span> #{brandName};</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>注意：以上代码中需输入三个参数才能查出结果，如果某一个参数没有填写就查询不出来，因此需要 SQL 语句动态变化（SQL 语句会随着用户的输入或外部条件的变化而变化）</p><p>解决方案 1：在 where 后面添加一个恒等式，然后所有的判断条件语句中都可以加上 <code>and</code> 这个关键词</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span>  </span><br><span class="line"><span class="keyword">from</span> tb_brand  </span><br><span class="line"><span class="keyword">where</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span>  </span><br><span class="line"><span class="operator">&lt;</span>if test<span class="operator">=</span>"status!=null"<span class="operator">&gt;</span>  </span><br><span class="line">    <span class="keyword">and</span> status <span class="operator">=</span> #{status}  </span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span>  </span><br><span class="line"><span class="operator">&lt;</span>if test<span class="operator">=</span>"companyName!=null and companyName!='' "<span class="operator">&gt;</span>  </span><br><span class="line">    <span class="keyword">and</span> company_name <span class="keyword">like</span> #{companyName}  </span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span>  </span><br><span class="line"><span class="operator">&lt;</span>if test<span class="operator">=</span>"brandName!=null and brandName!='' "<span class="operator">&gt;</span>  </span><br><span class="line">    <span class="keyword">and</span> brand_name <span class="keyword">like</span> #{brandName}  </span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>解决方案 2：利用 MaBatis 提供的 where 标签</p><p>这样的话，就不需要管到底用户传递了几个参数过来，会动态判断是否需要添加 <code>and</code> 关键字</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;where&gt;  </span><br><span class="line">    &lt;<span class="keyword">if</span> test=<span class="string">"status!=null"</span>&gt;  </span><br><span class="line">        and status = #{status}  </span><br><span class="line">    &lt;/<span class="keyword">if</span>&gt;  </span><br><span class="line">    &lt;<span class="keyword">if</span> test=<span class="string">"companyName!=null and companyName!='' "</span>&gt;  </span><br><span class="line">        and company_name like #{companyName}  </span><br><span class="line">    &lt;/<span class="keyword">if</span>&gt;  </span><br><span class="line">    &lt;<span class="keyword">if</span> test=<span class="string">"brandName!=null and brandName!='' "</span>&gt;  </span><br><span class="line">        and brand_name like #{brandName}  </span><br><span class="line">    &lt;/<span class="keyword">if</span>&gt;  </span><br><span class="line">&lt;/where&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="3、执行方法"><a href="#3、执行方法" class="headerlink" title="3、执行方法"></a>3、执行方法</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行方法</span></span><br><span class="line">List&lt;Brand&gt; brands = brandMapper.selectByCondition(brand);<span class="comment">//传入一个brand对象  </span></span><br><span class="line">System.out.println(brands);</span><br></pre></td></tr></tbody></table></figure><h3 id="三种接收参数的格式"><a href="#三种接收参数的格式" class="headerlink" title="三种接收参数的格式"></a>三种接收参数的格式</h3><h4 id="1-散装参数格式"><a href="#1-散装参数格式" class="headerlink" title="1. 散装参数格式"></a>1. 散装参数格式</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.散装参数的格式，需要使用@Param("SQL参数占位符名称")  </span></span><br><span class="line"><span class="function">List&lt;Brand&gt; <span class="title">selectByCondition</span><span class="params">(<span class="meta">@Param("status")</span> <span class="keyword">int</span> status, <span class="meta">@Param("companyName")</span> String companyName, <span class="meta">@Param("brandName")</span> String brandName)</span></span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="2-对象参数"><a href="#2-对象参数" class="headerlink" title="2. 对象参数"></a>2. 对象参数</h4><p>对象的属性名称要和参数占位符一致</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;Brand&gt; <span class="title">selectByCondition</span><span class="params">(Brand brand)</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>注意：对于对象参数，在处理参数的时候，需要有封装对象的处理</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收参数  </span></span><br><span class="line"><span class="keyword">int</span> status = <span class="number">1</span>;  </span><br><span class="line">String companyName = <span class="string">"华为"</span>;  </span><br><span class="line">String brandName = <span class="string">"华为"</span>;  </span><br><span class="line"><span class="comment">//封装对象  </span></span><br><span class="line">Brand brand = <span class="keyword">new</span> Brand();  </span><br><span class="line">brand.setStatus(status);  </span><br><span class="line">brand.setBrandName(brandName);  </span><br><span class="line">brand.setCompanyName(companyName);</span><br></pre></td></tr></tbody></table></figure><h4 id="三、Map-对象格式"><a href="#三、Map-对象格式" class="headerlink" title="三、Map 对象格式"></a>三、Map 对象格式</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收参数  </span></span><br><span class="line"><span class="keyword">int</span> status = <span class="number">1</span>;  </span><br><span class="line">String companyName = <span class="string">"华为"</span>;  </span><br><span class="line">String brandName = <span class="string">"华为"</span>;  </span><br><span class="line"><span class="comment">//处理参数，用作模糊匹配  </span></span><br><span class="line">companyName = <span class="string">"%"</span> + companyName + <span class="string">"%"</span>;  </span><br><span class="line">brandName = <span class="string">"%"</span> + brandName + <span class="string">"%"</span>;  </span><br><span class="line"><span class="comment">//map对象  </span></span><br><span class="line">Map map = <span class="keyword">new</span> HashMap();  </span><br><span class="line">map.put(<span class="string">"status"</span>,status);  </span><br><span class="line">map.put(<span class="string">"companyName"</span>,companyName);  </span><br><span class="line">map.put(<span class="string">"brandName"</span>,brandName);</span><br></pre></td></tr></tbody></table></figure><p>MaBatis 对动态 SQL 有很强大的支撑</p><ul><li>if</li><li>choose(when,otherwise)</li><li>trim(where,set)</li><li>foreach</li></ul><h3 id="条件查询-多个条件中选择一个"><a href="#条件查询-多个条件中选择一个" class="headerlink" title="条件查询 - 多个条件中选择一个"></a>条件查询 - 多个条件中选择一个</h3><p>多个条件中选择一个，如下图片所示的下拉选项一样<br><img data-src="https://s2.loli.net/2022/12/11/ilwT9byce35Zsmq.png" alt="07-下拉菜单（多选一）.png"></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--单条件查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByConditionSingle"</span> <span class="attr">resultMap</span>=<span class="string">"brandResultMap"</span>&gt;</span></span><br><span class="line"> select *</span><br><span class="line"> from tb_brand</span><br><span class="line"> where</span><br><span class="line">  <span class="tag">&lt;<span class="name">choose</span>&gt;</span><span class="comment">&lt;!--相当于switch--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"status!=null"</span>&gt;</span><span class="comment">&lt;!--相当于case--&gt;</span></span><br><span class="line">    status = #{status}</span><br><span class="line">   <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"companyName!=null and companyName!=''"</span>&gt;</span></span><br><span class="line">    company_name like #{companyName}</span><br><span class="line">   <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"brandName!=null and brandName!='' "</span>&gt;</span></span><br><span class="line">    and brand_name like #{brandName}</span><br><span class="line">   <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>对于如上代码，当给定一个值时好说，但是如果一个值都没有给的话，此时就需要一个保底的方案，不然 SQL 会报语法错误。</p><p>那么我们可以使用 <code>&lt;otherwise&gt;</code> 标签，标签中边放一个恒定值，那么当用户给了一个参数之后，就不会执行 otherwise 中的内容，如果没有给参数的话，恒等式派上用场</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span><span class="comment">&lt;!--相当于switch--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"status!=null"</span>&gt;</span><span class="comment">&lt;!--相当于case--&gt;</span></span><br><span class="line">  status = #{status}</span><br><span class="line"> <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"companyName!=null and companyName!=''"</span>&gt;</span></span><br><span class="line">  company_name like #{companyName}</span><br><span class="line"> <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"brandName!=null and brandName!='' "</span>&gt;</span></span><br><span class="line">  and brand_name like #{brandName}</span><br><span class="line"> <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span><span class="comment">&lt;!--相当于default--&gt;</span></span><br><span class="line">  1 = 1</span><br><span class="line"> <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>那么更进一步，可以和前面的 where 标签结合起来，就不需要使用到 otherwise 标签了</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;where&gt;  </span><br><span class="line">    &lt;choose&gt;&lt;!--相当于<span class="keyword">switch</span>--&gt;  </span><br><span class="line">        &lt;when test=<span class="string">"status!=null"</span>&gt;&lt;!--相当于<span class="keyword">case</span>--&gt;  </span><br><span class="line">            status = #{status}  </span><br><span class="line">        &lt;/when&gt;  </span><br><span class="line">        &lt;when test=<span class="string">"companyName!=null and companyName!=''"</span>&gt;  </span><br><span class="line">            company_name like #{companyName}  </span><br><span class="line">        &lt;/when&gt;  </span><br><span class="line">        &lt;when test=<span class="string">"brandName!=null and brandName!='' "</span>&gt;  </span><br><span class="line">            and brand_name like #{brandName}  </span><br><span class="line">        &lt;/when&gt;  </span><br><span class="line">    &lt;/choose&gt;</span><br><span class="line">&lt;/where&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><h4 id="1、编写接口方法：Mapper-接口-3"><a href="#1、编写接口方法：Mapper-接口-3" class="headerlink" title="1、编写接口方法：Mapper 接口"></a>1、编写接口方法：Mapper 接口</h4><ul><li>参数：除了 id 主键之外的所有参数</li><li>结果：void</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Brand brand)</span></span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="2、编写-SQL-语句-2"><a href="#2、编写-SQL-语句-2" class="headerlink" title="2、编写 SQL 语句"></a>2、编写 SQL 语句</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="operator">!</span><span class="comment">--添加功能--&gt;  </span></span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">insert</span> id<span class="operator">=</span>"add"<span class="operator">&gt;</span>  </span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_brand (brand_name, company_name, ordered, description, status)  </span><br><span class="line">    <span class="keyword">values</span>(#{brandName},#{companyName},#{ordered},#{description},#{status})<span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">insert</span><span class="operator">&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3、执行方法-1"><a href="#3、执行方法-1" class="headerlink" title="3、执行方法"></a>3、执行方法</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.执行方法  </span></span><br><span class="line">brandMapper.add(brand);  </span><br><span class="line"><span class="comment">//提交事务  </span></span><br><span class="line">sqlSession.commit();</span><br></pre></td></tr></tbody></table></figure><p>在没有手动提交事务以前，虽然没有报错，但是查看数据库，并没有添加数据，原来是 <code>autocommit</code> 设置成了 false，所以需要我们手动提交一下<br>![[Pasted image 20221203151443.png]]</p><p>注：那么每次都需要手动提交事务，那不是挺麻烦。可以在获取 sqlSession 对象的时候就设置好自动提交事务</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://s2.loli.net/2022/12/11/XctrTZGqyifRAn6.png" alt="08-对数据库进行了修改操作后需要手动提交事务.png"></p><p>MaBatis 事务</p><ul><li>openSession ()：默认开启事务，进行增删改操作后需要使用 sqlSession.commit () 手动提交事务</li><li> openSession (true)：可以设置为自动提交事务（即关闭事务）</li></ul><h3 id="添加数据并主键返回"><a href="#添加数据并主键返回" class="headerlink" title="添加数据并主键返回"></a>添加数据并主键返回</h3><p>在数据添加成功后，需要获取插入数据库数据的主键的值</p><p>通过之前的添加方法，实际上是已经添加了一条数据，但是这个新添加的数据的 id 并没有绑定在这个新添加的对象上，所以 <code>brand.getId()</code> 返回的是一个 null</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.执行方法  </span></span><br><span class="line">brandMapper.add(brand);  </span><br><span class="line">Integer id = brand.getId();  </span><br><span class="line">System.out.println(id);</span><br></pre></td></tr></tbody></table></figure><p>那么如何在添加数据的时候，将主键值和这个新添加的对象绑定在一起呢？</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加功能并主键返回--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span>  </span><br><span class="line">    insert into tb_brand (brand_name, company_name, ordered, description, status)  </span><br><span class="line">    values(#{brandName},#{companyName},#{ordered},#{description},#{status})<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在 insert 标签中添加两个属性 <code>useGeneratedKeys="true"</code> 和 <code>keyProperty="id"</code></p><h3 id="修改-修改全部字段"><a href="#修改-修改全部字段" class="headerlink" title="修改 - 修改全部字段"></a>修改 - 修改全部字段</h3><h4 id="1、编写接口方法：Mapper-接口-4"><a href="#1、编写接口方法：Mapper-接口-4" class="headerlink" title="1、编写接口方法：Mapper 接口"></a>1、编写接口方法：Mapper 接口</h4><ul><li>参数：所有数据</li><li>返回类型：void</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Brand brand)</span></span>; <span class="comment">//不返回结果值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(Brand brand)</span></span>; <span class="comment">//返回影响的行数</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2、编写-SQL-语句-3"><a href="#2、编写-SQL-语句-3" class="headerlink" title="2、编写 SQL 语句"></a>2、编写 SQL 语句</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="operator">!</span><span class="comment">--修改功能--&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>update id<span class="operator">=</span>"update"<span class="operator">&gt;</span></span><br><span class="line"> update tb_brand</span><br><span class="line"> <span class="keyword">set</span> brand_name <span class="operator">=</span> #{brandName},</span><br><span class="line">  company_name <span class="operator">=</span> #{companyName},</span><br><span class="line">  ordered <span class="operator">=</span> #{ordered},</span><br><span class="line">  status <span class="operator">=</span> #{status},</span><br><span class="line">  description <span class="operator">=</span> #{description}</span><br><span class="line"> <span class="keyword">where</span> id <span class="operator">=</span> #{id};</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>update<span class="operator">&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3、执行方法-2"><a href="#3、执行方法-2" class="headerlink" title="3、执行方法"></a>3、执行方法</h4><p>需要在传入参数的时候把 id 也传进去，然后封装对象的时候，也 brand.setid (id)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.执行方法  </span></span><br><span class="line"><span class="keyword">int</span> count = brandMapper.update(brand);  <span class="comment">//返回影响的行数</span></span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></tbody></table></figure><p>会存在一个问题，当我们之传入了某几个参数之后，另外几个没有传参，那么运行的话，就会把没有传参的字段赋值为 NULL</p><h3 id="修改-动态修改字段"><a href="#修改-动态修改字段" class="headerlink" title="修改 - 动态修改字段"></a>修改 - 动态修改字段</h3><p>比如设置新密码，此时账号就不需要修改，而是只需要修改某几个数据，那么就需要使用到动态 SQL</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--修改动态字段--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update2"</span>&gt;</span>  </span><br><span class="line">    update tb_brand  </span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"brandName!=null and brandName!='' "</span>&gt;</span>  </span><br><span class="line">            brand_name = #{brandName},  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"companyName!=null and companyName!='' "</span>&gt;</span>  </span><br><span class="line">            company_name = #{companyName},  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"description!=null and description!='' "</span>&gt;</span>  </span><br><span class="line">            description = #{description},  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ordered!=null"</span>&gt;</span>  </span><br><span class="line">            ordered = #{ordered},  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"status!=null"</span>&gt;</span>  </span><br><span class="line">            status = #{status}  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span>  </span><br><span class="line">    where id=#{id};  </span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>那么此时，我们可以之修改某几个参数，另外几个参数没有修改的话，也不会被 NULL 值覆盖了</p><h3 id="删除一个"><a href="#删除一个" class="headerlink" title="删除一个"></a>删除一个</h3><h4 id="1、编写接口方法：Mapper-接口-5"><a href="#1、编写接口方法：Mapper-接口-5" class="headerlink" title="1、编写接口方法：Mapper 接口"></a>1、编写接口方法：Mapper 接口</h4><ul><li>参数：id</li><li> 返回类型：void</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="2、编写-SQL-语句-4"><a href="#2、编写-SQL-语句-4" class="headerlink" title="2、编写 SQL 语句"></a>2、编写 SQL 语句</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteById"</span>&gt;</span>  </span><br><span class="line">    delete from tb_brand where id = #{id};  </span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3、执行方法-3"><a href="#3、执行方法-3" class="headerlink" title="3、执行方法"></a>3、执行方法</h4><p>传递参数的时候只要将 id 传进来就可以了</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.执行方法  </span></span><br><span class="line">brandMapper.deleteById(id);</span><br></pre></td></tr></tbody></table></figure><h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><h4 id="1、编写接口方法：Mapper-接口-6"><a href="#1、编写接口方法：Mapper-接口-6" class="headerlink" title="1、编写接口方法：Mapper 接口"></a>1、编写接口方法：Mapper 接口</h4><ul><li>参数：id 数组</li><li>返回类型：void</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteByIds</span><span class="params">(<span class="meta">@Param("ids")</span> <span class="keyword">int</span>[] ids)</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>如果没有加注解的话，就报了下面的错误</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parameter <span class="string">'ids'</span> not found. Available parameters are [array, arg0]</span><br></pre></td></tr></tbody></table></figure><h4 id="2、编写-SQL-语句-5"><a href="#2、编写-SQL-语句-5" class="headerlink" title="2、编写 SQL 语句"></a>2、编写 SQL 语句</h4><p>占位符的个数需要根据删除的个数进行变化，也就是需要遍历这个数组，MyBatis 中提供了相应的标签 <code>&lt;foreach&gt;</code>，可以用来遍历数组</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--MaBatis会将数组参数封装为一个Map集合，默认情况下</span></span><br><span class="line"><span class="comment">key为array</span></span><br><span class="line"><span class="comment">value为数组</span></span><br><span class="line"><span class="comment">但是通过使用@param注解之后，使用ids已经替换了默认的array，因此collection="ids"</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteByIds"</span>&gt;</span></span><br><span class="line"> delete from tb_brand</span><br><span class="line"> where id in (</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">   #{id}</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">  )</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>以上 SQL 语句仍然有问题，当有多个 id 时，就变成了如下</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;foreach collection=<span class="string">"ids"</span> item=<span class="string">"id"</span>&gt;</span><br><span class="line"> #{id} #{id} #{id} </span><br><span class="line">&lt;/foreach&gt;</span><br></pre></td></tr></tbody></table></figure><p>占位符之间少了逗号分隔符，因此还需要在 foreach 标签中添加属性</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--MaBatis会将数组参数封装为一个Map集合，默认情况下</span></span><br><span class="line"><span class="comment">key为array</span></span><br><span class="line"><span class="comment">value为数组</span></span><br><span class="line"><span class="comment">但是通过使用@param注解之后，使用ids已经替换了默认的array，因此collection="ids"</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteByIds"</span>&gt;</span></span><br><span class="line"> delete from tb_brand</span><br><span class="line"> where id in (</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">   #{id}</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">  )</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3、执行方法-4"><a href="#3、执行方法-4" class="headerlink" title="3、执行方法"></a>3、执行方法</h4><p>传入一个 ids 数组</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.执行方法  </span></span><br><span class="line">brandMapper.deleteByIds(ids);</span><br></pre></td></tr></tbody></table></figure><h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><p>如下代码可以正常执行功能，但是 foreach 标签包裹在小括号中，可不可以去掉外边的小括号呢？</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--MaBatis会将数组参数封装为一个Map集合，默认情况下</span></span><br><span class="line"><span class="comment">key为array</span></span><br><span class="line"><span class="comment">value为数组</span></span><br><span class="line"><span class="comment">但是通过使用@param注解之后，使用ids已经替换了默认的array，因此collection="ids"</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteByIds"</span>&gt;</span></span><br><span class="line"> delete from tb_brand</span><br><span class="line"> where id in (</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">   #{id}</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">  )</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>改为如下代码，即在 foreach 标签中添加 open 和 close 属性</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteByIds"</span>&gt;</span></span><br><span class="line"> delete from tb_brand</span><br><span class="line"> where id in </span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">   #{id}</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><h3 id="MyBatis-参数传递"><a href="#MyBatis-参数传递" class="headerlink" title="MyBatis 参数传递"></a>MyBatis 参数传递</h3><p>MyBatis 接口方法中可以接收各种各样的参数，MyBatis 底层对于这些参数进行不同的封装处理方式。扩展阅读：<a href="https://blog.csdn.net/DoUUnderstand/article/details/78466203">Mybatis @Param 注解的作用_DoUUnderstand 的博客 - CSDN 博客</a></p><ul><li>单个参数<ul><li> POJO 类型：直接使用，属性名和参数占位符名称一致</li><li> Map 集合：直接使用，键名和参数占位符名称一致</li><li> Collection：封装为 Map 集合<ul><li> map.put (“arg0”,collection 集合)</li><li>map.put (“collection”,collection 集合)</li></ul></li><li>List：封装成 Map 集合<ul><li> map.put (“arg0”,list 集合)</li><li>map.put (“collection”,list 集合)</li><li>map.put (“list”,list 集合)</li></ul></li><li>Array：封装成 Map 集合<ul><li> map.put (“arg0”, 数组)</li><li>map.put (“array”, 数组)</li></ul></li><li> 其他类型：直接使用</li></ul></li><li>多个参数<ul><li>比如查询时的散装参数</li></ul></li></ul><p>总之，当有多个参数时，不要使用 Map 集合中的默认键名，使用 <code>@Param</code> 注解的方式来替换默认的键名</p><p>Map 集合中默认的键名如下</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map.put(<span class="string">"arg0"</span>,参数值<span class="number">1</span>)</span><br><span class="line">map.put(<span class="string">"param1"</span>,参数值<span class="number">2</span>)</span><br><span class="line">map.put(<span class="string">"arg1"</span>,参数值<span class="number">1</span>)</span><br><span class="line">map.put(<span class="string">"param2"</span>,参数值<span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><p>设置好 <code>@Param</code> 注解之后呢，会将新的键名覆盖掉默认的 arg0、arg1 键名，可读性更强</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;Brand&gt; <span class="title">selectByCondition</span><span class="params">(<span class="meta">@Param("status")</span> <span class="keyword">int</span> status, <span class="meta">@Param("companyName")</span> String companyName)</span></span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加@Param前--&gt;</span></span><br><span class="line">select *</span><br><span class="line">from ...</span><br><span class="line">where status = #{arg0}</span><br><span class="line">and company_name = #{arg1} </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--添加@Param后--&gt;</span></span><br><span class="line">select *</span><br><span class="line">from ...</span><br><span class="line">where status = #{status}</span><br><span class="line">and company_name = #{companyName} </span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;准备环境&quot;&gt;&lt;a href=&quot;#准备环境&quot; class=&quot;headerlink&quot; title=&quot;准备环境&quot;&gt;&lt;/a&gt;准备环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;为了开发更加方便推荐安装 MyBatisX 插件&lt;/li&gt;
&lt;li&gt;数据库：准备数据库表 tb_brand&lt;/li&gt;
&lt;li&gt;pom.xml 文件：已导入 MaBatis 和 MySQL 坐标&lt;/li&gt;
&lt;li&gt;已配置好 mybatis-config.xml 配置文件&lt;ul&gt;
&lt;li&gt;设置好了 typeAliases 标签&lt;/li&gt;
&lt;li&gt;设置好了数据库的连接信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实体类：在项目下新建 pojo 软件包，创建 Brand 实体类&lt;/li&gt;
&lt;li&gt;测试用类：将主程序写在 test 文件夹的项目包下&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://coffeelize.top/tags/Java/"/>
    
    <category term="MySQL" scheme="https://coffeelize.top/tags/MySQL/"/>
    
    <category term="MaBatis" scheme="https://coffeelize.top/tags/MaBatis/"/>
    
  </entry>
  
  <entry>
    <title>Intellij 注释不顶格</title>
    <link href="https://coffeelize.top/posts/b35c9eb3.html"/>
    <id>https://coffeelize.top/posts/b35c9eb3.html</id>
    <published>2022-12-02T07:53:20.000Z</published>
    <updated>2022-12-03T15:32:49.174Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/aiming66/article/details/117284406">idea 注释不顶格（不在行首）_aiming66 的博客 - CSDN 博客_idea 注释不定格</a></li></ol><span id="more"></span><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>新建的注释，默认顶格创建，好丑<br><img data-src="https://s2.loli.net/2022/12/03/XHjUCin9pDhlY3d.png" alt="01-注释默认为定格书写.png"></p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>IDE 中进行设置，取消 <code>将行注释在第一列</code> 的勾，最好把 <code>注释快在第一列</code> 前面的勾也去掉；对于其他文件，比如 xml 文件也是这个操作<br><img data-src="https://s2.loli.net/2022/12/03/JIzXpMjnPAYLvth.png" alt="02-取消注释顶格书写.png"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/aiming66/article/details/117284406&quot;&gt;idea 注释不顶格（不在行首）_aiming66 的博客 - CSDN 博客_idea 注释不定格&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://coffeelize.top/tags/Java/"/>
    
    <category term="Intellij" scheme="https://coffeelize.top/tags/Intellij/"/>
    
  </entry>
  
  <entry>
    <title>MaBatis 代理简明笔记</title>
    <link href="https://coffeelize.top/posts/5282e219.html"/>
    <id>https://coffeelize.top/posts/5282e219.html</id>
    <published>2022-12-02T07:02:20.000Z</published>
    <updated>2022-12-11T13:38:28.404Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>XML 配置文件中的各标签应该遵循下面列表中的顺序：</p><span id="more"></span><p><img data-src="https://s2.loli.net/2022/12/11/oQZxlWidYv8csn6.png" alt="01-MaBatis代理开发-标签.png"></p><p>PS：可参考官方说明：<a href="https://mybatis.org/mybatis-3/zh/configuration.html#environments">mybatis 官方 XML 配置</a></p><h3 id="环境配置（environments）"><a href="#环境配置（environments）" class="headerlink" title="环境配置（environments）"></a>环境配置（environments）</h3><p>environments：配置数据库连接环境信息，可以配置多个 environment。通过 default 属性切换不同的 environment</p><p>比如到后期，我们还可以创建多个环境（多个数据源），根据 id 直接可以快速的更换数据源，方便用来做测试等</p><p><img data-src="https://s2.loli.net/2022/12/11/PjLSCxczuhZs4Op.png" alt="02-数据库的连接信息写在environment标签中.png"></p><h3 id="类型别名（typeAliases）"><a href="#类型别名（typeAliases）" class="headerlink" title="类型别名（typeAliases）"></a>类型别名（typeAliases）</h3><p>类型别名，比如在 mybatis 配置文件中</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.itheima.pojo"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>之后，在 UserMapper 配置文件中，结果返回类型中的值 <code>com.itheima.pojo.User</code> 就可以简写成 user 或 User 了（注：不区分大小写）</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"com.itheima.pojo.User"</span>&gt;</span>  </span><br><span class="line">    select * from tb_user;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--可简写为--&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span>  </span><br><span class="line">    select * from tb_user;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;XML 配置文件中的各标签应该遵循下面列表中的顺序：&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://coffeelize.top/tags/Java/"/>
    
    <category term="MySQL" scheme="https://coffeelize.top/tags/MySQL/"/>
    
    <category term="MaBatis" scheme="https://coffeelize.top/tags/MaBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis 简明笔记</title>
    <link href="https://coffeelize.top/posts/e245371b.html"/>
    <id>https://coffeelize.top/posts/e245371b.html</id>
    <published>2022-12-02T07:02:20.000Z</published>
    <updated>2022-12-11T13:38:28.404Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="什么是-MyBatis"><a href="#什么是-MyBatis" class="headerlink" title="什么是 MyBatis"></a>什么是 MyBatis</h2><ul><li>MyBatis 是一款优秀的 <strong>持久层框架</strong>，用于简化 JDBC 开发</li></ul><span id="more"></span><p>持久层</p><ul><li>负责将数据保存到数据库的那一层代码</li><li> JavaEE 三层结构：表现层（页面展示）、业务层（逻辑处理）、持久层（数据库相关）</li></ul><p>框架</p><ul><li>框架是一个 <strong>半成品</strong> 软件，是一套可重用的、通用的、软件基础代码模型</li><li>在框架的基础之上构建编写更加高效、规范、通用、可扩展</li></ul><h2 id="为什么-MyBatis"><a href="#为什么-MyBatis" class="headerlink" title="为什么 MyBatis"></a>为什么 MyBatis</h2><h3 id="JDBC-缺点"><a href="#JDBC-缺点" class="headerlink" title="JDBC 缺点"></a>JDBC 缺点</h3><ol><li>硬编码问题</li></ol><p>比如注册驱动，获取连接对象时，需要通过变量接收这些字符串，都是写死在代码中的，但是后期可能会对这些字符串进行修改</p><ol start="2"><li>操作繁琐</li></ol><p>对于处理对象中的问号占位符，手动封装结果集，都需要手动设置参数，操作繁琐</p><h3 id="MyBatis-简化"><a href="#MyBatis-简化" class="headerlink" title="MyBatis 简化"></a>MyBatis 简化</h3><ol><li>硬编码问题 ⇒ 通过配置文件解决</li></ol><p>比如字符串硬编码问题，将字符串写到 <code>mybatis-config.xml</code> 文件中；将 mysql 语句写到 <code>UserMapper.xml</code> 文件中</p><ol start="2"><li>操作繁琐 ⇒ 自动完成</li></ol><p>MaBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作</p><h2 id="MyBatis-快速入门"><a href="#MyBatis-快速入门" class="headerlink" title="MyBatis 快速入门"></a>MyBatis 快速入门</h2><h3 id="案例1：查询-user-表中的所有数据"><a href="#案例1：查询-user-表中的所有数据" class="headerlink" title="案例1：查询 user 表中的所有数据"></a>案例 1：查询 user 表中的所有数据</h3><ol><li>创建 user 表，添加数据</li><li>创建模块，导入坐标</li><li>创建 MyBatis 核心配置文件⇒替换连接信息，解决硬编码问题</li><li>创建 SQL 映射文件⇒统一管理 SQL 语句，解决硬编码问题<ol><li>在项目下新建 mapper 包，创建 UserMapper 接口</li><li>在 resources 资源文件夹下，创建 UserMapper.xml 配置文件</li></ol></li><li> Demo 主程序<ol><li>定义 POJO 类</li><li>加载核心配置文件，获取 SqlSessionFactory 对象</li><li>获取 SqlSession 对象，执行 SQL 语句</li><li>释放资源</li></ol></li></ol><h4 id="1、创建-user-表，添加数据"><a href="#1、创建-user-表，添加数据" class="headerlink" title="1、创建 user 表，添加数据"></a>1、创建 user 表，添加数据</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database mybatis;</span><br><span class="line">use mybatis;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tb_user;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user(</span><br><span class="line"> id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line"> username <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"> password <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"> gender <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line"> addr <span class="type">varchar</span>(<span class="number">30</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'zhangsan'</span>, <span class="string">'123'</span>, <span class="string">'男'</span>, <span class="string">'北京'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'李四'</span>, <span class="string">'234'</span>, <span class="string">'女'</span>, <span class="string">'天津'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">'王五'</span>, <span class="string">'11'</span>, <span class="string">'男'</span>, <span class="string">'西安'</span>);</span><br></pre></td></tr></tbody></table></figure><h4 id="2、创建模块，导入坐标"><a href="#2、创建模块，导入坐标" class="headerlink" title="2、创建模块，导入坐标"></a>2、创建模块，导入坐标</h4><ol><li>新建空项目</li><li>点击项目结构，模块，新建模块，选择 Maven 项目</li><li>在 pom.xml 文件中导入如下坐标 </li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--加载mysql驱动--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3、创建-MyBatis-核心配置文件"><a href="#3、创建-MyBatis-核心配置文件" class="headerlink" title="3、创建 MyBatis 核心配置文件"></a>3、创建 MyBatis 核心配置文件</h4><ol><li>在 resources 文件下新建 <code>mybatis-config.xml</code> 文件，将以下内容粘贴到 xml 文件中。注：代码模板可从 <a href="https://mybatis.org/mybatis-3/zh/getting-started.html#%E4%BB%8E-xml-%E4%B8%AD%E6%9E%84%E5%BB%BA-sqlsessionfactory">mybatis 官方入门</a>复制</li></ol><p>注意修改数据库的连接信息</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"https://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--数据库的连接信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver "</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///mybatis?useSSL=false"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载sql映射文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="4、创建-SQL-映射文件及接口"><a href="#4、创建-SQL-映射文件及接口" class="headerlink" title="4、创建 SQL 映射文件及接口"></a>4、创建 SQL 映射文件及接口</h4><ol><li>在 mapper 包下新建 UserMapper 接口 </li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>{</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//User selectById(int id);</span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>在 resources 文件夹下，新建 UserMapper.xml 配置文件 </li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"https://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    namespace：名称空间</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--查询标签，id为这条SQL语句的唯一标识，resultType为返回结果类（POJO类）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"com.itheima.pojo.User"</span>&gt;</span></span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>注：此处的代码模板也可以官方的实例模板中粘贴：<a href="https://mybatis.org/mybatis-3/zh/getting-started.html#%E4%BB%8E-xml-%E4%B8%AD%E6%9E%84%E5%BB%BA-sqlsessionfactory">探究已映射的 SQL 语句</a></p><h4 id="5、Demo主程序"><a href="#5、Demo主程序" class="headerlink" title="5、Demo主程序"></a>5、Demo 主程序</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//1.加载mybatis的核心配置文件，获取SqlSessionFactory</span></span><br><span class="line">        String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取SqlSession对象，用它来执行SQL</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.执行SQl语句,名称空间.ID,返回list集合</span></span><br><span class="line">        List&lt;User&gt; users = sqlSession.selectList(<span class="string">"test.selectAll"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(users);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是-MyBatis&quot;&gt;&lt;a href=&quot;#什么是-MyBatis&quot; class=&quot;headerlink&quot; title=&quot;什么是 MyBatis&quot;&gt;&lt;/a&gt;什么是 MyBatis&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;MyBatis 是一款优秀的 &lt;strong&gt;持久层框架&lt;/strong&gt;，用于简化 JDBC 开发&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://coffeelize.top/tags/Java/"/>
    
    <category term="MyBatis" scheme="https://coffeelize.top/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>IDEA 中使用 Tomcat</title>
    <link href="https://coffeelize.top/posts/1d1f95b6.html"/>
    <id>https://coffeelize.top/posts/1d1f95b6.html</id>
    <published>2022-12-02T03:47:30.000Z</published>
    <updated>2022-12-05T09:47:38.605Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>这里主要介绍通过插件的方式运行 Tomcat</p><span id="more"></span><h4 id="一、集成本地-Tomcat"><a href="#一、集成本地-Tomcat" class="headerlink" title="一、集成本地 Tomcat"></a>一、集成本地 Tomcat</h4><p>将本地的 Tomcat 集成到 IDEA 中，这里网上参考资料较多不再介绍</p><h4 id="二、通过插件运行-Tomcat"><a href="#二、通过插件运行-Tomcat" class="headerlink" title="二、通过插件运行 Tomcat"></a>二、通过插件运行 Tomcat</h4><ol><li>在 pom.xml 中添加 tomcat 插件</li></ol><p>Alt+Enter 导入插件模板<br><img data-src="https://s2.loli.net/2022/12/05/JXguRNAT7VEqe6z.png" alt="01-快捷键导入插件模板.png"></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--Tomcat的插件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>安装 Maven Helper 插件</li></ol><p>插件市场搜索 Maven Helper 安装插件<br><img data-src="https://s2.loli.net/2022/12/05/PF3gHkYvERVqzSm.png" alt="02-插件市场安装Maven Helper插件.png"></p><ol start="3"><li>以上两步操作完成之后，选中项目，右键 –&gt;Run Maven–&gt;tomcat7:run 启动项目</li></ol><p><img data-src="https://s2.loli.net/2022/12/05/Mn9jU6RADvyxPVF.png" alt="03-通过插件运行Tomcat.png"></p><ol start="4"><li>修改 tomcat 的端口和路径 (非必要设置)</li></ol><p>说明：如果没有配置端口号和路径的话，默认端口号是 8080，默认的访问路径是 <code>/+项目(或模块)名称</code></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--Tomcat的插件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span> <span class="comment">&lt;!--项目运行端口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span> <span class="comment">&lt;!--项目访问路径--&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>缺点：通过插件的方式使用 Tomcat，插件目前只支持 tomcat7 的版本</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这里主要介绍通过插件的方式运行 Tomcat&lt;/p&gt;</summary>
    
    
    
    
    <category term="Intellij" scheme="https://coffeelize.top/tags/Intellij/"/>
    
    <category term="Tomcat" scheme="https://coffeelize.top/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Maven 基础</title>
    <link href="https://coffeelize.top/posts/195cf5d1.html"/>
    <id>https://coffeelize.top/posts/195cf5d1.html</id>
    <published>2022-12-01T12:59:30.000Z</published>
    <updated>2022-12-03T15:32:49.175Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="Maven主要功能"><a href="#Maven主要功能" class="headerlink" title="Maven主要功能"></a>Maven 主要功能</h3><p>Maven 是专门用于管理和构建 Java 项目的工具，它的主要功能有：</p><ul><li>提供了一套标准化的项目结构</li><li>提供了一套标准化的构建流程（编译，测试，打包，发布…）</li><li>提供了一套依赖管理机制</li></ul><span id="more"></span><h3 id="标准化的项目结构"><a href="#标准化的项目结构" class="headerlink" title="标准化的项目结构"></a>标准化的项目结构</h3><p>不同 IDE 之间，项目结构不一样，不通用<br><img data-src="https://s2.loli.net/2022/12/03/2UqzrDVtQE4JFci.png" alt="01-不同IDE之间项目结构不一致.png"></p><p>所有 IDE 使用 Maven 构建的项目结构完全一样，所有 IDE 创建的 Maven 项目都可以通用</p><p>Maven 的项目结构<br><img data-src="https://s2.loli.net/2022/12/03/2yNB1P6z37dorsf.png" alt="02-Maven项目结构.png"></p><h3 id="标准化的构建流程"><a href="#标准化的构建流程" class="headerlink" title="标准化的构建流程"></a>标准化的构建流程</h3><p>源代码⇒编译⇒测试⇒打包⇒发布，Maven 提供了一套简单的命令来完成项目构建</p><h3 id="提供了一套依赖管理机制"><a href="#提供了一套依赖管理机制" class="headerlink" title="提供了一套依赖管理机制"></a>提供了一套依赖管理机制</h3><p>比如 JDBC，需要使用的 MySQL 的驱动包，依赖管理其实就是管理你项目所依赖的第三方资源（Jar 包、依赖），原先我们是如何操作的呢：</p><ol><li>下载 jar 包</li><li>将 jar 包复制到 lib 文件夹里</li><li>右键 jar 包，作为库</li></ol><p>那 Maven 是如何管理依赖的呢</p><ol><li>Maven 使用标准的 <strong>坐标</strong> 配置来管理各种依赖</li><li>只需要简单的配置就可以完成依赖管理<br><img data-src="https://s2.loli.net/2022/12/03/l4dLFEwaQbsVCgB.png" alt="03-通过坐标管理依赖.png"></li></ol><h3 id="Maven-简介"><a href="#Maven-简介" class="headerlink" title="Maven 简介"></a>Maven 简介</h3><p>Apache Maven 是一个项目管理和构建工具，它基于项目对象模型（POM）的概念，通过一小段描述信息来管理项目的构建、报告和文档</p><p>仓库分类</p><ul><li>本地仓库</li><li>中央仓库：有 Maven 团队维护的全球唯一的仓库（免费的开源的 jar 包）</li><li>远程仓库（私服）：一般有公司团队搭建的私有仓库（可以存放一下自己的公司的和一些可能具有版权的 jar 包）</li></ul><p>查找流程：首先会查找本地仓库，如果本地仓库没有，则去中央仓库查找是否有，有的话就会 <strong>自动下载</strong> 到本地仓库</p><h3 id="Maven-的安装和配置"><a href="#Maven-的安装和配置" class="headerlink" title="Maven 的安装和配置"></a>Maven 的安装和配置</h3><ol><li>解压即可安装</li><li>配置环境变量</li></ol><p>下图中的 Maven 文件夹呢就是包含 bin 文件夹的文件夹<br><img data-src="https://s2.loli.net/2022/12/03/PiCMQwYabNHjqLF.png" alt="04-配置Maven环境路径1.png"></p><p>将 bin 目录添加到 Path 目录中<br><img data-src="https://s2.loli.net/2022/12/03/2Lig39VGsfNqd7Q.png" alt="05-配置Maven环境路径2.png"></p><ol start="3"><li>配置本地仓库：修改 conf/setting.xml 中的 <code>&lt;localRepository&gt;</code> 为其指定一个目录</li></ol><p><img data-src="https://s2.loli.net/2022/12/03/XxrK3vGfNjqcA1T.png" alt="06-指定本地仓库路径.png"></p><p>注意：为了保守起见，在 Intellij 中也对 Maven 的本地路径配置一下：)<br><img data-src="https://s2.loli.net/2022/12/03/LjZ7q38RftUCYig.png" alt="12-指定本地仓库路径2.png"></p><ol start="4"><li>配置阿里云私服：修改 conf/setting.xml 中的 <code>&lt;mirrors&gt;</code> 标签，为其添加如下子标签 </li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://s2.loli.net/2022/12/03/XWRcT5hMvpO7Aur.png" alt="07-配置阿里云远程仓库.png"></p><h3 id="Maven-的基本使用"><a href="#Maven-的基本使用" class="headerlink" title="Maven 的基本使用"></a>Maven 的基本使用</h3><h4 id="Maven-的常用命令"><a href="#Maven-的常用命令" class="headerlink" title="Maven 的常用命令"></a>Maven 的常用命令</h4><ul><li>compile：编译</li><li> clean：清理，删除前面编译产生的 target 目录</li><li> test：测试，执行 test 文件夹下的代码</li><li> package：打包</li><li> install：安装</li></ul><p>在含有 pom.xml 文件的目录下，进入 PowerShell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mvn compile</span><br><span class="line">mvn clean</span><br><span class="line">mvn package</span><br><span class="line">mvn tast</span><br><span class="line">mvn install</span><br></pre></td></tr></tbody></table></figure><h3 id="Maven-的生命周期"><a href="#Maven-的生命周期" class="headerlink" title="Maven 的生命周期"></a>Maven 的生命周期</h3><p>Maven 对项目构建的生命周期划分为三套</p><ul><li>clean：清理工作</li><li> default：核心工作，例如编译，测试，打包，安装等</li><li> site：产生报告，发布站点等</li></ul><p><img data-src="https://s2.loli.net/2022/12/03/EQ7SK6XnLpfkJhw.png" alt="08-Maven的生命周期.png"></p><p>比如说执行 install，就会自动执行 compile，但是不会自动执行 clean（因为这是两套不同的生命周期）</p><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><p>使用坐标导入 jar 包</p><ol><li>在 pom.xml 中编写 <code>&lt;dependencies&gt;</code> 标签</li><li>在 <code>&lt;dependencies&gt;</code> 标签中使用 <code>&lt;dependency&gt;</code> 来引入坐标</li><li>定义坐标的 groupId，artifactId，version</li><li> 点击刷新按钮，是坐标生效（或者对 IDE 进行配置，每次变更自动生效）</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入 mysql 驱动jar包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>比如去找 MySQL 的 Maven 配置信息（浏览器搜索 <code>mysql maven</code>），比如从以下网页中找到了：<a href="https://mvnrepository.com/artifact/mysql/mysql-connector-java/6.0.6">MySQL Connector Java</a></p><p>还为我们提供了 maven 需要使用的信息<br><img data-src="https://s2.loli.net/2022/12/03/GWJwatOcH9zZRyj.png" alt="09-从官网获得Maven的配置信息.png"></p><h3 id="快速导入坐标信息到-pom-xml"><a href="#快速导入坐标信息到-pom-xml" class="headerlink" title="快速导入坐标信息到 pom.xml"></a>快速导入坐标信息到 pom.xml</h3><p>如果本地仓库就有相应的 jar 包，那么直接可以通过搜索 jar 包的名字来导入（即可自动导入模板）</p><ol><li>在 pom.xml 文件中，Alt+Insert</li><li> 选择依赖项模板，自动为我们添加模板</li></ol><p><img data-src="https://s2.loli.net/2022/12/03/sifvKxMy7mGwtXg.png" alt="10-快速插入依赖项模板.png"></p><h3 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h3><p>通过设置坐标依赖范围（scope），可以设置对应 jar 包的作用范围：编译环境、测试环境、运行环境</p><p>编译环境：在主工程 java 文件夹中可以使用<br>测试环境：在测试文件夹 test 中可以使用<br>运行环境：</p><p>依赖范围的取值有以下六种，默认值是 compile（其实范围也是最大的）</p><p><img data-src="https://s2.loli.net/2022/12/03/SmNG1MQ5OJzElh6.png" alt="11-依赖范围.png"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Maven主要功能&quot;&gt;&lt;a href=&quot;#Maven主要功能&quot; class=&quot;headerlink&quot; title=&quot;Maven主要功能&quot;&gt;&lt;/a&gt;Maven 主要功能&lt;/h3&gt;&lt;p&gt;Maven 是专门用于管理和构建 Java 项目的工具，它的主要功能有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供了一套标准化的项目结构&lt;/li&gt;
&lt;li&gt;提供了一套标准化的构建流程（编译，测试，打包，发布…）&lt;/li&gt;
&lt;li&gt;提供了一套依赖管理机制&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Maven" scheme="https://coffeelize.top/tags/Maven/"/>
    
    <category term="java" scheme="https://coffeelize.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>IDEA 中创建 Maven Web 项目</title>
    <link href="https://coffeelize.top/posts/7e53c240.html"/>
    <id>https://coffeelize.top/posts/7e53c240.html</id>
    <published>2022-12-01T03:28:30.000Z</published>
    <updated>2022-12-05T09:47:38.606Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="了解-Web-项目结构"><a href="#了解-Web-项目结构" class="headerlink" title="了解 Web 项目结构"></a>了解 Web 项目结构</h3><p>Maven Web 开发中的项目，项目结构如下图所示<br><img data-src="https://s2.loli.net/2022/12/05/vUzchCrRsbK3YFm.png" alt="01.Web项目结构及说明.png"></p><span id="more"></span><h3 id="IDEA-中创建-Maven-Web-项目"><a href="#IDEA-中创建-Maven-Web-项目" class="headerlink" title="IDEA 中创建 Maven Web 项目"></a>IDEA 中创建 Maven Web 项目</h3><p>下面介绍两种方式来创建 Maven Web 项目</p><h4 id="一、使用骨架的方式"><a href="#一、使用骨架的方式" class="headerlink" title="一、使用骨架的方式"></a>一、使用骨架的方式</h4><ol><li>新建模块，选择 Maven Archetype；Archetype 中选择 maven-archetype-webapp，点击创建即可创建 Maven Web 项目</li></ol><p><img data-src="https://s2.loli.net/2022/12/05/mZSa71ywrOfAtq9.png" alt="02-通过Maven骨架的方式新建Maven Web项目.png"></p><ol start="2"><li>删除 pom.xml 文件中多余的坐标</li><li>补齐 java 文件夹</li></ol><p>通过骨架创建的项目，目录结构如图所示。main 文件夹下少了一个 java 文件夹，需要我们手动创建一个 java 的文件夹<br><img data-src="https://s2.loli.net/2022/12/05/ya8sGRgMNCPQ9dc.png" alt="03-缺少Java文件夹.png"></p><h4 id="二、不使用骨架"><a href="#二、不使用骨架" class="headerlink" title="二、不使用骨架"></a>二、不使用骨架</h4><ol><li>新建模块，新建 Maven 项目</li><li>在 pom.xml 文件中设置打包方式为 war 包的打包方式，刷新一下文件（此时项目可变为 Web 项目）</li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>点击项目结构，Facets，选择创建的项目，操作如下图所示</li></ol><p><img data-src="https://s2.loli.net/2022/12/05/SQ1hfu45Gc8MrVz.png" alt="04-添加Web资源目录.png"></p><ol start="4"><li>创建 web.xml 文件，如下图所示（注：创建的时候不补齐路径也是可以的：创建完成之后，将文件直接拖动到 webapp 的路径下就行）<br><img data-src="https://s2.loli.net/2022/12/05/reh957vW8EVqfDH.png" alt="05-创建Web.xml文件.png"></li></ol><p>完整的项目结构如下<br><img data-src="https://s2.loli.net/2022/12/05/ld4WjNbfuRQwcen.png" alt="06-创建成功后项目完整的目录结构.png"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;了解-Web-项目结构&quot;&gt;&lt;a href=&quot;#了解-Web-项目结构&quot; class=&quot;headerlink&quot; title=&quot;了解 Web 项目结构&quot;&gt;&lt;/a&gt;了解 Web 项目结构&lt;/h3&gt;&lt;p&gt;Maven Web 开发中的项目，项目结构如下图所示&lt;br&gt;&lt;img data-src=&quot;https://s2.loli.net/2022/12/05/vUzchCrRsbK3YFm.png&quot; alt=&quot;01.Web项目结构及说明.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://coffeelize.top/tags/Java/"/>
    
    <category term="Intellij" scheme="https://coffeelize.top/tags/Intellij/"/>
    
    <category term="Maven" scheme="https://coffeelize.top/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>VScode 配置 md 模板</title>
    <link href="https://coffeelize.top/posts/4f56e65f.html"/>
    <id>https://coffeelize.top/posts/4f56e65f.html</id>
    <published>2022-11-30T08:38:38.000Z</published>
    <updated>2022-12-01T15:30:57.125Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>需要使用 VScode 来编辑 md 文件，并且希望每次在创建 md 文档时，都能够自动补全 YAML 文件信息</p><span id="more"></span><h3 id="配置-setting-json-文件"><a href="#配置-setting-json-文件" class="headerlink" title="配置 setting.json 文件"></a>配置 setting.json 文件</h3><ol><li>Ctrl+Shift+P，搜索 setting，选择 <code>首选项：打开用户设置 (json)</code></li><li>在这给文件中添加如下代码 </li></ol><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"[markdown]"</span>:  {  </span><br><span class="line">    <span class="attr">"editor.quickSuggestions"</span>: <span class="literal">true</span>  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以下图片显示的是之前就对 setting.json 文件配置过，找到 markdown 的位置添加上述的那一行代码即可；如果之前没有配置过，只需要将上述的那一串代码全部复制到下图中最大的一对黄括号中即可<br><img data-src="https://s2.loli.net/2022/11/30/4GztnFY2WcTpmJa.png" alt="配置SettingJson.png"></p><h3 id="配置-md-模板"><a href="#配置-md-模板" class="headerlink" title="配置 md 模板"></a>配置 md 模板</h3><p><img data-src="https://s2.loli.net/2022/11/30/vV6rAHzYCo8EZk3.png" alt="01-VScode配置用户代码片段.png"></p><ol><li>Ctrl+Shift+P，搜索 snippets，选则 <code>配置用户代码片段</code>，再选择 <code>markdown</code></li><li>将一下代码复制进去保存</li><li>新建 md 文档之后，输入 <code>log</code> 敲 tab 即可自动补全配置好的模板 </li></ol><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line"> <span class="comment">// Place your snippets for markdown here. Each snippet is defined under a snippet name and has a prefix, body and</span></span><br><span class="line"> <span class="comment">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span></span><br><span class="line"> <span class="comment">// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the</span></span><br><span class="line"> <span class="comment">// same ids are connected.</span></span><br><span class="line"> <span class="comment">// Example:</span></span><br><span class="line"> <span class="comment">// 联想时显示的文字内容</span></span><br><span class="line"> <span class="attr">"create blog"</span>: {</span><br><span class="line">   <span class="attr">"prefix"</span>: <span class="string">"log"</span>, <span class="comment">// 输入log，即显示模板提示</span></span><br><span class="line">   <span class="attr">"body"</span>: [</span><br><span class="line">  <span class="comment">// body里是模板内容</span></span><br><span class="line">  <span class="string">"---"</span>,</span><br><span class="line">  <span class="string">"title: $1"</span>, <span class="comment">// $1表示生成模板后，光标最先在此位置</span></span><br><span class="line">  <span class="string">"date: $2"</span>, <span class="comment">// $2表示，在$1处输入完成后，按tab键，光标便跳转到这里，以此类推</span></span><br><span class="line">  <span class="string">"tags:"</span>,</span><br><span class="line">  <span class="string">"  - $3"</span>,</span><br><span class="line">  <span class="string">"---"</span>,</span><br><span class="line">  <span class="string">""</span>,</span><br><span class="line">   ],</span><br><span class="line">   <span class="attr">"description"</span>: <span class="string">"blog模板"</span></span><br><span class="line"> }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>个人博客：<a href="http://allanhao.com/2022/07/17/2022-07-17-vscode-markdown/">VSCode 配置 Markdown 模板 | AllanHao</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;需要使用 VScode 来编辑 md 文件，并且希望每次在创建 md 文档时，都能够自动补全 YAML 文件信息&lt;/p&gt;</summary>
    
    
    
    
    <category term="markdown" scheme="https://coffeelize.top/tags/markdown/"/>
    
    <category term="VScode" scheme="https://coffeelize.top/tags/VScode/"/>
    
  </entry>
  
  <entry>
    <title>Visio 的一些科研绘图技巧</title>
    <link href="https://coffeelize.top/posts/659137c6.html"/>
    <id>https://coffeelize.top/posts/659137c6.html</id>
    <published>2022-11-30T08:06:40.000Z</published>
    <updated>2022-12-03T15:32:49.175Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="导出高清图片"><a href="#导出高清图片" class="headerlink" title="导出高清图片"></a>导出高清图片</h3><p>导出图片时的关键设置</p><ol><li>颜色格式设置为 256 位</li><li>分辨率设置为打印机模式</li></ol><span id="more"></span><h3 id="绘制圆角箭头"><a href="#绘制圆角箭头" class="headerlink" title="绘制圆角箭头"></a>绘制圆角箭头</h3><p>有时候直接使用直线工具绘制箭头比自带的箭头工具好用得多，一下图片中演示的就是使用直线工具来绘制箭头<br><img data-src="https://s2.loli.net/2022/11/30/Ph3jGZ1o5XQbta2.gif" alt="Visio绘制圆角箭头.gif"></p><h3 id="格式刷的应用"><a href="#格式刷的应用" class="headerlink" title="格式刷的应用"></a>格式刷的应用</h3><p>比下图所示，箭头可以通过格式化统一成一致的样式<br><img data-src="https://s2.loli.net/2022/11/30/FsupNOYVwTB35d1.gif" alt="Visio使用格式刷绘制箭头.gif"></p><h3 id="粘贴到-word-中白边太宽"><a href="#粘贴到-word-中白边太宽" class="headerlink" title="粘贴到 word 中白边太宽"></a>粘贴到 word 中白边太宽</h3><p>将 Visio 图直接粘贴到 Word 中时，可能会遇到 Visio 图片显示不全的情况。word 中双击这个 Visio 对象，可以按住 control/Ctrl 键，拖动画布边缘，调整画布尺寸至合适大小，鼠标离开 Visio 对象编辑区域单击即可自动保存</p><h3 id="visio-取消首字母自动大写"><a href="#visio-取消首字母自动大写" class="headerlink" title="visio 取消首字母自动大写"></a>visio 取消首字母自动大写</h3><p><img data-src="https://s2.loli.net/2022/11/30/TMo2lqfrWc8nEDO.png" alt="Visio取消首字母自动大写.png"></p><h3 id="两形状之间直的连接线"><a href="#两形状之间直的连接线" class="headerlink" title="两形状之间直的连接线"></a>两形状之间直的连接线</h3><p>这种情况有两种解决办法：</p><ol><li>微调：选中下面的矩形通过 shift + 方向键 微调来完成</li><li>对齐：选中整个图形，选择排列，选中水平居中进行调整即可</li><li>对不齐的时候，试试按着 Alt 键拖动形状试试：)</li></ol><h3 id="绘图时保证图片与文字大小协调"><a href="#绘图时保证图片与文字大小协调" class="headerlink" title="绘图时保证图片与文字大小协调"></a>绘图时保证图片与文字大小协调</h3><ol><li>首先输入 8-12 号的字体，插入图片调整至和文字协调的大小（图片尽可能是由大图调整至小图），也就是说图片的大小按照标准的文字大小进行调整</li><li>最好提前想好这张图在投稿时是打算单栏排版还是双栏排版，或者两个排版方式各导出一张</li><li>图片更新时，最好在同一个 Visio 文件中新建页面，在新建的页面中对图片进行编辑，保存旧版本图片</li></ol><h3 id="辅助线"><a href="#辅助线" class="headerlink" title="辅助线"></a>辅助线</h3><p>从标尺处拖拉可添加辅助线</p><h3 id="连接线与线条"><a href="#连接线与线条" class="headerlink" title="连接线与线条"></a>连接线与线条</h3><p>能用线条的地方尽量不要用连接线。连接线通常用来连接两个形状，但是这两个形状位置或大小发生变化或者整张大图的比例需要调整时，这个连接线就会自动更着变化，非常容易导致排版问题。连续画几条线条，这几条线条会自动连接在一起，并且在属性中也可以设置圆角，箭头等属性，这样已经完全可以实现连接线的功能了，所以，尽可能不要再绘图中使用连接线。</p><h3 id="编辑Xmind导出的形状"><a href="#编辑Xmind导出的形状" class="headerlink" title="编辑Xmind导出的形状"></a>编辑 Xmind 导出的形状</h3><ol><li>Xmind 导出形状为 SVG 格式</li><li> Visio 自带 SVG 格式编辑功能</li><li>还是矢量图格式的，妙啊！</li></ol><h3 id="Visio2PPT"><a href="#Visio2PPT" class="headerlink" title="Visio2PPT"></a>Visio2PPT</h3><p>直接框选复制到 ppt 当中，会自动转换为 emf 格式的矢量图片，而且背景是透明的哦，不会受 vision 背景底图的影响</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;导出高清图片&quot;&gt;&lt;a href=&quot;#导出高清图片&quot; class=&quot;headerlink&quot; title=&quot;导出高清图片&quot;&gt;&lt;/a&gt;导出高清图片&lt;/h3&gt;&lt;p&gt;导出图片时的关键设置&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;颜色格式设置为 256 位&lt;/li&gt;
&lt;li&gt;分辨率设置为打印机模式&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="绘图" scheme="https://coffeelize.top/tags/%E7%BB%98%E5%9B%BE/"/>
    
    <category term="Visio" scheme="https://coffeelize.top/tags/Visio/"/>
    
    <category term="科研" scheme="https://coffeelize.top/tags/%E7%A7%91%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>Interllij 自动补齐 foreach</title>
    <link href="https://coffeelize.top/posts/2aafebc1.html"/>
    <id>https://coffeelize.top/posts/2aafebc1.html</id>
    <published>2022-11-29T13:37:23.000Z</published>
    <updated>2022-11-29T14:16:04.757Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>输入 for，选择 <code>foreach</code> 敲 Tab，intellij 为我们自动补齐如下代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (:  </span><br><span class="line">     ) {  </span><br><span class="line">      </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>能不能够在智能一些呢，比如根据上面的代码自动补齐更多的信息</p><p>敲入 <code>iter</code> Tab 键 补齐即可</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Annotation[] annotations = clazz.getAnnotations();  </span><br><span class="line"><span class="comment">//以下为敲入iter自动补齐的内容</span></span><br><span class="line"><span class="keyword">for</span> (Annotation annotation : annotations) {  </span><br><span class="line">      </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
  </entry>
  
</feed>
