<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>智朋的个人博客</title>
  <icon>https://coffeelize.top/images/cat-avatar.jpg</icon>
  <subtitle>道阻且长，行则将至</subtitle>
  <link href="https://coffeelize.top/atom.xml" rel="self"/>
  
  <link href="https://coffeelize.top/"/>
  <updated>2022-12-23T04:01:02.413Z</updated>
  <id>https://coffeelize.top/</id>
  
  <author>
    <name>coffeelize</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>单元测试 &amp; 日志简明笔记</title>
    <link href="https://coffeelize.top/posts/a306b413.html"/>
    <id>https://coffeelize.top/posts/a306b413.html</id>
    <published>2022-12-21T09:32:30.000Z</published>
    <updated>2022-12-23T04:01:02.413Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>JUnit 是一个 Java 编程语言的单元测试工具。JUnit 是一个非常重要的测试工具</p><p>JUnit 在一个条中显示进度。如果运行良好则是绿色；如果运行失败，则变成红色</p><span id="more"></span><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li>将 junit 的 jar 包导入到工程中 junit-4.9.jar</li><li> 编写测试方法该测试方法必须是公共的无参数无返回值的非静态方法</li><li>在测试方法上使用 @Test 注解标注该方法是一个测试方法</li><li>选中测试方法右键通过 junit 运行该方法</li></ol><p>代码示例</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JunitDemo1</span> </span>{</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="number">2</span> / <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = a + b;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="相关注解"><a href="#相关注解" class="headerlink" title="相关注解"></a>相关注解</h3><ul><li>@Test：表示测试该方法</li><li> @Before：在测试的方法前运行</li><li> @After：在测试的方法后运行</li></ul><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>程序中的日志可以用来记录程序在运行的时候点点滴滴，并可以进行永久存储</p><p>日志与输出语句的区别</p><table><thead><tr><th></th><th>输出语句</th><th>日志技术</th></tr></thead><tbody><tr><td>取消日志</td><td>需要修改代码，灵活性比较差</td><td>不需要修改代码，灵活性比较好</td></tr><tr><td>输出位置</td><td>只能是控制台</td><td>可以将日志信息写入到文件或者数据库中</td></tr><tr><td>多线程</td><td>和业务代码处于一个线程中</td><td>多线程方式记录日志，不影响业务代码的性能</td></tr></tbody></table><h3 id="日志体系结构"><a href="#日志体系结构" class="headerlink" title="日志体系结构"></a>日志体系结构</h3><p><img data-src="https://s2.loli.net/2022/12/21/AHZCuKrhD3FgW87.png" alt="01-日志的体系结构.png"></p><h3 id="Log4J"><a href="#Log4J" class="headerlink" title="Log4J"></a>Log4J</h3><p>Log4j 是 Apache 的一个开源项目；通过使用 Log4j，我们可以控制日志信息输送的目的地是控制台、文件等位置，我们也可以控制每一条日志的输出格式，通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程</p><p>最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码</p><h3 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h3><ol><li>导入 log4j 的相关 jar 包</li><li>编写 log4j 配置文件</li><li>在代码中获取日志的对象</li><li>按照级别设置记录日志信息</li></ol><h4 id="1、properties-文件"><a href="#1、properties-文件" class="headerlink" title="1、properties 文件"></a>1、properties 文件</h4><p>注意：配置文件的文件名必须是 <code>log4j.properties</code>，放在 src 目录下</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">//</span> <span class="string">log4j的配置文件,名字为log4j.properties, 放在src根目录下</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">debug,my,fileAppender</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### direct log messages to my ###</span></span><br><span class="line"><span class="meta">log4j.appender.my</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.my.ImmediateFlush</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.my.Target</span>=<span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.my.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.my.layout.ConversionPattern</span>=<span class="string">%d %t %5p %c{1}:%L - %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># fileAppender演示</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.ImmediateFlush</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.Append</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.File</span>=<span class="string">D:/log4j-log.log</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.layout.ConversionPattern</span>=<span class="string">%d %5p %c{1}:%L - %m%n</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2、测试类"><a href="#2、测试类" class="headerlink" title="2、测试类"></a>2、测试类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log4JTest01</span> </span>{</span><br><span class="line">    <span class="comment">//方式1：使用log4j的api来获取日志的对象</span></span><br><span class="line">    <span class="comment">//弊端：如果以后我们更换日志的实现类，那么下面的代码就需要跟着改</span></span><br><span class="line">    <span class="comment">//不推荐使用</span></span><br><span class="line">    <span class="comment">//private static final Logger LOGGER = Logger.getLogger(Log4JTest01.class);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式2：使用slf4j里面的api来获取日志的对象</span></span><br><span class="line">    <span class="comment">//好处：如果以后我们更换日志的实现类，那么下面的代码不需要跟着修改</span></span><br><span class="line">    <span class="comment">//推荐使用（在代码中获取日志的对象）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Log4JTest01.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//1.导入jar包</span></span><br><span class="line">        <span class="comment">//2.编写配置文件</span></span><br><span class="line">        <span class="comment">//3.在代码中获取日志的对象</span></span><br><span class="line">        <span class="comment">//4.按照日志级别设置日志信息</span></span><br><span class="line">        LOGGER.debug(<span class="string">"debug级别的日志"</span>);</span><br><span class="line">        LOGGER.info(<span class="string">"info级别的日志"</span>);</span><br><span class="line">        LOGGER.warn(<span class="string">"warn级别的日志"</span>);</span><br><span class="line">        LOGGER.error(<span class="string">"error级别的日志"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="配置文件详解"><a href="#配置文件详解" class="headerlink" title="配置文件详解"></a>配置文件详解</h4><p>三个核心</p><ul><li>Loggers (记录器) ：日志的级别<ul><li> Loggers 组件在此系统中常见的五个级别：DEBUG、INFO、WARN、ERROR 和 FATAL</li><li>DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</li><li>Log4j 有一个规则：只输出级别不低于设定级别的日志信息</li></ul></li><li> Appenders (输出源)：日志要输出的地方<ul><li>把日志输出到不同的地方，如控制台（Console）、文件（Files）等</li><li> org.apache.log4j.ConsoleAppender（控制台）</li><li>org.apache.log4j.FileAppender（文件）</li></ul></li><li>Layouts (布局)：日志输出的格式<ul><li> org.apache.log4j.PatternLayout（可以灵活地指定布局模式，这个比较常用）</li><li>org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）</li><li>org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等信息）</li></ul></li></ul><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">//</span> <span class="string">log4j的配置文件,名字为log4j.properties, 放在src根目录下</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">debug,my,fileAppender</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### direct log messages to my ###</span></span><br><span class="line"><span class="meta">log4j.appender.my</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.my.ImmediateFlush</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.my.Target</span>=<span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.my.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.my.layout.ConversionPattern</span>=<span class="string">%d %t %5p %c{1}:%L - %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># fileAppender演示</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.ImmediateFlush</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.Append</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.File</span>=<span class="string">D:/log4j-log.log</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.layout.ConversionPattern</span>=<span class="string">%d %5p %c{1}:%L - %m%n</span></span><br></pre></td></tr></tbody></table></figure><p>1、配置根 Logger</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">日志级别，appenderName1，appenderName2，…</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 日志级别：OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者自定义的级别</span></span><br><span class="line"><span class="comment"># appenderName1：就是指定日志信息要输出到哪里。可以同时指定多个输出目的地，用逗号隔开</span></span><br></pre></td></tr></tbody></table></figure><p>2、ConsoleAppender 常用的选项</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.appender.my</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.my.ImmediateFlush</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.my.Target</span>=<span class="string">System.out</span></span><br></pre></td></tr></tbody></table></figure><ul><li>第一句表示往控制台输出</li><li>第二句表示所有消息都会被立即输出，设为 false 则不输出，默认值是 true</li><li> 第三句默认值是 <code>System.out</code><ul><li>比如 <code>System.err</code> 打印出来是红色的</li></ul></li></ul><p>3、FileAppender 常用的选项</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.appender.fileAppender</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.ImmediateFlush</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.Append</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.File</span>=<span class="string">D:/log4j-log.log</span></span><br></pre></td></tr></tbody></table></figure><ul><li>第一句：往文件中输出</li><li>第二句：表示所有消息都会被立即输出。设为 false 则不输出，默认值是 true</li><li> 第三句：true 表示将消息添加到指定文件中，原来的消息不覆盖，默认值是 true</li><li> 第四句：指定消息输出到某个文件中</li></ul><p>4、PatternLayout 常用的选项</p><ul><li>org.apache.log4j.PatternLayout（可以灵活地指定布局模式，最常用）</li><li>org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）</li><li>org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等信息）</li></ul><p>这里我们只讲第一种：PatternLayout 的常用选项</p><p><img data-src="https://s2.loli.net/2022/12/21/c8e5sgo1wVO6LWk.png" alt="02-日志中PatternLayout的常用选项.png"></p><h3 id="在项目中的应用"><a href="#在项目中的应用" class="headerlink" title="在项目中的应用"></a>在项目中的应用</h3><ol><li>导入相关的依赖</li><li>将资料中的 properties 配置文件复制到 src 目录下</li><li>在代码中获取日志的对象</li><li>按照级别设置记录日志信息</li></ol><p>代码实现</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = "/servlet/loginservlet")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">implements</span> <span class="title">HttpServlet</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取日志的对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(LoginServlet.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpRequest httpRequest, HttpResponse httpResponse)</span> </span>{</span><br><span class="line">       <span class="comment">//处理</span></span><br><span class="line">        System.out.println(<span class="string">"LoginServlet处理了登录请求"</span>);</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">"现在已经处理了登录请求，准备给浏览器响应"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//响应</span></span><br><span class="line">        httpResponse.setContentTpye(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        httpResponse.write(<span class="string">"登录成功"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注意：Logger 对象是 slf4j (org.slf4jh) 中的，不要导错包了</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;单元测试&quot;&gt;&lt;a href=&quot;#单元测试&quot; class=&quot;headerlink&quot; title=&quot;单元测试&quot;&gt;&lt;/a&gt;单元测试&lt;/h2&gt;&lt;p&gt;JUnit 是一个 Java 编程语言的单元测试工具。JUnit 是一个非常重要的测试工具&lt;/p&gt;
&lt;p&gt;JUnit 在一个条中显示进度。如果运行良好则是绿色；如果运行失败，则变成红色&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://coffeelize.top/tags/Java/"/>
    
    <category term="JUnit" scheme="https://coffeelize.top/tags/JUnit/"/>
    
    <category term="Log4J" scheme="https://coffeelize.top/tags/Log4J/"/>
    
  </entry>
  
  <entry>
    <title>反射简明笔记</title>
    <link href="https://coffeelize.top/posts/507300e0.html"/>
    <id>https://coffeelize.top/posts/507300e0.html</id>
    <published>2022-12-20T09:13:20.000Z</published>
    <updated>2022-12-23T04:48:51.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="反射的概述"><a href="#反射的概述" class="headerlink" title="反射的概述"></a>反射的概述</h3><p>反射机制</p><ul><li>是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；</li><li>对于任意一个对象，都能够调用它的任意属性和方法；</li><li>这种动态获取信息以及动态调用对象方法的功能称为 Java 语言的反射机制。<span id="more"></span><img data-src="https://s2.loli.net/2022/12/21/qgzEGN9v8lxnTfB.png" alt="01-用子类创建对象与常规创建对象的比较.png"></li></ul><p>总结下来</p><ul><li>利用反射可以无视修饰符获取类里面所有的属性和方法</li><li>先获取配置文件中的信息，动态获取（如从配置文件中的读取）信息并创建对象和调用方法</li></ul><h3 id="获取-Class-对象"><a href="#获取-Class-对象" class="headerlink" title="获取 Class 对象"></a>获取 Class 对象</h3><p>调用一个类中的方法（如上图所示）</p><ol><li>创建这个类的对象</li><li>用对象调用方法</li></ol><p>反射去调用一个类中的方法（如上图所示）</p><ol><li>反射方式：创建对象</li><li>反射方式：调用方法<br><img data-src="https://s2.loli.net/2022/12/21/jBebitcPmFdsE1z.png" alt="02-利用反射调用类中的方法.png"></li></ol><p>那么现在的问题就是如何获取这个 Class 对象<br><img data-src="https://s2.loli.net/2022/12/21/kfwiNhrTy3elumV.png" alt="03-获取Class对象的三种方式.png"></p><h4 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"学生在学习"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="三种获取-Class-对象方式"><a href="#三种获取-Class-对象方式" class="headerlink" title="三种获取 Class 对象方式"></a>三种获取 Class 对象方式</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo1</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>{</span><br><span class="line">        <span class="comment">//1.Class类中的静态方法forName("全类名")</span></span><br><span class="line">        <span class="comment">//全类名:包名 + 类名</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect2.Student"</span>);</span><br><span class="line">        System.out.println(clazz);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过class属性来获取</span></span><br><span class="line">        Class clazz2 = Student.class;</span><br><span class="line">        System.out.println(clazz2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.利用对象的getClass方法来获取class对象</span></span><br><span class="line">        <span class="comment">//getClass方法是定义在Object类中.</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        Class clazz3 = s.getClass();</span><br><span class="line">        System.out.println(clazz3);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//class对象是唯一的</span></span><br><span class="line">        System.out.println(clazz == clazz2);</span><br><span class="line">        System.out.println(clazz2 == clazz3);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="反射获取-Class-类的对象"><a href="#反射获取-Class-类的对象" class="headerlink" title="反射获取 Class 类的对象"></a>反射获取 Class 类的对象</h3><p>Class 类的对象包括：成员变量对象、构造器对象及成员方法对象</p><p><img data-src="https://s2.loli.net/2022/12/21/ychfZ7kBYgdG9wb.png" alt="04-Class对象中的3类对象.png"></p><h4 id="数据准备-1"><a href="#数据准备-1" class="headerlink" title="数据准备"></a>数据准备</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有的有参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Student</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"name的值为:"</span> + name);</span><br><span class="line">        System.out.println(<span class="string">"private...Student...有参构造方法"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共的无参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"public...Student...无参构造方法"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共的有参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"name的值为:"</span> + name + <span class="string">"age的值为:"</span> + age);</span><br><span class="line">        System.out.println(<span class="string">"public...Student...有参构造方法"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="获取-Constructor-对象"><a href="#获取-Constructor-对象" class="headerlink" title="获取 Constructor 对象"></a>获取 Constructor 对象</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo1</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>{</span><br><span class="line">        <span class="comment">//method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line">        <span class="comment">//method3();</span></span><br><span class="line">        <span class="comment">//method4();</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>{</span><br><span class="line">        <span class="comment">//返回单个构造方法对象</span></span><br><span class="line">        <span class="comment">//1.获取Class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect3.Student"</span>);</span><br><span class="line">        <span class="comment">//获取单个构造方法对象</span></span><br><span class="line">        Constructor constructor = clazz.getDeclaredConstructor(String.class);</span><br><span class="line">        System.out.println(constructor);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>{</span><br><span class="line">        <span class="comment">//返回单个公共构造方法对象</span></span><br><span class="line">        <span class="comment">//1.获取Class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect3.Student"</span>);</span><br><span class="line">        <span class="comment">//小括号中,一定要跟构造方法的形参保持一致</span></span><br><span class="line">        <span class="comment">//获取单个公共构造方法对象</span></span><br><span class="line">        Constructor constructor1 = clazz.getConstructor();</span><br><span class="line">        System.out.println(constructor1);</span><br><span class="line">        <span class="comment">//这里获取有参构造方法</span></span><br><span class="line">        Constructor constructor2 = clazz.getConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(constructor2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为Student类中,没有只有一个int的构造,所以这里会报错.</span></span><br><span class="line">        Constructor constructor3 = clazz.getConstructor(<span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(constructor3);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>{</span><br><span class="line">        <span class="comment">//返回所有构造方法对象的数组</span></span><br><span class="line">        <span class="comment">//1.获取Class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect3.Student"</span>);</span><br><span class="line">  <span class="comment">//2.获取所有构造方法对象的数组</span></span><br><span class="line">        Constructor[] constructors = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) {</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>{</span><br><span class="line">        <span class="comment">//返回所有公共构造方法对象的数组</span></span><br><span class="line">        <span class="comment">//1.获取Class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect3.Student"</span>);</span><br><span class="line">        <span class="comment">//2.获取所有公共构造方法对象的数组</span></span><br><span class="line">        Constructor[] constructors = clazz.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) {</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="Constructor-创建对象"><a href="#Constructor-创建对象" class="headerlink" title="Constructor 创建对象"></a>Constructor 创建对象</h4><p>那么我们获取到的 Class 对象中的构造方法，不就是为了使用它来创建对象嘛，方法如下：</p><ul><li><code>T newInstance(Object…initargs)</code>：根据指定的构造方法创建对象（T 表示返回值类型，此处为创建对来的对象）</li><li><code>setAccessible(boolean flag)</code>：设置为 true，表示取消访问检查（通过获取私有的构造方法来创建对象，如果用反射强行获取并使用，需要临时取消访问检查）</li></ul><p>也就是说，如果构造方法是 public 的，直接使用 newInstance 即可创建对象；如果构造方法是 private 的，那么需要在创建对象之前临时取消访问检查，也就是 <strong>暴力反射</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Student类同上一个示例,这里就不在重复提供了</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo2</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>{</span><br><span class="line">        <span class="comment">//T newInstance(Object... initargs)：根据指定的构造方法创建对象</span></span><br><span class="line">        <span class="comment">//method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line">        <span class="comment">//method3();</span></span><br><span class="line">        <span class="comment">//method4();</span></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException </span>{</span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect3.Student"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取构造方法对象</span></span><br><span class="line">        Constructor constructor = clazz.getConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.利用newInstance创建Student的对象</span></span><br><span class="line">        Student student = (Student) constructor.newInstance(<span class="string">"zhangsan"</span>, <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException </span>{</span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect3.Student"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取构造方法对象</span></span><br><span class="line">        Constructor constructor = clazz.getConstructor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.利用空参来创建Student的对象</span></span><br><span class="line">        Student student = (Student) constructor.newInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException </span>{</span><br><span class="line">        <span class="comment">//method2的简写格式</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect3.Student"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.在Class类中,有一个newInstance方法,可以利用空参直接创建一个对象</span></span><br><span class="line">        Student student = (Student) clazz.newInstance();<span class="comment">//这个方法现在已经过时了,了解一下</span></span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException </span>{</span><br><span class="line">        <span class="comment">//获取一个私有的构造方法并创建对象</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect3.Student"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取一个私有化的构造方法.</span></span><br><span class="line">        Constructor constructor = clazz.getDeclaredConstructor(String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//被private修饰的成员,不能直接使用的</span></span><br><span class="line">        <span class="comment">//如果用反射强行获取并使用,需要临时取消访问检查</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.直接创建对象</span></span><br><span class="line">        Student student = (Student) constructor.newInstance(<span class="string">"zhangsan"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="反射获取成员变量"><a href="#反射获取成员变量" class="headerlink" title="反射获取成员变量"></a>反射获取成员变量</h3><ol><li>获取 Class 对象</li><li>获取 Field 对象</li><li>赋值或者取值</li></ol><h4 id="数据准备-2"><a href="#数据准备-2" class="headerlink" title="数据准备"></a>数据准备</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String name;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;  </span><br><span class="line">    <span class="keyword">public</span> String gender;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money = <span class="number">300</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student{"</span> +  </span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +  </span><br><span class="line">                <span class="string">", age="</span> + age +  </span><br><span class="line">                <span class="string">", gender='"</span> + gender + <span class="string">'\''</span> +  </span><br><span class="line">                <span class="string">", money="</span> + money +  </span><br><span class="line">                <span class="string">'}'</span>;  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="获取成员变量"><a href="#获取成员变量" class="headerlink" title="获取成员变量"></a>获取成员变量</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo1</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>{</span><br><span class="line">       <span class="comment">// method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line">        <span class="comment">//method3();</span></span><br><span class="line">        <span class="comment">//method4();</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>{</span><br><span class="line">        <span class="comment">//返回所有公共成员变量对象的数组</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect4.Student"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取Field对象.</span></span><br><span class="line">        Field[] fields = clazz.getFields();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) {</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>{</span><br><span class="line">        <span class="comment">//返回所有成员变量对象的数组</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect4.Student"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取所有的Field对象</span></span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) {</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>{</span><br><span class="line">        <span class="comment">//返回单个公共成员变量对象</span></span><br><span class="line">        <span class="comment">//想要获取的成员变量必须是真实存在的</span></span><br><span class="line">        <span class="comment">//且必须是public修饰的.</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect4.Student"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取name这个成员变量</span></span><br><span class="line">        <span class="comment">//Field field = clazz.getField("name");</span></span><br><span class="line">        <span class="comment">//Field field = clazz.getField("name1");</span></span><br><span class="line">        Field field = clazz.getField(<span class="string">"money"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(field);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>{</span><br><span class="line">        <span class="comment">//返回单个成员变量对象</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect4.Student"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取money成员变量</span></span><br><span class="line">        Field field = clazz.getDeclaredField(<span class="string">"money"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(field);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="Field对象取值或赋值"><a href="#Field对象取值或赋值" class="headerlink" title="Field对象取值或赋值"></a>Field 对象取值或赋值</h4><p>既然获取到 Field 对象了，那么就赋值或取值吧</p><p>赋值：<code>void set(Object obj, Object value)</code>，给指定对象的成员变量赋值<br>取值：<code>Object get(Object obj)</code>，返回指定对象的 Field 值</p><p>为什么中间需要有一个 Object 类呢？比如遇到如下情形，set 方法怎么知道需要将值赋给谁呢？<br><img data-src="https://s2.loli.net/2022/12/21/M3VYLkhu1PITO5j.png" alt="05-为成员变量赋值.png"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo2</span> </span>{  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InstantiationException </span>{  </span><br><span class="line">        <span class="comment">//返回由该 Field表示的字段在指定对象上的值。  </span></span><br><span class="line">        <span class="comment">//method1();  </span></span><br><span class="line">        <span class="comment">//method2();    }  </span></span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, InstantiationException, IllegalAccessException </span>{  </span><br><span class="line">        <span class="comment">//给obj对象的成员变量赋值为value  </span></span><br><span class="line">        <span class="comment">//1.获取class对象  </span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect4.Student"</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//2.获取name这个Field对象  </span></span><br><span class="line">        Field field = clazz.getField(<span class="string">"name"</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//3.利用set方法进行赋值.  </span></span><br><span class="line">        <span class="comment">//3.1先创建一个Student对象  </span></span><br><span class="line">        Student student = (Student) clazz.newInstance();  </span><br><span class="line">        <span class="comment">//3.2有了对象才可以给指定对象进行赋值  </span></span><br><span class="line">        field.set(student,<span class="string">"zhangsan"</span>);  </span><br><span class="line">  </span><br><span class="line">        System.out.println(student);  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, InstantiationException, IllegalAccessException </span>{  </span><br><span class="line">        <span class="comment">//1.获取class对象  </span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect4.Student"</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//2.获取成员变量Field的对象  </span></span><br><span class="line">        Field field = clazz.getDeclaredField(<span class="string">"money"</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//3.取消一下访问检查  </span></span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//4.调用get方法来获取值  </span></span><br><span class="line">        <span class="comment">//4.1创建一个对象  </span></span><br><span class="line">        Student student = (Student) clazz.newInstance();  </span><br><span class="line">        <span class="comment">//4.2获取指定对象的money的值  </span></span><br><span class="line">        Object o = field.get(student);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//5.打印一下  </span></span><br><span class="line">        System.out.println(o);  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="反射获取成员方法"><a href="#反射获取成员方法" class="headerlink" title="反射获取成员方法"></a>反射获取成员方法</h3><ol><li>获取 Class 对象</li><li>获取 Method 对象</li><li>运行方法</li></ol><ul><li><code>Method[] getMethods()</code>：返回所有公共成员方法对象的数组，包括继承的</li><li><code>Method[] getDeclaredMethods()</code>：返回所有成员方法对象的数组，不包括继承的</li><li>返回单个公共成员方法对象</li><li>返回单个成员方法对象</li></ul><h4 id="数据准备-3"><a href="#数据准备-3" class="headerlink" title="数据准备"></a>数据准备</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//私有的，无参无返回值  </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{  </span><br><span class="line">        System.out.println(<span class="string">"私有的show方法，无参无返回值"</span>);  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//公共的，无参无返回值  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function1</span><span class="params">()</span> </span>{  </span><br><span class="line">        System.out.println(<span class="string">"function1方法，无参无返回值"</span>);  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//公共的，有参无返回值  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function2</span><span class="params">(String name)</span> </span>{  </span><br><span class="line">        System.out.println(<span class="string">"function2方法，有参无返回值,参数为"</span> + name);  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//公共的，无参有返回值  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">function3</span><span class="params">()</span> </span>{  </span><br><span class="line">        System.out.println(<span class="string">"function3方法，无参有返回值"</span>);  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"aaa"</span>;  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//公共的，有参有返回值  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">function4</span><span class="params">(String name)</span> </span>{  </span><br><span class="line">        System.out.println(<span class="string">"function4方法，有参有返回值,参数为"</span> + name);  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"aaa"</span>;  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="获取成员方法"><a href="#获取成员方法" class="headerlink" title="获取成员方法"></a>获取成员方法</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo1</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>{</span><br><span class="line">        <span class="comment">//method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line">        <span class="comment">//method3();</span></span><br><span class="line">        <span class="comment">//method4();</span></span><br><span class="line">        <span class="comment">//method5();</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>{</span><br><span class="line">        <span class="comment">//返回所有公共成员方法对象的数组，包括继承的</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect5.Student"</span>);</span><br><span class="line">        <span class="comment">//2.获取成员方法对象</span></span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) {</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回所有成员方法对象的数组，不包括继承的</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect5.Student"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取Method对象</span></span><br><span class="line">        Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="comment">//3.遍历一下数组</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) {</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>{</span><br><span class="line">        <span class="comment">//返回单个公共成员方法对象</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect5.Student"</span>);</span><br><span class="line">        <span class="comment">//2.获取成员方法function1</span></span><br><span class="line">        Method method1 = clazz.getMethod(<span class="string">"function1"</span>);</span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(method1);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>{</span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect5.Student"</span>);</span><br><span class="line">        <span class="comment">//2.获取一个有形参的方法function2</span></span><br><span class="line">        Method method = clazz.getMethod(<span class="string">"function2"</span>, String.class);</span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(method);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method5</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>{</span><br><span class="line">        <span class="comment">//返回单个成员方法对象</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect5.Student"</span>);</span><br><span class="line">        <span class="comment">//2.获取一个成员方法show</span></span><br><span class="line">        Method method = clazz.getDeclaredMethod(<span class="string">"show"</span>);</span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(method);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="运行成员方法"><a href="#运行成员方法" class="headerlink" title="运行成员方法"></a>运行成员方法</h4><ul><li><code>Object invoke(Object obj, Object… args)</code>：运行方法<ul><li>参数 1：用 obj 对象调用该方法</li><li>参数 2：调用方法的传递的参数（如果没有就不写）</li><li>返回值：方法的返回值（如果没有就不写）</li></ul></li></ul><p>比如说，我们现在想通过反射来获取 Class 中的 function4 方法，并运行它</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo2</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException </span>{</span><br><span class="line">    <span class="comment">//Object invoke(Object obj, Object... args)：运行方法</span></span><br><span class="line">    <span class="comment">//参数一：用obj对象调用该方法</span></span><br><span class="line">    <span class="comment">//参数二：调用方法的传递的参数（如果没有就不写）</span></span><br><span class="line">    <span class="comment">//返回值：方法的返回值（如果没有就不写）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect5.Student"</span>);</span><br><span class="line">        <span class="comment">//2.获取里面的Method对象  function4</span></span><br><span class="line">        Method method = clazz.getMethod(<span class="string">"function4"</span>, String.class);</span><br><span class="line">        <span class="comment">//3.运行function4方法就可以了</span></span><br><span class="line">        <span class="comment">//3.1创建一个Student对象,当做方法的调用者</span></span><br><span class="line">        Student student = (Student) clazz.newInstance();</span><br><span class="line">        <span class="comment">//3.2运行方法</span></span><br><span class="line">        Object result = method.invoke(student, <span class="string">"zhangsan"</span>);</span><br><span class="line">        <span class="comment">//4.打印一下返回值</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;反射的概述&quot;&gt;&lt;a href=&quot;#反射的概述&quot; class=&quot;headerlink&quot; title=&quot;反射的概述&quot;&gt;&lt;/a&gt;反射的概述&lt;/h3&gt;&lt;p&gt;反射机制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；&lt;/li&gt;
&lt;li&gt;对于任意一个对象，都能够调用它的任意属性和方法；&lt;/li&gt;
&lt;li&gt;这种动态获取信息以及动态调用对象方法的功能称为 Java 语言的反射机制。</summary>
    
    
    
    
    <category term="Java" scheme="https://coffeelize.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>写在博客创建的一周年</title>
    <link href="https://coffeelize.top/posts/cf194633.html"/>
    <id>https://coffeelize.top/posts/cf194633.html</id>
    <published>2022-12-19T13:13:10.000Z</published>
    <updated>2022-12-19T14:31:39.921Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="coffeelize"><a href="#coffeelize" class="headerlink" title="coffeelize"></a>coffeelize</h3><p>这两天收到阿里云域名续费消息，同时也收到了网站 SSL 证书到期的邮件，是的，域名买了一年，到今天刚好一年。</p><span id="more"></span><p>博客在中途更换过一次域名，也就是现在的域名：<code>coffeelize.top</code>。之所以叫 coffeelize，不仅仅是因为 #咖啡日常 #，更多的其实是想强调 <code>lize</code>。<code>lize</code> 在英语单词中通常为动词的后缀，很多情况下 <code>名词 + lize</code> 后就变成了动词，一是想表达：就像喝了一杯咖啡一样，满满的驱动力；二是期望：自己能够像 “coffeee” 那样，能够带给周围人更多的积极向上的 “动力”。</p><p><img data-src="https://s2.loli.net/2022/12/19/x8gyqlSMFsrhIRk.png" alt="01-博客运行时间.png"></p><p><img data-src="https://s2.loli.net/2022/12/19/JUlu2bNvLd6M8Oo.png" alt="02-域名续费消息.png"></p><p><img data-src="https://s2.loli.net/2022/12/19/Zs513UwFVmuAnaf.png" alt="03-证书到期.png"></p><p>去年的这个时候，还在复习着数值分析的期末考试呢😂，搭建这个博客花了我很长时间，记得那个 SSL 总是无法正常连接，导致无法往仓库中推送文件，也算是苦中作乐吧，哈哈</p><p>有了自己的个人博客之后，开始关注更多相关领域的个人博客，学着有模有样的发布笔记、装扮博客、交换友链，开始更加注重消息的来源和质量。自己也喜欢看别人的博客和笔记，有种窥探别人日记本闯入他人领地的感觉，遇到和自己 “技术栈” 差不多的站长，会主动联系，加个好友、交换一下友链或者相互鼓励一下，这种感觉很棒，可能也是我不断更新下去的主要原因吧。</p><p>博客在这一年里也有一点点的收获，下图为必应搜索引擎的数据报告（因为之前更换了一次域名的原因，这里只显示从 6 月份开始到现在的数据）</p><p><img data-src="https://s2.loli.net/2022/12/19/pXoBg9TFJK8xmaC.png" alt="05-必应控制台.png"></p><p>其实我也不在乎这个数据报告，更在乎的是我的🤝朋友们及笔记呀<br><img data-src="https://s2.loli.net/2022/12/19/HyleRzDBEp4ISbc.png" alt="06-朋友们以及笔记.png"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;coffeelize&quot;&gt;&lt;a href=&quot;#coffeelize&quot; class=&quot;headerlink&quot; title=&quot;coffeelize&quot;&gt;&lt;/a&gt;coffeelize&lt;/h3&gt;&lt;p&gt;这两天收到阿里云域名续费消息，同时也收到了网站 SSL 证书到期的邮件，是的，域名买了一年，到今天刚好一年。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Life" scheme="https://coffeelize.top/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>Git 简明教程</title>
    <link href="https://coffeelize.top/posts/6326f1e4.html"/>
    <id>https://coffeelize.top/posts/6326f1e4.html</id>
    <published>2022-12-18T06:42:20.000Z</published>
    <updated>2022-12-19T14:31:39.919Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="什么是-Git"><a href="#什么是-Git" class="headerlink" title="什么是 Git"></a>什么是 Git</h3><p>Git 是一个分布式版本控制工具，主要用于管理开发过程中的源代码文件（Java 类、xml 文件、html 页面等），在软件开发过程中被广泛使用</p><span id="more"></span><h3 id="Git-能做什么"><a href="#Git-能做什么" class="headerlink" title="Git 能做什么"></a>Git 能做什么</h3><ul><li>代码回溯：Git 在管理文件过程中会记录日志，方便回退到历史版本</li><li>版本切换：Git 存在分支的概念，一个项目可以有多个分支（版本），可以任意切换</li><li>多人协作：Git 支持多人协作，即一个团队共同开发一个项目，每个团队成员负责一部分代码，通过 Git 就可以管理和协调</li><li>远程备份：Git 通过仓库管理文件，在 Git 中存在远程仓库，如果本地文件丢失还可以从远程仓库获取</li></ul><p>我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有 GitHub、码云、GitLab 等，这里以码云为例进行讲解</p><h3 id="Git-全局设置"><a href="#Git-全局设置" class="headerlink" title="Git 全局设置"></a>Git 全局设置</h3><p>当安装 Git 后首先要做的事情是设置用户名称和 email 地址。这是非常重要的，因为每次 Git 提交都会使用该用户信息。在 Git 命令行中执行下面命令：</p><ul><li>设置用户信息 </li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"coffeelize"</span></span><br><span class="line">git config --global user.email <span class="string">"coffeelize@qq.com"</span></span><br></pre></td></tr></tbody></table></figure><p>注意：<strong>上面设置的 user.name 和 user.email 并不是我们在注册码云账号时使用的用户名和邮箱</strong>，此处可以任意设置</p><ul><li>查看配置信息 </li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://s2.loli.net/2022/12/19/CiSLe2VtpFR7zvK.png" alt="01-配置用户名和邮箱.png"></p><h3 id="获取-Git-仓库"><a href="#获取-Git-仓库" class="headerlink" title="获取 Git 仓库"></a>获取 Git 仓库</h3><p>要使用 Git 对我们的代码进行管理，首先需要获得 Git 仓库，获取 Git 仓库通常有两种方式</p><ul><li>在本地初始化 Git 仓库（不常用）</li><li>从远程仓库克隆（常用）</li></ul><h4 id="在本地初始化-Git-仓库"><a href="#在本地初始化-Git-仓库" class="headerlink" title="在本地初始化 Git 仓库"></a>在本地初始化 Git 仓库</h4><ol><li>在任意目录下创建一个空目录（例如 repo1）作为我们的本地 Git 仓库</li><li>进入这个目录中，点击右键打开 Git bash 窗口</li><li>执行命令 <code>git init</code></li></ol><p>初始化之后，目录中会多一个 <code>.git</code> 隐藏文件夹，命令行后会多出一个 master 分支<br><img data-src="https://s2.loli.net/2022/12/19/Z7mXMf8ovShOWUF.png" alt="02-master主分支.png"></p><p>注意：本地仓库不是从远程仓库克隆下来的，且本地仓库中若已经存放了一些文件，此时再从远程仓库拉去文件的时候可能会报如下所示的错误：fatal: refusing to merge unrelated histories（原因是本地仓库中含有本地仓库中文件的历史记录，远程仓库中包含远程仓库中文件的记录信息，这两者间完全没有联系，此时就需要将两者建立起联系）</p><p><img data-src="https://s2.loli.net/2022/12/19/aw3mrhOHW9vg1Zb.png" alt="016-本地仓库首次连接远程仓库报错.png"></p><p>此时，可以通过如下命令解决</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></tbody></table></figure><h4 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h4><p>可以通过 Git 提供的命令从远程仓库进行克隆，将远程仓库克隆到本地</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 远程仓库地址</span><br></pre></td></tr></tbody></table></figure><p>注：第一次克隆远程仓库时，可能需要登录 Git Credential Manage，即登录 Gitee 的账号，登录之后即可正常操作。同时登录之后，也会将一些验证信息保存到电脑当中，之后再次使用就不用再手动登录了</p><p><img data-src="https://s2.loli.net/2022/12/19/jMc9uwJOTRiW17E.png" alt="03-登录Gitee验证.png"></p><h3 id="工作区、暂存区、版本库"><a href="#工作区、暂存区、版本库" class="headerlink" title="工作区、暂存区、版本库"></a>工作区、暂存区、版本库</h3><ul><li><strong>版本库</strong>：前面看到的 <code>.git 隐藏文件夹</code> 就是版本库，版本库中存储了很多配置信息、日志信息和文件版本信息等</li><li><strong>工作区</strong>：包含.git 文件夹的目录就是工作区，也称为工作目录，主要用于存放开发的代码</li><li><strong>暂存区</strong>：.git 文件夹中有很多文件，其中有一个 <code>index 文件</code> 就是暂存区。暂存区是一个临时保存修改文件的地方</li></ul><h3 id="Git-工作区中文件的状态"><a href="#Git-工作区中文件的状态" class="headerlink" title="Git 工作区中文件的状态"></a>Git 工作区中文件的状态</h3><p>Git 工作区中的文件存在两种状态：</p><ul><li>untracked：未跟踪（未被纳入版本控制）</li><li>tracked：已跟踪（被纳入版本控制）<ul><li>Unmodified 未修改状态</li><li> Modified 已修改状态</li><li> Staged 已暂存状态</li></ul></li></ul><h3 id="本地仓库常用操作"><a href="#本地仓库常用操作" class="headerlink" title="本地仓库常用操作"></a>本地仓库常用操作</h3><ul><li>git status：查看文件状态</li><li> git add：将文件的修改加入暂存区</li><li> git reset：将暂存区的文件取消暂存或者是切换到指定版本</li><li> git commit：将暂存区的文件修改提交到版本库</li><li> git log：查看日志</li></ul><h4 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h4><p>可以通过 <code>git status</code> 来查看当前状态<br><img data-src="https://s2.loli.net/2022/12/19/aAXWUjsLFzoqeDQ.png" alt="04-status查看状态.png"></p><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add fileName</span><br></pre></td></tr></tbody></table></figure><h4 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h4><p>每次 Git 提交都会产生新的版本号，通过版本号就可以回到历史版本</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 版本号</span><br><span class="line">git reset --hard 76b00c3fd44c92359d70e02cb4ff35c3acf90b40</span><br></pre></td></tr></tbody></table></figure><h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m msg 文件名</span><br><span class="line">git commit -m <span class="string">"提交一个文件"</span> User.java</span><br></pre></td></tr></tbody></table></figure><p>红色字体：未跟踪，也就是还没有纳入 git 的版本管理<br>绿色字体：文件已经放到了缓存区</p><h4 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h4><p>git log 命令的作用是查看提交日志；通过 git log 命令查看日志，可以发现每次提交都会产生一个版本号，提交时设置的 message、提交人、邮箱、提交时间等信息都会记录到日志中</p><p><img data-src="https://s2.loli.net/2022/12/19/gKTMRtdwW6nSsvL.png" alt="05-log查看日志.png"></p><h3 id="远程仓库常用命令"><a href="#远程仓库常用命令" class="headerlink" title="远程仓库常用命令"></a>远程仓库常用命令</h3><ul><li>git remote：查看远程仓库</li><li> git remote add：添加远程仓库</li><li> git clone：从远程仓库克隆</li><li> git pull：从远程仓库拉取</li><li> git push：推送到远程仓库</li></ul><h4 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h4><p>origin 表示远程仓库的简称</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br><span class="line">git remote -v</span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://s2.loli.net/2022/12/19/OQIXkWoCeEtbRj9.png" alt="06-查看远程仓库简称.png"></p><p>说明当前本地的仓库已经和远程的仓库之间建立好了连接了。如果输入以上两个命令没有返回值的话，说明这仅仅只是一个本地仓库</p><h4 id="git-remote-add"><a href="#git-remote-add" class="headerlink" title="git remote add"></a>git remote add</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add 简称 远程仓库地址</span><br></pre></td></tr></tbody></table></figure><p>注意</p><ul><li>一个本地仓库可以关联多个远程仓库</li><li>这个简称我们习惯命名为 origin</li></ul><p>比如我这边初始化了一个本地仓库，然后还有一个远程仓库，想要将这个本地仓库和远程仓库联系起来</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://gitee.com/coffeelize/repo1.git</span><br></pre></td></tr></tbody></table></figure><p>此时再输入命令 <code>git remote -v</code>，即可查看是否已经关联成功</p><h4 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h4><p>Git 克隆的是该 Git 仓库服务器上的几乎所有数据（包括日志信息、历史记录等）</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 远程仓库地址</span><br></pre></td></tr></tbody></table></figure><h4 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h4><p>将本地仓库内容推送到远程仓库</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push 远程仓库简称 分支名称</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>先需要将文件提交到本地仓库 (add &amp; commit)，再推送到远程仓库</p><h4 id="切换远程仓库"><a href="#切换远程仓库" class="headerlink" title="切换远程仓库"></a>切换远程仓库</h4><p>如果当前本地仓库需要链接到另一个远程仓库呢，怎么处理？<br>比如说本地仓库当前绑定的是 repo1 仓库，想要将本地仓库绑定到另外一个远程仓库 hellogit。当前如果已经连接到了一个远程仓库，是无法直接通过添加远程仓库 URL 来覆盖掉原来的 URL，如下图所示：</p><p><img data-src="https://s2.loli.net/2022/12/19/eM9OwU4TtP2hbFa.png" alt="017-无法直接覆盖远程连接的URL.png"></p><p>方式一：直接修改远程仓库地址，更换远程仓库地址</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin URL</span><br><span class="line">git remote set-url orgin https://gitee.com/coffeelize/hellogit.git</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>方式二：先先删除当前连接的远程仓库地址，然后在添加</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">git remote add origin url</span><br></pre></td></tr></tbody></table></figure><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><p>分支是 Git 使用过程中非常重要的概念。使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。</p><p>本地仓库和远程仓库中都有分支，同一个仓库可以有多个分支，各个分支相互独立，互不干扰。通过 git init 命令创建本地仓库时默认会创建一个 master 分支。</p><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><ul><li>git branch：列出所有本地分支</li><li> git branch -r：列出所有远程分支</li><li> git branch -a：列出所有本地分支和远程分支</li></ul><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名称</span><br><span class="line">git branch <span class="built_in">test</span></span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://s2.loli.net/2022/12/19/MpQ8A1bmc2wCYov.png" alt="07-创建分支.png"></p><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名称</span><br><span class="line">git checkout <span class="built_in">test</span></span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://s2.loli.net/2022/12/19/Dmi5soLJWx81thl.png" alt="08-切换分支.png"></p><h4 id="推送至远程仓库分支"><a href="#推送至远程仓库分支" class="headerlink" title="推送至远程仓库分支"></a>推送至远程仓库分支</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push 远程仓库简称 分支名称</span><br><span class="line">//将<span class="built_in">test</span>分支推送到远程仓库</span><br><span class="line">git push origin <span class="built_in">test</span> </span><br></pre></td></tr></tbody></table></figure><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git merge 分支名称</span><br><span class="line">git merge <span class="built_in">test</span></span><br></pre></td></tr></tbody></table></figure><p>分支合并时需注意合并的方向，是将命令中的分支合并到当前所在的分支</p><p><img data-src="https://s2.loli.net/2022/12/19/7getKomVWPIN3DL.png" alt="09-合并分支.png"></p><p>在合并分支这种大操作下，会进入 vim 模式要求我们写日志，按照 vim 的操作即可</p><p>如果在合并当中遇到文件冲突，比如说主分支对 A 文件进行了修改，测试分支也对 A 文件进行了修改，然后在主分支中合并分支时，报如下错误：Automatic merge failed; fix conflicts and then commit the result.</p><p><img data-src="https://s2.loli.net/2022/12/19/9PgOCTkJ3qyxnr6.png" alt="10-合并分支报错.png"></p><p>此时冲突的文件会自动加入如下内容。<br><img data-src="https://s2.loli.net/2022/12/19/cIbPGwn2ksgdyqh.png" alt="011-合并后的冲突文件.png"></p><p>假如我们是想要保留这两行，那么可以把这些自动生成的符号删除，然后还需要将这个有冲突的文件再 add 和 commit 一下，此时，仍然会有报错：<br>fatal: cannot do a partial commit during a merge.（不能在合并的时候只提交一部分）<br><img data-src="https://s2.loli.net/2022/12/19/U3C4zvuSK1iTYxr.png" alt="012-合并解决冲突文件后再次报错.png"></p><p>这个时候我们需要在 commit 后面添加一个 <code>-i</code> 参数，此时这个冲突被我们手动解决了，然后就可以正常 push 了</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"modify by me"</span> testBranch.txt -i</span><br><span class="line">git push origin master</span><br></pre></td></tr></tbody></table></figure><h3 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h3><p>Git 中的标签，指的是某个分支某个特定时间点的状态。通过标签，可以很方便的切换到标记时的状态。比较有代表性的是人们会使用这个功能来标记发布结点（v1.0 、v1.2 等）。</p><h4 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></tbody></table></figure><h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag 标签名</span><br><span class="line">git tag v0.1</span><br></pre></td></tr></tbody></table></figure><h4 id="删除本地标签"><a href="#删除本地标签" class="headerlink" title="删除本地标签"></a>删除本地标签</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -d 标签名</span><br><span class="line">git tag -d v0.1</span><br></pre></td></tr></tbody></table></figure><h4 id="删除远程标签"><a href="#删除远程标签" class="headerlink" title="删除远程标签"></a>删除远程标签</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin :refs/tags/标签名</span><br><span class="line">git push origin :refs/tags/v0.1</span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://s2.loli.net/2022/12/19/6dlXaVzxyr7GL9O.png" alt="013-删除远程标签.png"></p><h4 id="将标签推送至远程仓库"><a href="#将标签推送至远程仓库" class="headerlink" title="将标签推送至远程仓库"></a>将标签推送至远程仓库</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push 远程仓库简称 标签名</span><br><span class="line">git push origin v0.1</span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://s2.loli.net/2022/12/19/Ejv9nRudHbUyrFo.png" alt="014-将标签推送至远程仓库.png"></p><h4 id="检出标签"><a href="#检出标签" class="headerlink" title="检出标签"></a>检出标签</h4><p>检出标签时需要新建一个分支来指向某个标签。会自动将某个 tag 中的内容检出到一个新的分支下面</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 新建的一个分支名 标签名</span><br><span class="line">git checkout -b aNewBranch v0.2</span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://s2.loli.net/2022/12/19/dyaphUSAH3scDTP.png" alt="015-检出标签.png"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;什么是-Git&quot;&gt;&lt;a href=&quot;#什么是-Git&quot; class=&quot;headerlink&quot; title=&quot;什么是 Git&quot;&gt;&lt;/a&gt;什么是 Git&lt;/h3&gt;&lt;p&gt;Git 是一个分布式版本控制工具，主要用于管理开发过程中的源代码文件（Java 类、xml 文件、html 页面等），在软件开发过程中被广泛使用&lt;/p&gt;</summary>
    
    
    
    
    <category term="Git" scheme="https://coffeelize.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>lombok 简明笔记</title>
    <link href="https://coffeelize.top/posts/44d474d.html"/>
    <id>https://coffeelize.top/posts/44d474d.html</id>
    <published>2022-12-17T13:26:10.000Z</published>
    <updated>2022-12-26T10:15:49.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Lombok 是一个 Java 类库，提供了一组注解，用于简化 POJO 实体类开发</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="导入坐标"><a href="#导入坐标" class="headerlink" title="导入坐标"></a>导入坐标</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{  </span><br><span class="line">    <span class="keyword">private</span> Long id;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> String password;  </span><br><span class="line">    <span class="keyword">private</span> Integer age;  </span><br><span class="line">    <span class="keyword">private</span> String tel;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="使用-lombok-注解"><a href="#使用-lombok-注解" class="headerlink" title="使用 lombok 注解"></a>使用 lombok 注解</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{  </span><br><span class="line">    <span class="keyword">private</span> Long id;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> String password;  </span><br><span class="line">    <span class="keyword">private</span> Integer age;  </span><br><span class="line">    <span class="keyword">private</span> String tel;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>@Setter：为模型类的属性提供 setter 方法</li><li> @Getter：为模型类的属性提供 getter 方法</li><li> @ToString：为模型类的属性提供 toString 方法</li><li> @NoArgsConstructor：提供一个无参构造方法</li><li> @AllArgsConstructor：提供全参构造方法</li><li> @EqualsAndHashCode：为模型类的属性提供 equals 和 hashcode 方法</li></ul><h4 id="进一步简化"><a href="#进一步简化" class="headerlink" title="进一步简化"></a>进一步简化</h4><p><code>@Data</code> 注解除了不包含步骤 3 中的 <code>@NoArgsConstructor</code> 及 <code>@AllArgsConstructor</code> 这两个注解之外，包含其余所有注解。因此，以下代码段与步骤 3 下的代码段等效</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>  </span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{  </span><br><span class="line">    <span class="keyword">private</span> Long id;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> String password;  </span><br><span class="line">    <span class="keyword">private</span> Integer age;  </span><br><span class="line">    <span class="keyword">private</span> String tel;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="Java" scheme="https://coffeelize.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Maven 高级简明笔记</title>
    <link href="https://coffeelize.top/posts/2cb3f51.html"/>
    <id>https://coffeelize.top/posts/2cb3f51.html</id>
    <published>2022-12-17T06:08:30.000Z</published>
    <updated>2022-12-23T04:01:02.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="分模块开发与设计"><a href="#分模块开发与设计" class="headerlink" title="分模块开发与设计"></a>分模块开发与设计</h3><p>将原始模块按照功能拆分为若干个子模块，方便模块间的相互调用，接口共享</p><span id="more"></span><p><img data-src="https://s2.loli.net/2022/12/20/2KG3AFHn9IkrQ7s.png" alt="01-分模块开发思想.png"></p><p>Intellij 中同时导入多个模块方式如下：<br><img data-src="https://s2.loli.net/2022/12/20/hYWKdaNVUjRFDug.png" alt="02-Intellij同时导入多个模块.png"></p><p>1、项目准备：之前做好的 SSM 整合的项目 maven_02_ssm 进行讲解<br>2、新建一个模块：maven_03_pojo</p><p>1）新建 com.itheima.domain 包<br>2）将 maven_02_ssm 中的 domain 下的 Book 实体类剪切至 maven_03_pojo 下的 domain 包下<br>3）此时 maven_02_ssm 将无法运行，因为缺少了 Book 实体类<br>4）现在要做到是：如何在 maven_02_ssm 中访问 / 加载 maven_03_pojo 下的 Book 实体类呢？</p><p>maven_03_pojo 模块中 pom.xml 的坐标如下</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_03_pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>那么我们在 maven_02_ssm 中引入上面的坐标</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖domain运行--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_03_pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>此时就将 maven_03_pojo 模块引入进来了，此时 maven_02_ssm 也没有报错了</p><p>总结：将一个模块中的一部分功能抽取出来单独做一个模块，然后在原来的使用方去引用这个抽取出来的模块，这样就做成了两个模块</p><p>但是此时 02 模块会有问题？为什么呢<br>因为通过坐标导入，会将相应的资源下载到本地仓库，02 模块引入了 03 模块，但是本地仓库里面却找不到 03 的资源。因此，我们还需要将 03 模块 install 到本地仓库中</p><p><img data-src="https://s2.loli.net/2022/12/20/ZKzeAFyfxuqWJD1.png" alt="03-导入坐标之后需要安装到本地仓库.png"></p><p>安装完之后，本地仓库中就可以找到模块 03 的资源了。此时我们在 compile 一下 02 模块，若能够编译成功，说明没有问题了</p><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><p>如果一个模块 A 依赖了模块 B，而 B 模块依赖了其他的东西，那么这个 A 模块可以直接使用这些东西</p><p>直接依赖：在当前项目中通过依赖配置建立的依赖关系<br>简介依赖：被依赖的资源如果依赖其他资源，当前项目简介依赖其他资源</p><h4 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h4><ul><li>路径优先：当依赖中出现相同的资源时，层级越深，优先级越低，层级越浅，优先级越高</li><li>声明优先：当资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的</li><li>特殊优先：当同级配置类相同资源的不同版本，后配置的覆盖先配置的</li></ul><p><img data-src="https://s2.loli.net/2022/12/20/NS41odfFWlRwQan.png" alt="04-依赖层级关系.png"></p><p>可以通过此处查看项目中的依赖关系<br><img data-src="https://s2.loli.net/2022/12/20/boJTGpKOdmHg3Vw.png" alt="05-Intellij中查看依赖层级关系.png"></p><h4 id="可选依赖"><a href="#可选依赖" class="headerlink" title="可选依赖"></a>可选依赖</h4><p>比如说 02 模块引用了 04 模块，04 模块中引用了几个坐标。现在的需求是，我不想让 02 模块能够加载或引用 04 模块中的坐标，怎么处理呢？</p><p>那么在 04 模块中，对如下这个坐标进行处理</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_03_pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--可选依赖是隐藏当前工程所依赖的资源，隐藏后对应资源将不具有依赖传递性--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>其实这个需要就是想要某个坐标没有传递性</p><h4 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h4><p>比如引用了 <code>maven_04_dao</code> 坐标，但是排除这个坐标下的另外两个坐标</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.itheima&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;maven_04_dao&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;!--排除依赖是隐藏当前资源对应的依赖关系--&gt;</span><br><span class="line">  &lt;exclusions&gt;</span><br><span class="line"> &lt;exclusion&gt;</span><br><span class="line">   &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line"> &lt;/exclusion&gt;</span><br><span class="line"> &lt;exclusion&gt;</span><br><span class="line">   &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line"> &lt;/exclusion&gt;</span><br><span class="line">  &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><p>那么可选和排除有什么区别呢：</p><ul><li>用的可选，别人引用了我的坐标，但是不知道我背后引用了哪些坐标；对外隐藏当前所依赖的资源</li><li>用的排除，别人是知道我背后引用了那些坐标的；主动断开依赖的资源，被排除的资源无需指定版本</li></ul><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p><img data-src="https://s2.loli.net/2022/12/20/u2RJgQrAbdtn1yO.png" alt="06-聚合的引入.png"></p><p>比如：上面的三个模块都是依赖 pojo 模块的，假如我们更新了 pojo 模块，上面三个模块会及时更新吗？如果 pojo 因为更新出现了问题，上面三个模块能够及时发现吗？</p><p>聚合：将多个模块组织成一个整理，同时进行项目构建的过程称为聚合（其实有点像事务的概念）<br>聚合工程：通常是一个不具有业务功能的 “空” 工程（仅有一个 pom 文件）<br>作用：使用聚合工程可以将多个模块编组，通过对聚合工程进行构建，实现对所包含的模块进行同步构建；当工程中某个模块发生更新时，必须保障工程中与已更新模块关联的模块同步更新，此时可以使用聚合工程来解决批量模块同步构建的问题</p><p>1）创建新 Maven 模块<br>2）聚合工程的特点：在 pom.xml 中，将打包方式设置为 pom</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>3）设置管理模块的模块名称</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置管理模块名称</span></span><br><span class="line"><span class="comment">..表示当前文件pom.xml文件的上一级文件</span></span><br><span class="line"><span class="comment">--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_02_ssm<span class="tag">&lt;/<span class="name">module</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_03_pojo<span class="tag">&lt;/<span class="name">module</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_04_dao<span class="tag">&lt;/<span class="name">module</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://s2.loli.net/2022/12/20/W4X3NPlEJMkL1qb.png" alt="07-聚合-引入子模块.png"></p><p><img data-src="https://s2.loli.net/2022/12/20/U8B1hmP9NRurxy2.png" alt="08-聚合后各层级的关系.png"></p><p>4）进行同步编译 compile</p><p><img data-src="https://s2.loli.net/2022/12/20/4WN2ZoTL8AxvcaY.png" alt="09-聚合后进行同步编译.png"></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>概念：继承描述的是两个工程间的关系，与 Java 中的继承相似，子工程可以继承父工程中的配置信息，常见于依赖关系的继承</p><p>作用：简化配置；减少版本冲突</p><p>1）继承关系在子类中描述</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置当前工程继承自parent工程--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_01_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../maven_01_parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>此时，就可以继承父工程中依赖的坐标了</p><p>2）父工程中的坐标都必须要被所有子工程继承吗？不一定<br>可以在父工程 pom 文件中通过 <code>dependencyManagement</code> 来指定这是一个可选的坐标</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义依赖管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>${junit.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>如果子工程中想要引用的话就在 pom 中加上相应的坐标，但是注意不要加版本号，因为他会自动继承父类中坐标的版本号；而对于其他子工程就不会自动继承引用这个坐标</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">  &lt;groupId&gt;junit&lt;/groupId&gt;  </span><br><span class="line">  &lt;artifactId&gt;junit&lt;/artifactId&gt;  </span><br><span class="line">  &lt;scope&gt;test&lt;/scope&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><p>3）子工程继承父工程中的坐标，只要父工程中坐标的版本号一改，所有子工程中对应的版本号都会改</p><p>聚合与继承的区别</p><ul><li>作用<ul><li>聚合用于快速构建项目</li><li>继承用于快速配置</li></ul></li><li>相同点<ul><li>聚合与继承的 pom.xml 文件打包方式均为 pom，可以将两种关系制作到同一个 pom 文件中</li><li>聚合与继承均属于设计型模块，并无实际的模块内容</li></ul></li><li>不同点<ul><li>聚合是在当前模块中配置关系，聚合可以感知到参与聚合的模块有哪些</li><li>继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己</li></ul></li></ul><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p><img data-src="https://s2.loli.net/2022/12/20/7U4sAGSDOdz3f9e.png" alt="10-属性问题的引入.png"></p><p>1）定义属性</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义属性，标签名可以自定义--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>2）在定义坐标时，可以直接使用变量</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>3）这样就好了呀，以后可以直接从这儿就可以看到各种坐标的版本</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义属性--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis-spring.version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">mybatis-spring.version</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--&lt;jdbc.url&gt;jdbc:mysql://127.0.0.1:3306/ssm_db&lt;/jdbc.url&gt;--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h3><p>比如如下为某一工程 pom.xml 中的坐标，其中的 version 有什么用呢？</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;com.itheima&lt;/groupId&gt;  </span><br><span class="line">&lt;artifactId&gt;maven_02_ssm&lt;/artifactId&gt;  </span><br><span class="line">&lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;  </span><br><span class="line">&lt;packaging&gt;war&lt;/packaging&gt;</span><br></pre></td></tr></tbody></table></figure><ul><li>工程版本<ul><li> SNAPSHOT（快照版本）<ul><li>项目开发过程中临时输出的版本，称为快照版本</li><li>快照版本会随着开发的进展不断更新</li></ul></li><li> RELESE（发布版本）<ul><li>项目开发到进入阶段里程碑后，向团队外部发布较为稳定的版本，这种版本所对应的构建文件时稳定的，即便进行功能的后续开发，也不会改变当前发布版本的内容，这种版本称为发布版本</li></ul></li></ul></li><li>发布版本<ul><li> alpha 版</li><li> beta 版</li><li>纯数字版</li></ul></li></ul><h3 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h3><p><img data-src="https://s2.loli.net/2022/12/20/AJfgMke7ODpBI8r.png" alt="011-多环境配置.png"></p><p>maven 提供配置多种环境的设定，帮助开发者使用过程中快速切换环境</p><p>1）在父工程 pom.xml 中</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置多环境--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--开发环境--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_dep<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127.1.1.1:3306/ssm_db<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--设定是否为默认启动环境--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--生产环境--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127.2.2.2:3306/ssm_db<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--测试环境--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127.3.3.3:3306/ssm_db<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>2）对工程进行 install，然后可以查看项目构建好的 war 包，双击 war 包，进入 WEB-INF 文件夹 ⇒ classes 文件夹 ⇒ jdbc.properties 文件，查看配置是否生效</p><p>如果要更换环境，可以将设置默认启动环境的那几行代码切换一下位置，比如切换到测试环境中，那么 install 后，默认就是测试环境的配置了</p><p>或者可以不用挪动那几行代码，直接使用 Maven 指令来表明我们将使用 <code>env_dep</code> 环境来进行 install，如下图所示<br><img data-src="https://s2.loli.net/2022/12/20/iYJEPMRwrdWb1jV.png" alt="012-Maven指令处理多环境.png"></p><p><img data-src="https://s2.loli.net/2022/12/20/fISheL961B4DZxt.png" alt="013-Maven指令处理多环境-2.png"></p><h4 id="跳过测试"><a href="#跳过测试" class="headerlink" title="跳过测试"></a>跳过测试</h4><p>跳过测试：跳过所有测试<br><img data-src="https://s2.loli.net/2022/12/20/RS4pDOViCos8awT.png" alt="014-跳过测试.png"><br>跳过测试：指定跳过某些内容</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>false<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--排除掉不参与测试的内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/BookServiceTest.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;分模块开发与设计&quot;&gt;&lt;a href=&quot;#分模块开发与设计&quot; class=&quot;headerlink&quot; title=&quot;分模块开发与设计&quot;&gt;&lt;/a&gt;分模块开发与设计&lt;/h3&gt;&lt;p&gt;将原始模块按照功能拆分为若干个子模块，方便模块间的相互调用，接口共享&lt;/p&gt;</summary>
    
    
    
    
    <category term="Maven" scheme="https://coffeelize.top/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Linux 防火墙设置</title>
    <link href="https://coffeelize.top/posts/c8073837.html"/>
    <id>https://coffeelize.top/posts/c8073837.html</id>
    <published>2022-12-17T04:30:30.000Z</published>
    <updated>2022-12-19T14:31:39.920Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h3><span id="more"></span><table><thead><tr><th>操作</th><th>指令</th><th>备注</th></tr></thead><tbody><tr><td>查看防火墙状态</td><td> systemctl status firewalld / firewall-cmd –state</td><td></td></tr><tr><td> 暂时关闭防火墙</td><td> systemctl stop firewalld</td><td></td></tr><tr><td> 永久关闭防火墙 (禁用开机自启)</td><td>systemctl disable firewalld</td><td> 下次启动才生效</td></tr><tr><td>暂时开启防火墙</td><td> systemctl start firewalld</td><td></td></tr><tr><td> 永久开启防火墙 (启用开机自启)</td><td>systemctl enable firewalld</td><td> 下次启动才生效</td></tr><tr><td>开放指定端口</td><td> firewall-cmd –zone=public –add-port=8080/tcp –permanent</td><td> 需要重新加载生效</td></tr><tr><td>关闭指定端口</td><td> firewall-cmd –zone=public –remove-port=8080/tcp –permanent</td><td> 需要重新加载生效</td></tr><tr><td>立即生效 (重新加载)</td><td>firewall-cmd –reload</td><td></td></tr><tr><td> 查看开放端口</td><td> firewall-cmd –zone=public –list-ports</td><td></td></tr></tbody></table><p>注意：为了保证系统安全，不建议关闭服务器的防火墙；可以开放指定端口</p><p>比如说启用 Linux 的 Tomcat 服务，需要开启 8080 端口，</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></tbody></table></figure><p>然后就可以通过 ip:8080 来访问了 Linux 中的 Tomcat 了</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.119.128:8080</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;防火墙设置&quot;&gt;&lt;a href=&quot;#防火墙设置&quot; class=&quot;headerlink&quot; title=&quot;防火墙设置&quot;&gt;&lt;/a&gt;防火墙设置&lt;/h3&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://coffeelize.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Rest 风格简明笔记</title>
    <link href="https://coffeelize.top/posts/69507465.html"/>
    <id>https://coffeelize.top/posts/69507465.html</id>
    <published>2022-12-14T14:10:20.000Z</published>
    <updated>2022-12-19T14:31:39.920Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="Rest-简介"><a href="#Rest-简介" class="headerlink" title="Rest 简介"></a>Rest 简介</h3><p>Rest (Representation State Transfer, 表现形式状态转换)，即访问网络资源的格式</p><span id="more"></span><p>传统风格资源描述形式书写如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/user/getById?id=1</span><br><span class="line">http://localhost/user/saveUser</span><br></pre></td></tr></tbody></table></figure><p>REST 风格描述形式如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/user/1</span><br><span class="line">http://localhost/user</span><br></pre></td></tr></tbody></table></figure><p>特点</p><ul><li>隐藏资源的访问行为，无法通过地址得知对资源是何种操作</li><li>书写简化</li><li>按照 REST 风格访问资源时使用行为动作区分对资源进行了何种操作</li><li>根据 REST 风格对资源进行访问称为 RESTful</li></ul><p><img data-src="https://s2.loli.net/2022/12/19/eKqgoT9l7jDJRNI.png" alt="Rest风格增删改查.png"></p><p>注意事项</p><ul><li>上述行为是约定方式，约定不是规范，可以打破，所以称 REST 风格，而不是 REST 规范</li><li>描述模块的名称通常使用复数，也就是加 s 的格式描述，表示此类资源，而非单个资源，例如：users、books 等</li></ul><h3 id="Rest-入门案例"><a href="#Rest-入门案例" class="headerlink" title="Rest 入门案例"></a>Rest 入门案例</h3><p>1、原先的风格</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/save")</span>  </span><br><span class="line"><span class="meta">@ResponseBody</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>{  </span><br><span class="line">    System.out.println(<span class="string">"user save..."</span>);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'user save'}"</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2、REST 风格</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置当前请求方法为POST，表示REST风格中的添加操作  </span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users",method = RequestMethod.POST)</span>  </span><br><span class="line"><span class="meta">@ResponseBody</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>{  </span><br><span class="line">    System.out.println(<span class="string">"user save..."</span>);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'user save'}"</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置当前请求方法为DELETE，表示REST风格中的删除操作  </span></span><br><span class="line"><span class="comment">//@PathVariable注解用于设置路径变量（路径参数），要求路径上设置对应的占位符，并且占位符名称与方法形参名称相同  </span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users/{id}",method = RequestMethod.DELETE)</span>  </span><br><span class="line"><span class="meta">@ResponseBody</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>{  </span><br><span class="line">    System.out.println(<span class="string">"user delete..."</span> + id);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'user delete'}"</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注意 Postman 中的请求路径：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost//users/1</span><br></pre></td></tr></tbody></table></figure><p><code>@PathVariable</code> 表示后面的变量来自路径，但是来自路径中的哪儿呢？<br>而通过 <code>value = "/users/{id}"</code> 中就指明了路径参数（路径变量）</p><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置当前请求方法为PUT，表示REST风格中的修改操作  </span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users",method = RequestMethod.PUT)</span>  </span><br><span class="line"><span class="meta">@ResponseBody</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>{  </span><br><span class="line">    System.out.println(<span class="string">"user update..."</span>+user);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'user update'}"</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="根据-id-查询"><a href="#根据-id-查询" class="headerlink" title="根据 id 查询"></a>根据 id 查询</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置当前请求方法为GET，表示REST风格中的查询操作  </span></span><br><span class="line"><span class="comment">//@PathVariable注解用于设置路径变量（路径参数），要求路径上设置对应的占位符，并且占位符名称与方法形参名称相同  </span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users/{id}" ,method = RequestMethod.GET)</span>  </span><br><span class="line"><span class="meta">@ResponseBody</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>{  </span><br><span class="line">    System.out.println(<span class="string">"user getById..."</span>+id);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'user getById'}"</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置当前请求方法为GET，表示REST风格中的查询操作  </span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users",method = RequestMethod.GET)</span>  </span><br><span class="line"><span class="meta">@ResponseBody</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAll</span><span class="params">()</span></span>{  </span><br><span class="line">    System.out.println(<span class="string">"user getAll..."</span>);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'user getAll'}"</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>设定 http 请求动作：<code>@RequestMapping</code> 的 mathod 属性设置请求动作</li><li>设定请求参数（路径变量）</li><li><code>@PathVariable</code> 形参注解，用于绑定路径参数与处理器方法形参间的关系，要求路径参数名和形参名一一对应</li></ol><p><code>@RequestBody</code>：用于接收 json 数据<br><code>@RequestParam</code>：接受 URL 地址传参或表单传参<br><code>@PathVariable</code>：用于接收路径参数，使用 {参数名称} 描述路径参数</p><h3 id="RESTful-快速开发"><a href="#RESTful-快速开发" class="headerlink" title="RESTful 快速开发"></a>RESTful 快速开发</h3><h4 id="简化书写"><a href="#简化书写" class="headerlink" title="简化书写"></a>简化书写</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = "/users/{id}" ,method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users",method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users",method = RequestMethod.PUT)</span></span><br></pre></td></tr></tbody></table></figure><p>问题 1：可以看到，以上的这几个中 <code>value = "/users"</code> 都是重复要写的内容，能不能更简化呢？</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping("/books")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>{</span><br><span class="line"> <span class="comment">//各种处理器方法</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>问题 2：每一个处理器方法前面都带着一个 <code>@ResponseBody</code> 注解，能不能更简化些呢？</p><p>将 <code>@ResponseBody</code> 写到类的前面</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping("/books")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>{</span><br><span class="line"> <span class="comment">//各种处理器方法</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Spring ⇒ 既然每次都得写 <code>@Controller</code> 和 <code>@ResponseBody</code>，那就合二为一吧，使用 <code>@RestController</code> 即可</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/books")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>{</span><br><span class="line"> <span class="comment">//各种处理器方法</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>问题 3：每个处理器方法中都有</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">method = RequestMethod.POST</span><br><span class="line">method = RequestMethod.DELETE</span><br><span class="line">method = RequestMethod.PUT</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></tbody></table></figure><p>那么能不能简化书写呢？</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RequestMapping( method = RequestMethod.POST)  </span></span><br><span class="line"><span class="comment">//使用@PostMapping简化Post请求方法对应的映射配置</span></span><br><span class="line"><span class="meta">@PostMapping</span>        </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span></span>{  </span><br><span class="line">    System.out.println(<span class="string">"book save..."</span> + book);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'book save'}"</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>也就是说，使用注解 <code>@PostMapping</code> 来实现前面 mathod 属性中的功能</p><p>那么对于含有路径参数的呢？比如 delete ⇒ <code>@DeleteMapping("/{id}")</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RequestMapping(value = "/{id}" ,method = RequestMethod.DELETE)  </span></span><br><span class="line"><span class="meta">@DeleteMapping("/{id}")</span>     <span class="comment">//使用@DeleteMapping简化DELETE请求方法对应的映射配置  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>{  </span><br><span class="line">    System.out.println(<span class="string">"book delete..."</span> + id);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'book delete'}"</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@DeleteMapping("/{id}")</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="meta">@GetMapping("/{id}")</span></span><br></pre></td></tr></tbody></table></figure><h4 id="页面数据展示"><a href="#页面数据展示" class="headerlink" title="页面数据展示"></a>页面数据展示</h4><p>非本案例重点，这里省略操作</p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>基于 RESTful 页面数据交互总结</p><ul><li>先做后台功能，开发接口并调通接口</li><li>再做页面异步调用，确认功能可以正常访问</li><li>最后完成页面数据展示</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Rest-简介&quot;&gt;&lt;a href=&quot;#Rest-简介&quot; class=&quot;headerlink&quot; title=&quot;Rest 简介&quot;&gt;&lt;/a&gt;Rest 简介&lt;/h3&gt;&lt;p&gt;Rest (Representation State Transfer, 表现形式状态转换)，即访问网络资源的格式&lt;/p&gt;</summary>
    
    
    
    
    <category term="URL" scheme="https://coffeelize.top/tags/URL/"/>
    
  </entry>
  
  <entry>
    <title>TexStudio 配置及使用笔记</title>
    <link href="https://coffeelize.top/posts/afb103e0.html"/>
    <id>https://coffeelize.top/posts/afb103e0.html</id>
    <published>2022-12-12T12:44:20.000Z</published>
    <updated>2022-12-12T14:06:16.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>博客园：<a href="https://www.cnblogs.com/zyg123/p/10499675.html">06LaTeX 学习系列之 —TeXstudio 的使用</a></li><li>博客园：<a href="https://www.cnblogs.com/tsingke/p/15874512.html">Texstudio 常用快捷键（非常实用）</a></li><li>个人博客：<a href="http://haccanri.github.io/tools/2015/04/22/tex_editor.html">Texstudio 使用经验</a>（高阶操作）</li><li>连享会：<a href="https://lianxh.cn/news/1175c7e5d0ee0.html">LaTeX：TeXStudio 编辑器快捷键大全</a></li></ul><span id="more"></span><h3 id="1、常用快捷键"><a href="#1、常用快捷键" class="headerlink" title="1、常用快捷键"></a>1、常用快捷键</h3><table><thead><tr><th align="center"><strong>操作</strong></th><th align="center"><strong>快捷键</strong></th></tr></thead><tbody><tr><td align="center">插入环境</td><td align="center"> Ctrl+E</td></tr><tr><td align="center"> 插入行内公式</td><td align="center"> Ctrl+Shift+M</td></tr><tr><td align="center"> 注释 / 取消注释</td><td align="center"> Ctrl+T</td></tr><tr><td align="center"> 查看 PDF</td><td align="center">F7</td></tr><tr><td align="center"> 预览行内数学公式</td><td align="center"> Alt +P</td></tr><tr><td align="center"> 从 PDF 跳转至对应的 Tex</td><td align="center"> 在 PDF 中按 Ctrl 单击</td></tr></tbody></table><iframe src="https://quizlet.com/756156284/match/embed?i=24q5fr&amp;x=1jj1" height="500" width="100%" style="border:0"></iframe><h3 id="2、设置中文界面"><a href="#2、设置中文界面" class="headerlink" title="2、设置中文界面"></a>2、设置中文界面</h3><p><img data-src="https://s2.loli.net/2022/12/12/2Z6GLWJimAVSR9E.png" alt="01-Texstudio设置中文界面.png"></p><h3 id="3、设置编译器与编码"><a href="#3、设置编译器与编码" class="headerlink" title="3、设置编译器与编码"></a>3、设置编译器与编码</h3><p>为了正常的输出中文，我们需要把编译器改成 XeLaTeX ，utf-8 编码（默认）</p><h3 id="4、显示代码行号"><a href="#4、显示代码行号" class="headerlink" title="4、显示代码行号"></a>4、显示代码行号</h3><p><img data-src="https://s2.loli.net/2022/12/12/8nySts4QxHBTfje.png" alt="02-Texstudio显示行号.png"></p><h3 id="5、括号匹配高亮"><a href="#5、括号匹配高亮" class="headerlink" title="5、括号匹配高亮"></a>5、括号匹配高亮</h3><p>TexStudio 默认的括号匹配背景色好像是黄色的，有些看不清，不如设置个更亮一点的颜色吧</p><p><img data-src="https://s2.loli.net/2022/12/12/VkrzEOAZC9scXLQ.png" alt="03-括号匹配高亮1.png"></p><p><img data-src="https://s2.loli.net/2022/12/12/7vxtaQ1zIYOZFno.png" alt="04-括号匹配高亮2.png"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;博客园：&lt;a href=&quot;https://www.cnblogs.com/zyg123/p/10499675.html&quot;&gt;06LaTeX 学习系列之 —TeXstudio 的使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;博客园：&lt;a href=&quot;https://www.cnblogs.com/tsingke/p/15874512.html&quot;&gt;Texstudio 常用快捷键（非常实用）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;个人博客：&lt;a href=&quot;http://haccanri.github.io/tools/2015/04/22/tex_editor.html&quot;&gt;Texstudio 使用经验&lt;/a&gt;（高阶操作）&lt;/li&gt;
&lt;li&gt;连享会：&lt;a href=&quot;https://lianxh.cn/news/1175c7e5d0ee0.html&quot;&gt;LaTeX：TeXStudio 编辑器快捷键大全&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="quizlet" scheme="https://coffeelize.top/tags/quizlet/"/>
    
    <category term="LaTeX" scheme="https://coffeelize.top/tags/LaTeX/"/>
    
  </entry>
  
  <entry>
    <title>卸载 MySQL8 &amp; 安装 MySQL5</title>
    <link href="https://coffeelize.top/posts/642ade52.html"/>
    <id>https://coffeelize.top/posts/642ade52.html</id>
    <published>2022-12-11T07:48:20.000Z</published>
    <updated>2022-12-17T03:22:37.343Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="卸载前端准备"><a href="#卸载前端准备" class="headerlink" title="卸载前端准备"></a>卸载前端准备</h3><span id="more"></span><ol><li><p>MySQL 软件安装到哪儿<br><img data-src="https://s2.loli.net/2022/12/17/ZzSWamwC2qDe46J.png" alt="01-MySQL8 的安装位置.png"></p></li><li><p>MySQL 的数据库的数据都在哪儿<br><img data-src="https://s2.loli.net/2022/12/17/gOYTKLPaC6fkrb2.png" alt="02-MySQL8存放数据的位置.png"></p></li><li><p>右键计算机⇒管理⇒服务和应用程序</p></li></ol><p>找到服务 MySQL80</p><ol start="4"><li>右键电脑⇒属性⇒高级系统设置⇒环境变量，在 path 项下</li></ol><p><img data-src="https://s2.loli.net/2022/12/17/BDQ76Jjth5AvPb1.png" alt="03-MySQL8的环境变量.png"></p><h3 id="卸载步骤"><a href="#卸载步骤" class="headerlink" title="卸载步骤"></a>卸载步骤</h3><ol><li>停止 MySQL 服务</li><li>通过控制面板卸载程序的方式删除</li></ol><p><img data-src="https://s2.loli.net/2022/12/17/OtFWno8DwAiNaG6.png" alt="04-卸载两个程序.png"></p><p>以上截图中的两个都需要卸载</p><ol start="3"><li><p>删除环境变量</p></li><li><p>服务已经自动删除，无需我们在手动删除</p></li><li><p>重启电脑</p></li></ol><h3 id="安装-MySQL-5"><a href="#安装-MySQL-5" class="headerlink" title="安装 MySQL 5"></a>安装 MySQL 5</h3><p>下载地址：<a href="https://downloads.mysql.com/archives/installer/">MySQL :: Download MySQL Installer (Archived Versions)</a></p><p>下载 5.7.35 版本的 MSI Installer 安装包<br><img data-src="https://s2.loli.net/2022/12/17/Q1hHwJpcy2LXUvm.png" alt="05-选择安装版本以及安装包格式.png"></p><p>1、选择自定义的方式<br><img data-src="https://s2.loli.net/2022/12/17/FX8Lfp9biEn5vIN.png" alt="06-自定义安装.png"></p><p>2、选择需要安装的内容<br><img data-src="https://s2.loli.net/2022/12/17/TrdZEmICUv6qWkB.png" alt="07-需要安装的内容.png"></p><p>3、进行高级设置<br><img data-src="https://s2.loli.net/2022/12/17/sYUpAICHq63nLoN.png" alt="08-高级设定.png"></p><p>4、配置软件路径及数据库存放位置<br><img data-src="https://s2.loli.net/2022/12/17/KBofY5LHvzPcMmN.png" alt="09-配置安装路径及数据库数据路径.png"></p><p>5、端口号什么的不用修改，默认 3306 即可<br>6、设置账户密码</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>将软件安装目录下： bin 文件夹的整个路径复制到系统环境变量的 path 中即可</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;卸载前端准备&quot;&gt;&lt;a href=&quot;#卸载前端准备&quot; class=&quot;headerlink&quot; title=&quot;卸载前端准备&quot;&gt;&lt;/a&gt;卸载前端准备&lt;/h3&gt;</summary>
    
    
    
    
    <category term="MySQL" scheme="https://coffeelize.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Spring 注解开发</title>
    <link href="https://coffeelize.top/posts/43fd2e45.html"/>
    <id>https://coffeelize.top/posts/43fd2e45.html</id>
    <published>2022-12-11T04:47:20.000Z</published>
    <updated>2022-12-25T08:18:39.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h3><p>1、原先 xml 配置文件管理 bean 的方式</p><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"bookDao"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.itheima.dao.impl.BookDaoImpl"</span>/&gt;</span><br></pre></td></tr></tbody></table></figure><p>其中包含三个信息点：</p><ol><li>配置的是一个 bean</li><li> 配置的 bean 设置类型</li><li>配置的 bean 起个名字</li></ol><p>2、通过纯注解的方式管理 Bean</p><p>由于 bean 的类型是 <code>class="com.itheima.dao.impl.BookDaoImpl"</code>，因此想到直接将注解写在这个类中 <code>@Component("bookDao")</code>，那么以上信息中 “配置的 bean 设置类型” 和 “配置的 bean 起个名字” 就已经知道了，那么第一点 “配置的是一个 Bean” 如何去描述它呢？</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component("bookDao")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title">BookDao</span> </span>{  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>{  </span><br><span class="line">        System.out.println(<span class="string">"book dao save ..."</span>);  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在项目下新建一个 config 包，在包下新建一个 SpringConfig 的类；</p><ol><li>在类上加上 <code>@Configuration</code> 注解表明是 Spring 配置类（代表 Spring 的 xml 配置文件框架）</li><li><code>@ComponentScan</code> 设置 bean 扫描路径</li></ol><p>通过以上两点，就可以说明 “配置的是一个 Bean”，且告知了扫描路径。通过这样的方式完全可以取代原来的 xml 方式</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明当前类为Spring配置类（代表Spring的xml配置文件框架）  </span></span><br><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="comment">//设置bean扫描路径，多个路径书写为字符串数组格式（代表原先xml中的那句代码）  </span></span><br><span class="line"><span class="meta">@ComponentScan({"com.itheima.service","com.itheima.dao"})</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>{  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://s2.loli.net/2022/12/25/gHMoE24zDbyLf58.png" alt="01-xml转纯注解开发.png"></p><p>那么原先在类中创建容器的那句代码也需要改一下</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载配置文件初始化容器</span></span><br><span class="line">ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//改为如下</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//AnnotationConfigApplicationContext加载Spring配置类初始化Spring容器  </span></span><br><span class="line">ApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br></pre></td></tr></tbody></table></figure><p>小结</p><ul><li>Java 类代替 Spring 核心配置文件</li><li> @Configuration 注解用于设定当前类为配置类</li><li> @ComponentScan 注解用于设定扫描路径，此注解只能添加一次，多个数据需要使用数组格式</li></ul><h3 id="附注信息"><a href="#附注信息" class="headerlink" title="附注信息"></a>附注信息</h3><h4 id="衍生注解"><a href="#衍生注解" class="headerlink" title="衍生注解"></a>衍生注解</h4><p>Spring 提供 @Component 注解的三个衍生注解，衍生的注解功能和 Component 注解一样，只是方便我们区分</p><ul><li>@Controller：用于表现层 bean 定义</li><li> @Service：用于业务层 bean 定义</li><li> @Repository：用于数据层 bean 定义</li></ul><h4 id="包扫描若有多个路径"><a href="#包扫描若有多个路径" class="headerlink" title="包扫描若有多个路径"></a>包扫描若有多个路径</h4><p>如果有多个路径，需要使用字符串数组格式，如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{<span class="string">"com.itheima.service"</span>,<span class="string">"com.itheima.dao"</span>}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;注解开发&quot;&gt;&lt;a href=&quot;#注解开发&quot; class=&quot;headerlink&quot; title=&quot;注解开发&quot;&gt;&lt;/a&gt;注解开发&lt;/h3&gt;&lt;p&gt;1、原先 xml 配置文件管理 bean 的方式&lt;/p&gt;</summary>
    
    
    
    
    <category term="Spring" scheme="https://coffeelize.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Bean 简明笔记</title>
    <link href="https://coffeelize.top/posts/cc006828.html"/>
    <id>https://coffeelize.top/posts/cc006828.html</id>
    <published>2022-12-10T01:48:20.000Z</published>
    <updated>2022-12-23T08:28:58.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="bean-基础配置"><a href="#bean-基础配置" class="headerlink" title="bean 基础配置"></a>bean 基础配置</h3><span id="more"></span><p><img data-src="https://s2.loli.net/2022/12/23/fkiRtJFzHrOahoj.png" alt="01-Bean的配置信息一览图.png"></p><h4 id="bean-别名配置"><a href="#bean-别名配置" class="headerlink" title="bean 别名配置"></a>bean 别名配置</h4><p>1、设置别名</p><p>问 1：那么不同的人编写代码，可能给 bean 不同的命名，如何解决命名问题呢？<br>答 1：可以通过给 bean 起别名的方式</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookService"</span> <span class="attr">name</span>=<span class="string">"service,service2,bookEbi"</span> <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.BookServiceImpl"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookDao"</span> <span class="attr">ref</span>=<span class="string">"bookDao"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>name 属性值可以起多个别名，别名间以逗号、分号或空格来分割，比如如上代码的 <code>name="service,service2,bookEbi"</code></p><p>2、在到运行类中修改一下获取 bean 的 id 就可以了</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BookService bookService = (BookService) ctx.getBean(<span class="string">"service"</span>);  </span><br><span class="line">bookService.save();</span><br></pre></td></tr></tbody></table></figure><p>除此之外，在 DI 配置属性的时候，也支持 name 属性，但是我们还是推荐通过 id 来进行引用<br><img data-src="https://s2.loli.net/2022/12/23/hgQYupqBtroAj2I.png" alt="02-可通过ID或者Name属性来进行引用.png"></p><h3 id="bean-作用范围"><a href="#bean-作用范围" class="headerlink" title="bean 作用范围"></a>bean 作用范围</h3><h4 id="Bean-的单例和多例"><a href="#Bean-的单例和多例" class="headerlink" title="Bean 的单例和多例"></a>Bean 的单例和多例</h4><p>问 1：Spring 默认给我们创建的 bean 是 <strong>单例</strong> 的；那如果我想要造一个非单例的 bean 怎么办？<br><img data-src="https://s2.loli.net/2022/12/23/LihN3Pk8G2fHCUo.png" alt="03-创建的Bean默认为单例的.png"></p><p>答 1：通过配置的形式，在 bean 标签中再插入一个 scope 属性（默认为 singleton）</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookDao"</span> <span class="attr">name</span>=<span class="string">"dao"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span> <span class="attr">class</span>=<span class="string">"com.itheima.dao.impl.BookDaoImpl"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>问 2：那么为什么 bean 默认为单例呢？<br>答 2：单例的 bean 如果能够复用的话，那么下次需要使用直接去容器中拿就好了，而不是每用一次就造一个对象</p><p>问 3：那么那些 bean 适合造单例呢？<br>答 3：适合交给容器进行管理的 bean，包括表现层对象、业务层对象、数据层对象以及工具对象等</p><p>问 4：那么哪些 bean 不适合交给容器进行管理呢？<br>答 4：封装实体的域对象（如记录有成员变量的）</p><h3 id="bean-实例化"><a href="#bean-实例化" class="headerlink" title="bean 实例化"></a>bean 实例化</h3><p>bean 本质上就是对象，创建 bean 使用构造方法完成</p><h4 id="构造方法（常用）"><a href="#构造方法（常用）" class="headerlink" title="构造方法（常用）"></a>构造方法（常用）</h4><p>1、提供可访问的构造方法</p><p>构造方法不写也行，Spring 会为我们处理；如果我们手动写上的话，注意一定是无参的构造方法。即如果我们创建了含参的构造方法，但是没有提供无参的构造方法，将抛出异常 BeanCreationException</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title">BookDao</span> </span>{  </span><br><span class="line">    <span class="comment">//无参的构造方法  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookDaoImpl</span><span class="params">()</span> </span>{  </span><br><span class="line">        System.out.println(<span class="string">"book dao constructor is running"</span>);  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>{  </span><br><span class="line">        System.out.println(<span class="string">"book dao save ..."</span>);  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2、配置 bean</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookDao"</span> <span class="attr">class</span>=<span class="string">"com.itheima.dao.impl.BookDaoImpl"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="静态工厂"><a href="#静态工厂" class="headerlink" title="静态工厂"></a>静态工厂</h4><p>通过工厂的方式造对象（而不是使用 new）也是一种解耦的方式，那么通过工厂造出来的对象如何交给 Spring 进行管理呢？</p><p>1、静态工厂创建对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态工厂创建对象  </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderDaoFactory</span> </span>{  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> OrderDao <span class="title">getOrderDao</span><span class="params">()</span></span>{  </span><br><span class="line">        System.out.println(<span class="string">"factory setup...."</span>);  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrderDaoImpl();  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2、配置</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"orderDao"</span> <span class="attr">class</span>=<span class="string">"com.itheima.factory.OrderDaoFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getOrderDao"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>3、运行</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OrderDao orderDao = OrderDaoFactory.getOrderDao();  </span><br><span class="line">orderDao.save();</span><br></pre></td></tr></tbody></table></figure><p>也就是说：</p><ol><li>需要在配置文件中的 class 属性中指明工厂的路径</li><li>通过 <code>factory-method</code> 属性指明工厂中造对象的方法</li></ol><h4 id="实例工厂（了解）"><a href="#实例工厂（了解）" class="headerlink" title="实例工厂（了解）"></a>实例工厂（了解）</h4><p>1、实例工厂创建对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例工厂创建对象  </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoFactory</span> </span>{  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDao <span class="title">getUserDao</span><span class="params">()</span></span>{  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl();  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2、配置</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"userFactory"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.itheima.factory.UserDaoFactory"</span>/&gt;</span><br><span class="line">&lt;bean id=<span class="string">"userDao"</span> factory-method=<span class="string">"getUserDao"</span> factory-bean=<span class="string">"userFactory"</span>/&gt;</span><br></pre></td></tr></tbody></table></figure><ol><li>先造工厂的 bean，对应着第一行代码</li><li> factory-bean 指的是这个工厂的实例，也就是第一行代码中的 userFactory</li><li>factory-method 指明工厂中造对象的方法</li></ol><p>3、运行</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建实例工厂对象；  </span></span><br><span class="line">UserDaoFactory userDaoFactory = <span class="keyword">new</span> UserDaoFactory();  </span><br><span class="line"><span class="comment">//通过实例工厂对象创建对象  </span></span><br><span class="line">UserDao userDao = userDaoFactory.getUserDao();  </span><br><span class="line">userDao.save();</span><br></pre></td></tr></tbody></table></figure><h3 id="bean-生命周期"><a href="#bean-生命周期" class="headerlink" title="bean 生命周期"></a>bean 生命周期</h3><h4 id="通过配置文件"><a href="#通过配置文件" class="headerlink" title="通过配置文件"></a>通过配置文件</h4><p>1、在配置文件中绑定类的初始化和销毁前方法</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookDao"</span> <span class="attr">class</span>=<span class="string">"com.itheima.dao.impl.BookDaoImpl"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destory"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>2、在类（BookDaoImpl）中创建对应的方法即可</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title">BookDao</span> </span>{  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>{  </span><br><span class="line">        System.out.println(<span class="string">"book dao save ..."</span>);  </span><br><span class="line">    }  </span><br><span class="line">    <span class="comment">//表示bean初始化对应的操作  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>{  </span><br><span class="line">        System.out.println(<span class="string">"init..."</span>);  </span><br><span class="line">    }  </span><br><span class="line">    <span class="comment">//表示bean销毁前对应的操作  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>{  </span><br><span class="line">        System.out.println(<span class="string">"destory..."</span>);  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>需要注意的是：当容器关闭时才会执行销毁前方法</p><h4 id="bean-的生命周期"><a href="#bean-的生命周期" class="headerlink" title="bean 的生命周期"></a>bean 的生命周期</h4><ul><li>初始化容器<ul><li>创建对象（内存分配）</li><li>执行构造方法</li><li>执行属性注入（set 操作）</li><li>执行 bean 初始化方法</li></ul></li><li>使用 bean<ul><li> 执行业务操作</li></ul></li><li>关闭 / 销毁容器<ul><li>执行 bean 销毁方法</li></ul></li></ul><h3 id="附注"><a href="#附注" class="headerlink" title="附注"></a>附注</h3><h4 id="遇到-Spring-报错信息的解决办法"><a href="#遇到-Spring-报错信息的解决办法" class="headerlink" title="遇到 Spring 报错信息的解决办法"></a>遇到 Spring 报错信息的解决办法</h4><ol><li>找到最后一条报错信息，Caused By：哒哒哒</li><li>如果最下面的能解决就 ok，不能解决就继续看上一条报错信息</li><li>因为第一条信息是包含全部的报错信息（很长看不到重点）</li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;bean-基础配置&quot;&gt;&lt;a href=&quot;#bean-基础配置&quot; class=&quot;headerlink&quot; title=&quot;bean 基础配置&quot;&gt;&lt;/a&gt;bean 基础配置&lt;/h3&gt;</summary>
    
    
    
    
    <category term="Bean" scheme="https://coffeelize.top/tags/Bean/"/>
    
    <category term="Spring" scheme="https://coffeelize.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Element 简明笔记</title>
    <link href="https://coffeelize.top/posts/6d896227.html"/>
    <id>https://coffeelize.top/posts/6d896227.html</id>
    <published>2022-12-07T14:30:20.000Z</published>
    <updated>2022-12-12T14:06:16.741Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="Element-是什么"><a href="#Element-是什么" class="headerlink" title="Element 是什么"></a>Element 是什么</h3><p>将页面变得美美的呀😀</p><p>Element 是饿了么公司前端开发团队提供的一套基于 Vue 的网站组件库，用于快速构建网页<br>组件：组件网页的部件，例如：超链接、按钮、图片、表格等等</p><p>官网：<a href="https://element.eleme.cn/#/zh-CN">Element - 网站快速成型工具</a></p><span id="more"></span><h3 id="Element-快速入门"><a href="#Element-快速入门" class="headerlink" title="Element 快速入门"></a>Element 快速入门</h3><ol><li>引入 Element 的 css、js 文件和 Vue.js</li><li> 创建 Vue 核心对象</li><li>官网复制 Element 组件代码</li></ol><h4 id="1、将整个-element-ui-文件夹拷贝至-webapp-文件夹下"><a href="#1、将整个-element-ui-文件夹拷贝至-webapp-文件夹下" class="headerlink" title="1、将整个 element-ui 文件夹拷贝至 webapp 文件夹下"></a>1、将整个 element-ui 文件夹拷贝至 webapp 文件夹下</h4><p>因为包含了一整套组件，element-ui 包含了大量文件（差不多 8M 了）</p><h4 id="2、新建-HTML-页面，并引入-css、js-文件"><a href="#2、新建-HTML-页面，并引入-css、js-文件" class="headerlink" title="2、新建 HTML 页面，并引入 css、js 文件"></a>2、新建 HTML 页面，并引入 css、js 文件</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--通过下载好的element-ui文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"element-ui/lib/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"element-ui/lib/theme-chalk/index.css"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--或者--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;link rel="stylesheet" href="https://unpkg.com/element-ui/lib/theme-chalk/index.css"&gt;</span></span><br><span class="line"><span class="comment">&lt;script src="https://unpkg.com/element-ui/lib/index.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3、创建-Vue-核心对象-搭建框架"><a href="#3、创建-Vue-核心对象-搭建框架" class="headerlink" title="3、创建 Vue 核心对象 (搭建框架)"></a>3、创建 Vue 核心对象 (搭建框架)</h4><p>将代码写到 div 标签中即可；若需要引入 CSS 样式，可将其复制到 <code>&lt;/head&gt;</code> 之上</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"element-ui/lib/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"element-ui/lib/theme-chalk/index.css"</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">  </span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue({  </span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>:<span class="string">"app"</span>,  </span></span><br><span class="line"><span class="javascript">  </span></span><br><span class="line"><span class="javascript">  })  </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="4、去官网上找组件的代码"><a href="#4、去官网上找组件的代码" class="headerlink" title="4、去官网上找组件的代码"></a>4、去官网上找组件的代码</h4><p>比如去官网上找着这个按钮，看起来还不错，复制它的代码到 div 标签中即可</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button type=<span class="string">"danger"</span>&gt;危险按钮&lt;/el-button&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="5、小案例的完整代码"><a href="#5、小案例的完整代码" class="headerlink" title="5、小案例的完整代码"></a>5、小案例的完整代码</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"danger"</span>&gt;</span>危险按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"element-ui/lib/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"element-ui/lib/theme-chalk/index.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>:<span class="string">"app"</span></span></span><br><span class="line"><span class="javascript">  })</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Element-布局"><a href="#Element-布局" class="headerlink" title="Element 布局"></a>Element 布局</h3><p>Element 中有两种布局方式：Layout 布局和 Container 布局容器</p><h4 id="Layout-布局"><a href="#Layout-布局" class="headerlink" title="Layout 布局"></a>Layout 布局</h4><p>通过基础的 24 分栏，迅速简便地创建布局</p><p>官方案例：<a href="https://element.eleme.cn/#/zh-CN/component/layout">基础布局 | Element</a>，直接复制 CSS 和 HTML 标签到我们的页面当中即可</p><p><img data-src="https://s2.loli.net/2022/12/12/LQVR1SEGiDxtMv2.png" alt="01-从实例代码中复制HTML和CSS实现布局的引入.png"></p><h4 id="Container-容器布局"><a href="#Container-容器布局" class="headerlink" title="Container 容器布局"></a>Container 容器布局</h4><p>用于布局的容器组件，方便快速搭建页面的基本结构</p><p>官网示例：<a href="https://element.eleme.cn/#/zh-CN/component/container">Container 布局容器 | Element</a></p><p>同样也是复制 css 和 html。需要注意到是，如果布局中包含数据（比如含有表格等），那么我们只要将 data 复制到我们创建的 vue 对象中即可</p><p>官方给出代码</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> item = {</span></span><br><span class="line"><span class="javascript">        <span class="attr">date</span>: <span class="string">'2016-05-02'</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">'王小虎'</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">address</span>: <span class="string">'上海市普陀区金沙江路 1518 弄'</span></span></span><br><span class="line"><span class="javascript">      };</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">        <span class="attr">tableData</span>: <span class="built_in">Array</span>(<span class="number">20</span>).fill(item)</span></span><br><span class="line"><span class="javascript">      }</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  };</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>将 以上代码中的 data 复制到我们创建的 HTML 页面中的 vue 对象中去；同理，如果实例代码中有 methods 等属性的话，也一并复制到新建的 Vue 对象中去</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;  </span><br><span class="line">  <span class="keyword">new</span> Vue({  </span><br><span class="line">    el:<span class="string">"app"</span>,  </span><br><span class="line">      data() {  </span><br><span class="line">          <span class="keyword">const</span> item = {  </span><br><span class="line">              date: <span class="string">'2016-05-02'</span>,  </span><br><span class="line">              name: <span class="string">'王小虎'</span>,  </span><br><span class="line">              address: <span class="string">'上海市普陀区金沙江路 1518 弄'</span>  </span><br><span class="line">          };  </span><br><span class="line">          <span class="keyword">return</span> {  </span><br><span class="line">              tableData: Array(<span class="number">20</span>).fill(item)  </span><br><span class="line">          }  </span><br><span class="line">      }  </span><br><span class="line">  })  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="Element-组件"><a href="#Element-组件" class="headerlink" title="Element 组件"></a>Element 组件</h3><p>参考官方示例：<a href="https://element.eleme.cn/#/zh-CN/component/installation">组件 | Element</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Element-是什么&quot;&gt;&lt;a href=&quot;#Element-是什么&quot; class=&quot;headerlink&quot; title=&quot;Element 是什么&quot;&gt;&lt;/a&gt;Element 是什么&lt;/h3&gt;&lt;p&gt;将页面变得美美的呀😀&lt;/p&gt;
&lt;p&gt;Element 是饿了么公司前端开发团队提供的一套基于 Vue 的网站组件库，用于快速构建网页&lt;br&gt;组件：组件网页的部件，例如：超链接、按钮、图片、表格等等&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://element.eleme.cn/#/zh-CN&quot;&gt;Element - 网站快速成型工具&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Front End" scheme="https://coffeelize.top/tags/Front-End/"/>
    
    <category term="Element" scheme="https://coffeelize.top/tags/Element/"/>
    
    <category term="Vue" scheme="https://coffeelize.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Axios 异步框架简明笔记</title>
    <link href="https://coffeelize.top/posts/2fb0fb99.html"/>
    <id>https://coffeelize.top/posts/2fb0fb99.html</id>
    <published>2022-12-07T08:35:44.000Z</published>
    <updated>2022-12-07T10:56:18.600Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="Axios-异步框架简介"><a href="#Axios-异步框架简介" class="headerlink" title="Axios 异步框架简介"></a>Axios 异步框架简介</h3><p>Axios 对原生的 AJAX 进行封装，简化书写</p><h3 id="Axios-快速入门"><a href="#Axios-快速入门" class="headerlink" title="Axios 快速入门"></a>Axios 快速入门</h3><ol><li>引入 axios 的 js 文件</li><li>使用 axios 发送请求，并获取相应结果<span id="more"></span>详细步骤如下</li></ol><p>一、在 webapp 下新建 js 文件夹，拷贝 axios 的 js 文件<br>二、新建 html 文件，引入 js 文件</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/axios-0.18.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>三、创建 AxiosServlet</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AxiosServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">        System.out.println(<span class="string">"get..."</span>);  </span><br><span class="line">        <span class="comment">//1.接收请求参数  </span></span><br><span class="line">        String username = request.getParameter(<span class="string">"username"</span>);  </span><br><span class="line">        System.out.println(username);  </span><br><span class="line">        <span class="comment">//2.响应数据  </span></span><br><span class="line">        response.getWriter().write(<span class="string">"hello Axios"</span>);  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">        System.out.println(<span class="string">"post..."</span>);  </span><br><span class="line">        <span class="keyword">this</span>.doGet(request, response);  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>四、在 html 中编写 js 代码</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/axios-0.18.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//1.get</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">/* axios({</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       method:"get",</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       url:"http://localhost:8080/ajax-dmeo/axiosServlet?username=zhangsan"</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     }).then(function (resp){</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         alert(resp.data);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     })*/</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//2.post</span></span></span><br><span class="line"><span class="javascript">    axios({</span></span><br><span class="line"><span class="javascript">        <span class="attr">method</span>: <span class="string">"get"</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">url</span>: <span class="string">"http://localhost:8080/ajax-dmeo/axiosServlet"</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//data是请求参数</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: <span class="string">"username=zhangsan"</span></span></span><br><span class="line"><span class="javascript">    }).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>) </span>{</span></span><br><span class="line"><span class="javascript">        alert(resp.data);</span></span><br><span class="line"><span class="javascript">    })</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>代码说明及注意事项</p><ol><li>axios 大括号中的为 Java 中的对象</li><li><code>.then()</code> 方法是一个回调函数，如果响应接收到了的话就自动执行</li><li><code>data: "username=zhangsan"</code>，data 是请求参数。这里可以传 JSON 格式的数据。除此之外，还可以传 JS 对象类型的数据（JSON 数据格式可以和 Java 中的对象数据格式通过某些方式进行转换），因为 Axios 框架会自动将这个 JS 对象转为 JSON 的数据格式</li><li> Get 和 Post 两种方式传递参数的方式不一样，所以在 axios 方法中传入的对象（大括号包裹的内容）的方式不一样，一个写在 URL 中，一个写在 Data 属性中</li><li><code>.then()</code> 回调函数中，function 函数中的参数名可以不为 resp，随便一个都行，保持下面对象（resp.data）和这个参数名（resp）一致即可</li><li><code>resp.data</code> 即服务器端的 Servlet 响应过来的数据 </li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">flowchart&nbsp;RL</span><br><span class="line">    b1--&gt;|"username = &amp;quot;zhangsan&amp;quot;"|servlet1</span><br><span class="line">    servlet1--&gt;|data|b1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;subgraph&nbsp;Browsers  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;b1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;b2</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;end  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;subgraph&nbsp;servers  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;servlet1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;servlet2</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;end</span><br></pre></td></tr></tbody></table></figure><p>简单来说，Axios 实现的功能就是：通过 get 或 post 给 Servlet 传递一个参数（username=“zhangsan”），然后 Servlet 接收到这个参数，就可以进行判断的操作，根据判断的结果在给浏览器发送一个响应。浏览器收到响应数据（date）之后，就可以做出一些操作，比如弹出窗口操作。</p><h3 id="Axios-请求方式别名"><a href="#Axios-请求方式别名" class="headerlink" title="Axios 请求方式别名"></a>Axios 请求方式别名</h3><p>为了方便起见，Axios 已经为所有支持的请求方法提供了别名</p><p>发送 Get 请求</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. Get方式  </span></span><br><span class="line">axios.get(<span class="string">"http://localhost:8080/ajax-dmeo/axiosServlet?username=zhangsan"</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>)</span>{  </span><br><span class="line">    alert(resp.data);  </span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>发送 Post 请求</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">"http://localhost:8080/ajax-dmeo/axiosServlet?username=zhangsan"</span>,<span class="string">"username=zhangsan"</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>)</span>{  </span><br><span class="line">    alert(resp.data);  </span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>原生的 Axios 书写方式 VS 别名的简化书写方式</p><ul><li>原生的书写格式：阅读性较好</li><li>别名的方式：代码量少，基本上只需要填写必要的参数信息</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Axios-异步框架简介&quot;&gt;&lt;a href=&quot;#Axios-异步框架简介&quot; class=&quot;headerlink&quot; title=&quot;Axios 异步框架简介&quot;&gt;&lt;/a&gt;Axios 异步框架简介&lt;/h3&gt;&lt;p&gt;Axios 对原生的 AJAX 进行封装，简化书写&lt;/p&gt;
&lt;h3 id=&quot;Axios-快速入门&quot;&gt;&lt;a href=&quot;#Axios-快速入门&quot; class=&quot;headerlink&quot; title=&quot;Axios 快速入门&quot;&gt;&lt;/a&gt;Axios 快速入门&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;引入 axios 的 js 文件&lt;/li&gt;
&lt;li&gt;使用 axios 发送请求，并获取相应结果</summary>
    
    
    
    
    <category term="AJAX" scheme="https://coffeelize.top/tags/AJAX/"/>
    
    <category term="Front End" scheme="https://coffeelize.top/tags/Front-End/"/>
    
    <category term="Java" scheme="https://coffeelize.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Mermaid 简明教程</title>
    <link href="https://coffeelize.top/posts/89543310.html"/>
    <id>https://coffeelize.top/posts/89543310.html</id>
    <published>2022-12-07T00:40:20.000Z</published>
    <updated>2022-12-07T08:54:14.665Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li>Mermaid 官方文档：<a href="https://mermaid-js.github.io/mermaid/#/">mermaid - Markdownish syntax for generating flowcharts, sequence diagrams, class diagrams, gantt charts and git graphs.</a></li><li>Github：<a href="https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md">Mermaid 中文说明文档</a></li><li> Mermaid 在线编辑 Github：<a href="https://github.com/mermaidjs/mermaid-live-editor">mermaid-live-editor</a></li><li>VScode 插件：<a href="https://marketplace.visualstudio.com/items?itemName=bierner.markdown-mermaid">Markdown Preview Mermaid Support</a></li><li>VScode 插件：<a href="https://marketplace.visualstudio.com/items?itemName=bpruitt-goddard.mermaid-markdown-syntax-highlighting">Mermaid Markdown Syntax Highlighting</a></li></ol><h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><ol><li>个人博客：<a href="https://ghobam.com/2022/05/06/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE/">Mermaid 流程图 - Sherwood 的博客</a></li></ol><span id="more"></span><h3 id="流程图快速入门"><a href="#流程图快速入门" class="headerlink" title="流程图快速入门"></a>流程图快速入门</h3><h4 id="案例-1：常规流程图"><a href="#案例-1：常规流程图" class="headerlink" title="案例 1：常规流程图"></a>案例 1：常规流程图</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[Christmas] --&gt;|Get money| B(Go shopping)</span><br><span class="line">    B --&gt; C{Let me think}</span><br><span class="line">    C --&gt;|One| D[Laptop]</span><br><span class="line">    C --&gt;|Two| E[iPhone]</span><br><span class="line">    C --&gt;|Three| F[Car]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[Christmas] --&gt;|Get money| B(Go shopping)</span><br><span class="line">    B --&gt; C{Let me think}</span><br><span class="line">    C --&gt;|One| D[Laptop]</span><br><span class="line">    C --&gt;|Two| E[iPhone]</span><br><span class="line">    C --&gt;|Three| F[Car]</span><br></pre></td></tr></tbody></table></figure><ul><li><p>第一行：TD（Top down）自上而下；<br>除此之外，还有上 (Top) 下 (Bottom) 左 (Left) 右 (Right)，可以两两组合来确定流程图的方向</p></li><li><p>第二行：中括号表示图形中的矩形，圆括号为圆角矩形，两竖线之间的表示箭头上的文字<br>除此之外，还有各种箭头和图形样式，这里不再列举，详细请查看官方文档和 <a href="https://ghobam.com/2022/05/06/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE/">Mermaid 流程图 - Sherwood 的博客</a></p></li></ul><h4 id="案例-2：带有子图的流程图"><a href="#案例-2：带有子图的流程图" class="headerlink" title="案例 2：带有子图的流程图"></a>案例 2：带有子图的流程图</h4><p>子图的基本语法为</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subgraph title</span><br><span class="line"> graph definition</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><p>完整案例如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">flowchart&nbsp;RL</span><br><span class="line">    b1--&gt;|"username = &amp;quot;zhangsan&amp;quot;"|servlet1</span><br><span class="line">    servlet1--&gt;|data|b1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;subgraph&nbsp;Browsers  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;b1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;b2</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;end  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;subgraph&nbsp;servers  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;servlet1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;servlet2</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;end</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">flowchart&nbsp;RL</span><br><span class="line">    b1--&gt;|"username = &amp;quot;zhangsan&amp;quot;"|servlet1</span><br><span class="line">    servlet1--&gt;|data|b1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;subgraph&nbsp;Browsers  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;b1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;b2</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;end  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;subgraph&nbsp;servers  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;servlet1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;servlet2</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;end</span><br></pre></td></tr></tbody></table></figure><p>特别注意：两竖线中的内容（也就是箭头上的文字）不能包含双引号，在 Mermaid 中算是特殊符号，请查阅 <a href="https://ghobam.com/2022/05/06/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE/">Mermaid 流程图 - Sherwood 的博客</a>，需要额外进行处理。<code>&amp;quot;</code> 来表示双引号。所以，在箭头上还是尽量少用双引号吧😀</p><p>以下方式均会导致绘图出错</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b1--&gt;|1.username = '"zhangsan"'|servlet1</span><br><span class="line">b1--&gt;'|1.username = "zhangsan"|'servlet1</span><br><span class="line">b1--&gt;|'1.username = "zhangsan"'|servlet1</span><br></pre></td></tr></tbody></table></figure><p>正确的处理方式</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b1--&gt;|"username = &amp;quot;zhangsan&amp;quot;"|servlet1</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Mermaid 官方文档：&lt;a href=&quot;https://mermaid-js.github.io/mermaid/#/&quot;&gt;mermaid - Markdownish syntax for generating flowcharts, sequence diagrams, class diagrams, gantt charts and git graphs.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github：&lt;a href=&quot;https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md&quot;&gt;Mermaid 中文说明文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; Mermaid 在线编辑 Github：&lt;a href=&quot;https://github.com/mermaidjs/mermaid-live-editor&quot;&gt;mermaid-live-editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;VScode 插件：&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=bierner.markdown-mermaid&quot;&gt;Markdown Preview Mermaid Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;VScode 插件：&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=bpruitt-goddard.mermaid-markdown-syntax-highlighting&quot;&gt;Mermaid Markdown Syntax Highlighting&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;推荐阅读&quot;&gt;&lt;a href=&quot;#推荐阅读&quot; class=&quot;headerlink&quot; title=&quot;推荐阅读&quot;&gt;&lt;/a&gt;推荐阅读&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;个人博客：&lt;a href=&quot;https://ghobam.com/2022/05/06/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE/&quot;&gt;Mermaid 流程图 - Sherwood 的博客&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="绘图" scheme="https://coffeelize.top/tags/%E7%BB%98%E5%9B%BE/"/>
    
    <category term="Mermaid" scheme="https://coffeelize.top/tags/Mermaid/"/>
    
  </entry>
  
  <entry>
    <title>AJAX 简明笔记</title>
    <link href="https://coffeelize.top/posts/d92ca625.html"/>
    <id>https://coffeelize.top/posts/d92ca625.html</id>
    <published>2022-12-06T06:17:16.000Z</published>
    <updated>2022-12-07T12:03:41.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="AJAX-简介"><a href="#AJAX-简介" class="headerlink" title="AJAX 简介"></a>AJAX 简介</h3><p>AJAX(Asynchronous JavaScirpt And XML)：<strong>异步</strong> 的 JavaScript 和 XML</p><span id="more"></span><p>同步和异步的比较如图所示<br><img data-src="https://s2.loli.net/2022/12/07/pX1lt9kHqKyhiZB.png" alt="03-同步和异步的比较.png"></p><p>AJAX 作用：</p><ol><li>与服务器进行数据交换：通过 AJAX 可以给服务器发送请求，并获取服务器响应的数据<ol><li>使用 AJAX 和服务器进行通信，就可以使用 HTML+AJAX 来替换 JSP 页面了</li><li>使用它的一个重要原因是可以用来替换 JSP 页面；JSP 做不到前后端分离</li></ol></li><li>异步交互：可以在 <strong>不重新加载整个页面</strong> 的情况下，与服务器交换数据并 <strong>更新部分</strong> 网页端技术，如：搜索联想，用户名是否可用校验等等</li></ol><p>之前的做法：JSP<br><img data-src="https://s2.loli.net/2022/12/07/O9PYR4Xtsy7Tqch.png" alt="01-响应请求JSP做法.png"></p><p>现在的做法：AJAX<br><img data-src="https://s2.loli.net/2022/12/07/mhD2onQgtAJT5qZ.png" alt="02-响应请求AJAX做法.png"></p><h3 id="AJAX-快速入门"><a href="#AJAX-快速入门" class="headerlink" title="AJAX 快速入门"></a>AJAX 快速入门</h3><ol><li>编写 AjaxServlet，并使用 response 输出字符串（后端代码）</li><li>创建 XMLHttpRequest 对象：损失和服务器交换数据（前端代码）</li><li>想服务器发送请求（前端代码）</li><li>获取服务器响应数据（前端代码）</li></ol><p>一、编写 AjaxServlet，并使用 response 输出字符串</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet("/ajaxServlet")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//1.响应数据  </span></span><br><span class="line">        response.getWriter().write(<span class="string">"hello AJAX"</span>);  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">        <span class="keyword">this</span>.doGet(request, response);  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>二、创建核心对象</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhttp;  </span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) {  </span><br><span class="line">  xhttp = <span class="keyword">new</span> XMLHttpRequest();  </span><br><span class="line">} <span class="keyword">else</span> {  </span><br><span class="line">  <span class="comment">// code for IE6, IE5  </span></span><br><span class="line">  xhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>代码可参考 W3C：<a href="https://www.w3school.com.cn/js/js_ajax_http.asp">AJAX - XMLHttpRequest 对象</a></p><p>三、发送请求</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xhttp.open(<span class="string">"GET"</span>, <span class="string">"http://localhost:8080/ajax-dmeo/ajaxServlet"</span>);</span><br><span class="line">xhttp.send();</span><br></pre></td></tr></tbody></table></figure><p>注意：这里的路径是全路径，因为后期项目的前端和后端需要部署在不同的服务器上，需要使用绝对路径而不是相对路径</p><p>代码可参考 W3C：<a href="https://www.w3school.com.cn/js/js_ajax_http_send.asp">AJAX - XMLHttpRequest</a></p><p>四、获取响应</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xhttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{  </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span> &amp;&amp; <span class="built_in">this</span>.status == <span class="number">200</span>) {  </span><br><span class="line">            alert(<span class="built_in">this</span>.responseText)  </span><br><span class="line">    }  </span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>代码参考 W3C：<a href="https://www.w3school.com.cn/js/js_ajax_http_response.asp">AJAX - 服务器响应</a></p><h3 id="AJAX完整案例"><a href="#AJAX完整案例" class="headerlink" title="AJAX完整案例"></a>AJAX 完整案例</h3><p>注意：还需要我们在服务器端创建一个用于响应浏览器的 Servlet，如以上步骤一所示（一、编写 AjaxServlet，并使用 response 输出字符串）</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">  </span></span><br><span class="line"><span class="javascript">    <span class="comment">//1.创建核心对象  </span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> xhttp;  </span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) {  </span></span><br><span class="line"><span class="javascript">      xhttp = <span class="keyword">new</span> XMLHttpRequest();  </span></span><br><span class="line"><span class="javascript">    } <span class="keyword">else</span> {  </span></span><br><span class="line"><span class="javascript">      <span class="comment">// code for IE6, IE5  </span></span></span><br><span class="line"><span class="javascript">      xhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);  </span></span><br><span class="line"><span class="javascript">    }  </span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//2.发送请求  </span></span></span><br><span class="line"><span class="javascript">    xhttp.open(<span class="string">"GET"</span>, <span class="string">"http://localhost:8080/ajax-dmeo/ajaxServlet"</span>);  </span></span><br><span class="line"><span class="javascript">    xhttp.send();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//3.获取响应</span></span></span><br><span class="line"><span class="javascript">    xhttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{  </span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span> &amp;&amp; <span class="built_in">this</span>.status == <span class="number">200</span>) {  </span></span><br><span class="line"><span class="javascript">                alert(<span class="built_in">this</span>.responseText)  </span></span><br><span class="line"><span class="javascript">        }  </span></span><br><span class="line"><span class="javascript">    };  </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;AJAX-简介&quot;&gt;&lt;a href=&quot;#AJAX-简介&quot; class=&quot;headerlink&quot; title=&quot;AJAX 简介&quot;&gt;&lt;/a&gt;AJAX 简介&lt;/h3&gt;&lt;p&gt;AJAX(Asynchronous JavaScirpt And XML)：&lt;strong&gt;异步&lt;/strong&gt; 的 JavaScript 和 XML&lt;/p&gt;</summary>
    
    
    
    
    <category term="AJAX" scheme="https://coffeelize.top/tags/AJAX/"/>
    
    <category term="Front End" scheme="https://coffeelize.top/tags/Front-End/"/>
    
    <category term="Java" scheme="https://coffeelize.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Filter 简明笔记</title>
    <link href="https://coffeelize.top/posts/c5ef217f.html"/>
    <id>https://coffeelize.top/posts/c5ef217f.html</id>
    <published>2022-12-06T03:20:39.000Z</published>
    <updated>2022-12-12T14:06:16.742Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="什么是-Filter"><a href="#什么是-Filter" class="headerlink" title="什么是 Filter"></a>什么是 Filter</h3><ul><li>Filter 表示过滤器，是 JavaWeb 三大组件 (Servlet、Filter、Listener) 之一</li><li>过滤器可以把对资源的请求拦截下来，从而实现一些特殊的功能</li><li>过滤器一般完成一些通用的操作，比如：权限控制、统一编码处理、敏感字符处理等</li></ul><span id="more"></span><p><img data-src="https://s2.loli.net/2022/12/12/YN6UJgCF2j8pE4Q.png" alt="02-Filter过滤器的执行流程.png"></p><p>比如需要登录我这个网站，才能访问我的 web 资源，而如果每个 web 资源都需要进行登录判断的话，那干脆将这一层提取出来放到 Filter 中来实现是否登录判断</p><h3 id="Filter-快速入门"><a href="#Filter-快速入门" class="headerlink" title="Filter 快速入门"></a>Filter 快速入门</h3><ol><li>定义类，实现 Filter 接口，并重写其所有方法</li><li>配置 Filter 拦截资源的路径：在类上定义 <code>@WebFilter</code> 注解</li><li>在 doFilter 方法中输出一句话，并放行</li></ol><p>PS:</p><ol><li>和 Servlet 的开发非常相似</li><li> Filter 是 web 的三大组件之一，项目结构中一般将其放在 web 文件夹下 </li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web.filter;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@WebFilter("/*")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>{  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>{  </span><br><span class="line">        System.out.println(<span class="string">"FilterDemo..."</span>);  </span><br><span class="line">        <span class="comment">//放行  </span></span><br><span class="line">        chain.doFilter(request,response);  </span><br><span class="line">    }  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>{  </span><br><span class="line">  </span><br><span class="line">    }  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>{  </span><br><span class="line">  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注：<code>@WebFilter("/*")</code> 表示拦截所有资源</p><p>这里容易出现导错包的问题，如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web.filter;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//import java.util.logging.Filter; //错误的包</span></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>{  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Filter-执行流程"><a href="#Filter-执行流程" class="headerlink" title="Filter 执行流程"></a>Filter 执行流程</h3><p><img data-src="https://s2.loli.net/2022/12/12/YN6UJgCF2j8pE4Q.png" alt="02-Filter过滤器的执行流程.png"></p><ol><li>放行后访问对象资源，资源访问完成后，还会回到 Filter 中吗？会</li><li>如果回到 Filter 中，是重新执行还是执行放行后的逻辑呢？放行后的逻辑</li></ol><p>执行放行前逻辑 ⇒ 放行 ⇒ 访问资源 ⇒ 执行放行后逻辑</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>{  </span><br><span class="line">    <span class="comment">//放行前逻辑；对request数据进行处理，response中还没有数据  </span></span><br><span class="line">    System.out.println(<span class="string">"FilterDemo..."</span>);  </span><br><span class="line">    <span class="comment">//放行  </span></span><br><span class="line">    chain.doFilter(request,response);<span class="comment">//访问到资源，response中有数据了  </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//放行后逻辑：对response数据进行处理  </span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Filter-使用细节"><a href="#Filter-使用细节" class="headerlink" title="Filter 使用细节"></a>Filter 使用细节</h3><h4 id="Filter-拦截路径配置"><a href="#Filter-拦截路径配置" class="headerlink" title="Filter 拦截路径配置"></a>Filter 拦截路径配置</h4><ul><li>拦截具体的资源：<code>/index.jsp</code>：只有访问 <code>index.jps</code> 时才会被拦截</li><li>目录拦截：<code>/user/*</code></li><li>后缀名拦截：<code>/*.jsp</code></li><li>拦截所有：<code>/*</code></li></ul><h4 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h4><p>一个 Web 应用，可以配置多个过滤器，这多个过滤器称为过滤器链</p><p><img data-src="https://s2.loli.net/2022/12/12/BVoGaSzYcsTndkZ.png" alt="03-Filter过滤器链.png"></p><p>注解配置的 Filter，优先级按照过滤器类名（字符串）的自然排序。比如 FilterDemo1 就排在 FilterDemo2 的前面</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;什么是-Filter&quot;&gt;&lt;a href=&quot;#什么是-Filter&quot; class=&quot;headerlink&quot; title=&quot;什么是 Filter&quot;&gt;&lt;/a&gt;什么是 Filter&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Filter 表示过滤器，是 JavaWeb 三大组件 (Servlet、Filter、Listener) 之一&lt;/li&gt;
&lt;li&gt;过滤器可以把对资源的请求拦截下来，从而实现一些特殊的功能&lt;/li&gt;
&lt;li&gt;过滤器一般完成一些通用的操作，比如：权限控制、统一编码处理、敏感字符处理等&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="JavaWeb" scheme="https://coffeelize.top/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>Intellij 创建 Servlet 模板</title>
    <link href="https://coffeelize.top/posts/5f8f3d0b.html"/>
    <id>https://coffeelize.top/posts/5f8f3d0b.html</id>
    <published>2022-12-05T08:37:38.000Z</published>
    <updated>2022-12-05T09:51:56.725Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="IDEA-创建-Servlet-模板"><a href="#IDEA-创建-Servlet-模板" class="headerlink" title="IDEA 创建 Servlet 模板"></a>IDEA 创建 Servlet 模板</h3><p>使用通用方式获取请求参数后，屏蔽了 GET 和 POST 的请求方式代码的不同，则代码可以定义为如下格式：</p><span id="more"></span><p><img data-src="https://s2.loli.net/2022/12/05/1uHOfFrKtb4cXpS.png" alt="01-Get和Post请求的通用方式.png"></p><p>那么，可以使用 Servlet 模板创建来 Servlet 更高效，设置如下</p><p><img data-src="https://s2.loli.net/2022/12/05/Ed1BSvMNxkbTuwK.png" alt="02-Servlet模板设置页面.png"></p><p>Servlet Annotated Class 模板如下</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">if</span> (${PACKAGE_NAME} &amp;&amp; ${PACKAGE_NAME} != <span class="string">""</span>)<span class="keyword">package</span> ${PACKAGE_NAME};#end  </span><br><span class="line">#parse(<span class="string">"File Header.java"</span>)  </span><br><span class="line">  </span><br><span class="line">#<span class="keyword">if</span> ($JAVAEE_TYPE == <span class="string">"jakarta"</span>)  </span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;  </span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.*;  </span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.*;  </span><br><span class="line">#<span class="keyword">else</span>  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;  </span><br><span class="line">#end  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@WebServlet("/${Entity_Name}")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $</span>{Class_Name} extends HttpServlet {  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">        <span class="keyword">this</span>.doGet(request,response);  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>下次新建 Servlet 时，就会通过设置好的模板来创建，为我们减少重复的操作<br><img data-src="https://s2.loli.net/2022/12/05/MkWiKY4wlNTcSnu.png" alt="03-通过Servlet模板来创建Servlet.png"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@WebServlet("/ServletDemo1")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">        <span class="keyword">this</span>.doGet(request, response);  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>使用这项操作前，请确保 pom.xml 中已经导入了 servlet 的依赖。因为模板中存在 <code>@WebServlet</code> 注解，没有 servlet 依赖的话 IDEA 可不认识这个注解，新建的 Servlet 就不会应用模板</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--servlet--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;IDEA-创建-Servlet-模板&quot;&gt;&lt;a href=&quot;#IDEA-创建-Servlet-模板&quot; class=&quot;headerlink&quot; title=&quot;IDEA 创建 Servlet 模板&quot;&gt;&lt;/a&gt;IDEA 创建 Servlet 模板&lt;/h3&gt;&lt;p&gt;使用通用方式获取请求参数后，屏蔽了 GET 和 POST 的请求方式代码的不同，则代码可以定义为如下格式：&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://coffeelize.top/tags/Java/"/>
    
    <category term="Intellij" scheme="https://coffeelize.top/tags/Intellij/"/>
    
    <category term="Servlet" scheme="https://coffeelize.top/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 常见问题汇总</title>
    <link href="https://coffeelize.top/posts/207efebe.html"/>
    <id>https://coffeelize.top/posts/207efebe.html</id>
    <published>2022-12-05T08:23:12.000Z</published>
    <updated>2022-12-05T09:52:03.674Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="新建菜单中，没有-servlet-选项"><a href="#新建菜单中，没有-servlet-选项" class="headerlink" title="新建菜单中，没有 servlet 选项"></a>新建菜单中，没有 servlet 选项</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><span id="more"></span><p><img data-src="https://s2.loli.net/2022/12/05/W5zcDJ8hX49AENa.png" alt="01-右键菜单没有Servlet选项.png"></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li>通过 Maven 导入 servlet 依赖</li><li>然后在项目中的文件夹，右键，就有新建 servlet 的选项了</li></ol><p><img data-src="https://s2.loli.net/2022/12/05/EDZo2gVNCOKQFat.png" alt="02-右键菜单中有Servlet选项.png"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/Howard_Roark/article/details/107046920">IDEA 右键新建 new 没有 servlet 选项的问题_破的軍的博客 - CSDN 博客_ideanew 不了 servlet</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;新建菜单中，没有-servlet-选项&quot;&gt;&lt;a href=&quot;#新建菜单中，没有-servlet-选项&quot; class=&quot;headerlink&quot; title=&quot;新建菜单中，没有 servlet 选项&quot;&gt;&lt;/a&gt;新建菜单中，没有 servlet 选项&lt;/h2&gt;&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;</summary>
    
    
    
    
    <category term="JavaWeb" scheme="https://coffeelize.top/tags/JavaWeb/"/>
    
    <category term="Interllij" scheme="https://coffeelize.top/tags/Interllij/"/>
    
    <category term="Navigation" scheme="https://coffeelize.top/tags/Navigation/"/>
    
  </entry>
  
  <entry>
    <title>IDEA 更新 Maven 坐标</title>
    <link href="https://coffeelize.top/posts/a2a6b1a5.html"/>
    <id>https://coffeelize.top/posts/a2a6b1a5.html</id>
    <published>2022-12-05T06:48:20.000Z</published>
    <updated>2022-12-12T14:06:16.742Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>IntelliJ IDEA 自动载入 Maven 依赖的功能很好用，但有时候会碰到问题，导致 pom.xml 文件修改却没有触发自动重新载入的动作，此时需要手动强制更新依赖。</p><span id="more"></span><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案 1"></a>解决方案 1</h3><p>点击右侧的 Maven，在弹出的窗口中点击 <code>重新加载所有的Maven项目</code><br><img data-src="https://s2.loli.net/2022/12/12/DKy3H9jbxutXm7v.png" alt="01-Maven侧边栏刷新.png"></p><p>或者：</p><ol><li>右键单击项目</li><li>在弹出的菜单中选择 Maven ⇒ <code>重新加载项目</code><br><img data-src="https://s2.loli.net/2022/12/12/b5nQwLC3S1DyAqN.png" alt="02-Maven重新加载项目.png"></li></ol><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案 2"></a>解决方案 2</h3><p>设置 Maven 的刷新方法为自动</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="http://www.bjpowernode.com/hot/2509.html">IDEA 更新 Maven 包的两种方法 - 动力节点</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;IntelliJ IDEA 自动载入 Maven 依赖的功能很好用，但有时候会碰到问题，导致 pom.xml 文件修改却没有触发自动重新载入的动作，此时需要手动强制更新依赖。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Intellij" scheme="https://coffeelize.top/tags/Intellij/"/>
    
    <category term="Maven" scheme="https://coffeelize.top/tags/Maven/"/>
    
  </entry>
  
</feed>
